declare type ScoringFunction = any;
declare type ResourceType = any;
declare type LuaFunction = any;
declare type vectorScoringFunction = any;
declare type Position = any;
declare type EntityTypeTable = any;
declare type SquadTypeTable = any;
declare type Table = any;
declare type MarkerIDPos = any;
declare type StackVar = any;
declare type EncounterTable = any;
declare type TABLE = any;
declare type RequestData = any;
declare type ModuleTable = any;
declare type UnitTable = any;
declare type Module = any;
declare type Context = any;
declare type Void = any;
declare type ConstTargetHandle = any;
declare type ScarAbilityPBG = any;
declare type DefendModuleRovingArmyModule = any;
declare type PositionMarkerTable = any;
declare type Vector = any;
declare type Key = any;
declare type EntityPBG = any;
declare type ScarSquadPBG = any;
declare type NUMBER = any;
declare type StackVarTable = any;
declare type RenderModel = any;
declare type Transform = any;
declare type variable = any;
declare type HexPos = any;
declare type POSMARKERGROUP = any;
declare type REAL = any;
declare type lua_State = any;
declare type ChallengeEventType = any;
declare type RefTable = any;
declare type In = any;
declare type and = any;
declare type NILNUMBER = any;
declare type Num = any;
declare type VALUE = any;
declare type SquadIDSBP = any;
declare type MARKERPOSITION = any;
declare type ScarModifier = any;
declare type MUT = any;
declare type ObjectiveFn = any;
declare type State = any;
declare type a = any;
declare type function1 = any;
declare type RovingArmy = any;
declare type rovingArmy = any;
declare type table = any;
declare type Request = any;
declare type ScarRacePBG = any;
declare type Item = any;
declare type OBJECT = any;
declare type list = any;
declare type when = any;
declare type real = any;
declare type the = any;
declare type Optional = any;
declare type stack_level = any;
declare type path = any;
declare type ScarPos = any;
declare type t_test_group = any;
declare type Any = any;
declare type DialogResult = any;
declare type VillagerLife = any;
declare type Marker = any;
declare type Wave = any;
declare type WinReason = any;
declare type ScarEntityPBG = any;
declare type CombatRangePolicy = any;
declare type TargetPreference = any;
declare type ScarAIStateModelTuningsPBG = any;
declare type Stringlist = any;
declare type LuaMapScarAIFormationCoordinatorPBG = any;
declare type PropertyBagGroupType = any;
declare type ScarUpgradePBG = any;
declare type Variable = any;
declare type ScarFn = any;
declare type Pos = any;
declare type vectorConstTargetHandle = any;
declare type Team = any;
declare type COMPARISON = any;
declare type PlayerIDTable = any;
declare type winReason = any;
declare type GameUICore = any;
declare type List = any;
declare type PLAYER = any;
declare type EBPEntityTypeTable = any;
declare type StackVarFunction = any;
declare type MarkerPos = any;
declare type ANYALL = any;
declare type EncounterData = any;
declare type SBPTable = any;
declare type SPAWN = any;
declare type GoalData = any;
declare type ComponentDependencyIndex = any;
declare type ScarWeaponPBG = any;
declare type EBP = any;
declare type ALL_UNITSANY_MEMBERANY_SQUAD = any;
declare type modids = any;
declare type MarkerPositionGroup = any;
declare type AreaType = any;
declare type BP = any;
declare type EntitySquadPosition = any;
declare type Element = any;
declare type MarkerIDTable = any;
declare type SquadCombatBehaviourMoodMode = any;
declare type Relation = any;
declare type BaseType = any;
declare type Var = any;
declare type ActorTable = any;
declare type EBPTable = any;
declare type ProxType = any;
declare type RealTable = any;
declare type Comparison = any;
declare type BPTable = any;
declare type SBPSquadTypeTable = any;
declare type or = any;
declare type ScarSlotItemPBG = any;
declare type ScarMoveTypePBG = any;
declare type ANY = any;
declare type Luafunction = any;
declare type GoalSequence = any;
declare type target = any;
declare type ScarBriefingActorPBG = any;
declare type MarkerPosEntitySquadGroup = any;
declare type sender = any;
declare type event = any;
declare type visible = any;
declare type enable = any;
declare type ui = any;
declare type Control = any;
declare type EventCueVisibility = any;
declare type same = any;
declare type ScarReticulePBG = any;
declare type ErrorMessage = any;
declare type argc = any;
declare type Spawntype = any;
declare type Func = any;
declare type ExitType = any;
declare type TABLESBP = any;
declare type POSMARKER = any;
declare type OPT_MARKER = any;
declare type OPT_REAL = any;
declare type OPT_PLAYER = any;
declare type PlayerID = number;
declare type SquadID = number;
declare type EntityID = number;
declare type SGroupID = number;
declare type EGroupID = number;
declare type MarkerID = number;
declare type AIEncounterID = number;
declare type MarkerPositionGroupID = number;
declare type UniqueID = number;
declare type AiEncounterID = number;
declare type AIScoreMultiplierID = number;
declare type SyncWeaponID = number;
declare type DeploymentID = number;
declare type AITaskID = number;
declare type CamouflageStanceID = number;
declare type UpgradeID = number;
declare type TeamID = number;
declare type entityID = number;
declare type AbilityID = number;
declare type PlayerIDEntityIDSquadID = number;
declare type PlayerIDTeamID = number;
declare type MarkerIDPosSectorID = number;
declare type MarkerIDPositionSectorID = number;
declare type squadID = number;
declare type SlotItemID = number;
declare type SectorID = number;
declare type GameEventID = number;
declare type ShieldWallID = number;
declare type Real = number;
declare type Integer = number;

declare function Entity_Create(bp: EntityBlueprint, playerId: PlayerID, spawnPosition: Position, unk: boolean): EntityID;
declare function Core_CallDelegateFunctions(s: string, b: boolean): void;
declare function Obj_CreatePopup(obj: Integer, title: string): void;

declare function AIProductionScoring_AlliedCombatFitness(aiPlayer: PlayerID, minFitness: Real, maxFitness: Real, aiArmyType: Integer, highFitnessIsGood: Boolean): any;
declare function AIProductionScoring_AlliedCombatFitnessVsStrongestEnemy(aiPlayer: PlayerID, minFitness: Real, maxFitness: Real, aiArmyType: Integer, highFitnessIsGood: Boolean): any;
declare function AIProductionScoring_AlliedCombatFitnessVsWeakestEnemy(aiPlayer: PlayerID, minFitness: Real, maxFitness: Real, aiArmyType: Integer, highFitnessIsGood: Boolean): any;
declare function AIProductionScoring_CanPushProductionScoringFunction(aiPlayer: PlayerID): any;
declare function AIProductionScoring_ClampedScoringFunction(aiPlayer: PlayerID, min: Real, max: Real, innerScoringFunction: ScoringFunction): any;
declare function AIProductionScoring_CounterScore(aiPlayer: PlayerID, baseScoreContributuion: Real): any;
declare function AIProductionScoring_DropOffScore(aiPlayer: PlayerID): any;
declare function AIProductionScoring_EntityCombatUpgrade(aiPlayer: PlayerID): any;
declare function AIProductionScoring_IslandNeedingExpansionBase(aiPlayer: PlayerID): any;
declare function AIProductionScoring_LackOfSecuredResourceDeposits(aiPlayer: PlayerID, resourceType: ResourceType, scarceAmount: Real, wellOffAmount: Real): any;
declare function AIProductionScoring_LuaScoringFunction(aiPlayer: PlayerID, scoringFunction: LuaFunction): any;
declare function AIProductionScoring_MaxPopCapPercentage(aiPlayer: PlayerID, targetPopulationPercentageAlive: Real, groupPopulation: Boolean): any;
declare function AIProductionScoring_MaxScoringFunction(aiPlayer: PlayerID, innerScoringFunction: vectorScoringFunction): any;
declare function AIProductionScoring_MaxWeaponDamage(aiPlayer: PlayerID, maxDamage: Real): any;
declare function AIProductionScoring_MilitaryPlayerUpgrade(aiPlayer: PlayerID, upgradeExponent: Real): any;
declare function AIProductionScoring_MinimumGameTime(aiPlayer: PlayerID, minGameTime: Real): any;
declare function AIProductionScoring_MultipleProduced(aiPlayer: PlayerID, additionalFactor: Real): any;
declare function AIProductionScoring_MultiplyListScoringFunction(aiPlayer: PlayerID, innerScoringFunction: vectorScoringFunction): any;
declare function AIProductionScoring_NavalTransportRequired(aiPlayer: PlayerID): any;
declare function AIProductionScoring_NotProducedRecently(aiPlayer: PlayerID, timePeriodSeconds: Real): any;
declare function AIProductionScoring_OnlyProduceOneAtATime(aiPlayer: PlayerID): any;
declare function AIProductionScoring_PlannedPlacementScore(aiPlayer: PlayerID, minPlacementScore: Real): any;
declare function AIProductionScoring_PlayerGatheringUpgrade(aiPlayer: PlayerID, improvementScalingFactor: Real, approxDistToDeposit: Real): any;
declare function AIProductionScoring_PlayersOnDifferentIslands(aiPlayer: PlayerID): any;
declare function AIProductionScoring_PopCapGenerator(aiPlayer: PlayerID): any;
declare function AIProductionScoring_PopulationPercentage(aiPlayer: PlayerID, targetPopulationPercentageAlive: Real, scoreDropOffFactor: Real, groupPopulation: Boolean, useSquadPopulation: Boolean): any;
declare function AIProductionScoring_PresenceOfEnemyTypes(aiPlayer: PlayerID, weights: Real, squadTypes: Boolean): any;
declare function AIProductionScoring_PresenceOfMyTypes(aiPlayer: PlayerID, weights: Real, squadTypes: Boolean): any;
declare function AIProductionScoring_ProductionQueueContention(aiPlayer: PlayerID, contentionThreshold: Real, normalFactor: Real): any;
declare function AIProductionScoring_RemainingPersonnelPopCap(aiPlayer: PlayerID, requiredRemainingPop: Real): any;
declare function AIProductionScoring_ResourceGeneratorScore(aiPlayer: PlayerID): any;
declare function AIProductionScoring_ShouldConsiderNaval(aiPlayer: PlayerID): any;
declare function AIProductionScoring_StrategicIntention(aiPlayer: PlayerID, weights: Real): any;
declare function AIProductionScoring_TierUpgrade(aiPlayer: PlayerID): any;
declare function AIProductionScoring_TimeToAcquire(aiPlayer: PlayerID, maxTimeSeconds: Real, includeTimeToGather: Boolean, includeTimeToBuildThis: Boolean, includeTimeToBuildRequirements: Boolean): any;
declare function AIProductionScoring_TradeRouteExistsScore(aiPlayer: PlayerID, landRoute: Boolean): any;
declare function AIProductionScoring_UnderCountLimit(aiPlayer: PlayerID, maxAlive: Integer, maxEverProduced: Integer, groupPopulation: Boolean): any;
declare function AIPlayer_GetStateModelBool(aiPlayer: PlayerID, key: String): any;
declare function AIPlayer_GetStateModelFloat(aiPlayer: PlayerID, key: String): any;
declare function AIPlayer_GetStateModelInt(aiPlayer: PlayerID, key: String): any;
declare function AIPlayer_GetStateModelPBG(aiPlayer: PlayerID, key: String): any;
declare function AIPlayer_GetStateModelTargetListEntries(aiPlayer: PlayerID, key: String): any;
declare function AISquad_ClearStateModelEnumTableTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_ClearStateModelTarget(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelBool(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelEntityTarget(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelEnumTableBool(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTableEntityTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTableFloat(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTableInt(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTablePBG(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTablePlayerTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTableSquadTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelEnumTableVector3f(aiSquad: SquadID, key: String, tableRowIndex: Integer): any;
declare function AISquad_GetStateModelFloat(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelInt(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelPBG(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelPlayerTarget(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelSquadTarget(aiSquad: SquadID, key: String): any;
declare function AISquad_GetStateModelVector3f(aiSquad: SquadID, key: String): any;
declare function AISquad_SetStateModelBool(aiSquad: SquadID, key: String, value: Boolean): any;
declare function AISquad_SetStateModelEntityTarget(aiSquad: SquadID, key: String, value: EntityID): any;
declare function AISquad_SetStateModelEnumTableBool(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: Boolean): any;
declare function AISquad_SetStateModelEnumTableEntityTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: EntityID): any;
declare function AISquad_SetStateModelEnumTableFloat(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: Real): any;
declare function AISquad_SetStateModelEnumTableInt(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: Integer): any;
declare function AISquad_SetStateModelEnumTablePBG(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: PropertyBagGroup): any;
declare function AISquad_SetStateModelEnumTablePlayerTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: PlayerID): any;
declare function AISquad_SetStateModelEnumTableSquadTarget(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: SquadID): any;
declare function AISquad_SetStateModelEnumTableVector3f(aiSquad: SquadID, key: String, tableRowIndex: Integer, value: Position): any;
declare function AISquad_SetStateModelFloat(aiSquad: SquadID, key: String, value: Real): any;
declare function AISquad_SetStateModelInt(aiSquad: SquadID, key: String, value: Integer): any;
declare function AISquad_SetStateModelPBG(aiSquad: SquadID, key: String, value: PropertyBagGroup): any;
declare function AISquad_SetStateModelPlayerTarget(aiSquad: SquadID, key: String, value: PlayerID): any;
declare function AISquad_SetStateModelSquadTarget(aiSquad: SquadID, key: String, value: SquadID): any;
declare function AISquad_SetStateModelVector3f(aiSquad: SquadID, key: String, value: Position): any;
declare function AITactic_AdjustJumpSlideAbilityTarget(aiSquad: SquadID, abilityPBG: PropertyBagGroup, slideOffset: Real, targetPosition: Position): any;
declare function AITactic_AICommandSquadMove(aiSquad: SquadID, target: Position, acceptableProximity: Real, reverseMove: Boolean): any;
declare function AITactic_GetTacticPriority(pSquad: SquadID, tacticType: AITacticType): any;
declare function BP_GetEntityBlueprintsWithType(types: EntityTypeTable): any;
declare function BP_GetSquadBlueprintsWithType(types: SquadTypeTable): any;
declare function Cardinal_ConvertTypeToEntityBlueprint(typeList: EntityTypeTable, player: PlayerID, OPT_returnAsTable: Boolean): any;
declare function Cardinal_ConvertTypeToSquadBlueprint(typeList: SquadTypeTable, player: PlayerID, OPT_returnAsTable: Boolean): any;
declare function Cmd_FormationAttackMove(sgroup: SGroupID, destination: EGroupID, OPT_queued: Boolean, OPT_deleteNearMarker: Boolean, OPT_deleteCallback: Function, OPT_deleteCallbackData: Table): any;
declare function Cmd_FormationMove(sgroup: SGroupID, destination: EGroupID, OPT_queued: Boolean, OPT_deleteWhenNearMarker?: MarkerID, OPT_facingPosition?: Position): any;
declare function Cmd_FormationMoveToAndDestroy(sgroup: SGroupID, destination: EGroupID, OPT_queued: Boolean, OPT_facingPosition: Position, OPT_callback: Function, OPT_callbackData: Table): any;
declare function Cmd_FormationStop(sgroup: SGroupID): any;
declare function Player_GetCurrentAge(player: PlayerID): any;
declare function Player_GetMaximumAge(player: PlayerID): any;
declare function Player_SetCurrentAge(player: PlayerID, age: Integer): any;
declare function Player_SetMaximumAge(player: PlayerID, age: Integer): any;
declare function SGroup_FormationWarpToMarker(sgroup: SGroupID, marker: MarkerID, OPT_facing: MarkerIDPos): any;
declare function SGroup_FormationWarpToPos(sgroup: SGroupID, pos: Position, OPT_facing: MarkerIDPos): any;
declare function AI_GetDebugAIPlayerID(): any;
declare function AI_ToggleDebugAIPlayer(): any;
declare function Cursor_Distance(): any;
declare function Cursor_GetClearWeaponShotHistory(): any;
declare function Cursor_GetDrawWeaponShotHistory(): any;
declare function Cursor_Info(): any;
declare function Cursor_WeaponInfo(): any;
declare function Cursor_WeaponRanges(): any;
declare function Debug_IgnoreMouseOverCheck(): any;
declare function Debug_ToggleControlAll(): any;
declare function Debug_ToggleDebugTest(): any;
declare function DisplayAdapterDatabase_CheckBoolOverride(setting: String): any;
declare function DisplayAdapterDatabase_CheckFloatOverride(setting: String): any;
declare function DisplayAdapterDatabase_CheckIntOverride(setting: String): any;
declare function DisplayAdapterDatabase_CheckMinimumDriverVersion(): any;
declare function DisplayAdapterDatabase_CheckUint16Override(setting: String): any;
declare function DisplayAdapterDatabase_CheckUint8Override(setting: String): any;
declare function DisplayAdapterDatabase_CheckUintOverride(setting: String): any;
declare function DisplayAdapterDatabase_GetAdapterFromID(vendor: String, device: String, subsystem: String, revision: String): any;
declare function DisplayAdapterDatabase_GetAdapterID(): any;
declare function DisplayAdapterDatabase_GetAdapterMinimumDriverVersion(vendor: String, device: String, subsystem: String, revision: String): any;
declare function DisplayAdapterDatabase_GetCurrentAdapterPerformanceClass(): any;
declare function DisplayAdapterDatabase_GetDriverInfo(): any;
declare function DisplayAdapterDatabase_GetPerformanceClass(relativePerformance: Real): any;
declare function FOW_Blockers(): any;
declare function fx_refresh(): any;
declare function GetPhysicsDebug(): any;
declare function GetPhysicsRaycastAsCapsuleDebug(): any;
declare function Hold_Info(): any;
declare function LCWatcher_Activate(on: Boolean): any;
declare function LCWatcher_AddFilter(stateName: String, filter: String): any;
declare function LCWatcher_FilterExists(stateName: String, filter: String): any;
declare function LCWatcher_IsActive(): any;
declare function LCWatcher_RemoveFilter(stateName: String, filter: String): any;
declare function LCWatcher_SelectState(state: String): any;
declare function LogPrintTo(file: String, txt: String): any;
declare function MemoryStats_Disable(): any;
declare function MemoryStats_Enable(): any;
declare function MemoryStats_Toggle(): any;
declare function Path_ClearCells(): any;
declare function Path_DrawImpass(): any;
declare function Path_DrawPath(): any;
declare function Path_DrawPathMap(onoff: Boolean): any;
declare function Path_ShowCell(x: Integer, y: Integer): any;
declare function Path_ShowPreciseCell(x: Integer, y: Integer): any;
declare function Path_ToggleCollisionCircle(): any;
declare function PBG_ReloadMouseOverEntity(): any;
declare function PBG_ReloadMouseOverSquad(): any;
declare function PBG_ReloadMouseOverWeapon(): any;
declare function RenderStats_Disable(): any;
declare function RenderStats_DumpToLogFile(): any;
declare function RenderStats_Enable(): any;
declare function RenderStats_SetUpdateTime(time: Real): any;
declare function RenderStats_SortInstances(): any;
declare function RenderStats_SortRenderCalls(): any;
declare function RenderStats_SortShaderChanges(): any;
declare function RenderStats_SortTris(): any;
declare function RenderStats_Toggle(): any;
declare function Scar_DrawMarkers(): any;
declare function Scar_GroupInfo(): any;
declare function Scar_GroupList(): any;
declare function ShaderStats_Disable(): any;
declare function ShaderStats_DumpToLogFile(): any;
declare function ShaderStats_Enable(): any;
declare function ShaderStats_SetUpdateTime(time: Real): any;
declare function ShaderStats_SortPixelCount(): any;
declare function ShaderStats_SortShaderNames(): any;
declare function ShaderStats_Toggle(): any;
declare function Sim_CheckRequirements(): any;
declare function Sim_DebugDrawSimTick(): any;
declare function Sim_DrawAttention(): any;
declare function Sim_DrawEntityCrusherOBB(): any;
declare function Sim_DrawEntityExtensions(): any;
declare function Sim_DrawEntityStateMove(): any;
declare function Sim_EntityAbility(): any;
declare function Sim_EntityDelay(): any;
declare function Sim_EntityDrawPosture(): any;
declare function Sim_EntityHistory(): any;
declare function Sim_EntityInfo(): any;
declare function Sim_EntityModifier(): any;
declare function Sim_EntityOBB(): any;
declare function Sim_EntityOOCTarget(): any;
declare function Sim_EntityUpgrades(): any;
declare function Sim_PlayerInfo(): any;
declare function Sim_PlayerModifiers(): any;
declare function Sim_ShotBlockers(): any;
declare function Sim_SimBox(): any;
declare function Sim_SquadHistory(): any;
declare function Sim_SquadInfo(): any;
declare function Sim_SquadSuppression(): any;
declare function Terrain_CreateSplat(_name: String, xpos: Real, zpos: Real, scale: Real): any;
declare function Terrain_DrawGrid(increment: Integer): any;
declare function Terrain_DrawGridLines(spacing: Integer): any;
declare function Terrain_DrawMaterialMap(onoff: Boolean): any;
declare function TimerAdd(command: String, freqInSec: Real): any;
declare function TimerAddFrame(command: String): any;
declare function TimerAddOnce(command: String, timeInSec: Real): any;
declare function TimerDel(command: String): any;
declare function Toggle_Scanning_Info(): any;
declare function TogglePhysicsDebug(enable: Boolean): any;
declare function TogglePhysicsRaycastAsCapsuleDebug(enable: Boolean): any;
declare function Vaulting_DrawDebug(): any;
declare function Weapon_AllWeaponAttackGround(): any;
declare function Weapon_AnimInfo(): any;
declare function Weapon_AttackRadii(): any;
declare function Weapon_Firing(): any;
declare function Weapon_HardPointInfo(): any;
declare function Weapon_Info(): any;
declare function Weapon_PrintBestTarget(): any;
declare function Weapon_PriorityInfo(): any;
declare function Weapon_ProjectileDetonateTimer(): any;
declare function Weapon_ProjectileInfo(): any;
declare function Weapon_ScatterInfo(): any;
declare function Weapon_Tracking(): any;
declare function dr_drawline(pos0: Position, pos1: Position, r: Integer, g: Integer, b: Integer, svar: StackVar): any;
declare function dr_terraincircle(pos: Position, radius: Real, r: Real, g: Real, b: Real, divs: Integer, frame: String): any;
declare function dr_terraincirclewithlifetime(pos: Position, radius: Real, r: Real, g: Real, b: Real, divs: Integer, frame: String, lifetime: Real): any;
declare function dr_terrainrect(pos: Position, w: Real, h: Real, r: Real, g: Real, b: Real, rads: Real): any;
declare function AIEncounter_TargetGuidance_SetTarget(aiEncounter: AIEncounterID, OPT_closestTo: MarkerPositionGroupID): any;
declare function Encounter_AddSGroup(encounter: EncounterTable, sgroup: SGroupID, OPT_restartIfNecessary: Boolean): any;
declare function Encounter_AddSquad(encounter: EncounterTable, squad: SquadID, OPT_restartIfNecessary: Boolean): any;
declare function Encounter_Create(player: PlayerID, group: EGroupID, goal: Table, OPT_debugName: String): any;
declare function Encounter_FindAssociatedEncounter(item: SGroupID): any;
declare function Encounter_GetAIEncounter(encounter: EncounterTable): any;
declare function Encounter_GetGoalData(encounter: EncounterTable): any;
declare function Encounter_GetSGroup(encounter: EncounterTable): any;
declare function Encounter_IsActive(encounter: EncounterTable): any;
declare function Encounter_RemoveAllSquads(encounter: EncounterTable): any;
declare function Encounter_RemoveSGroup(encounter: EncounterTable, sgroup: SGroupID): any;
declare function Encounter_RemoveSquad(encounter: EncounterTable, squad: SquadID): any;
declare function Encounter_Restart(encounter: EncounterTable): any;
declare function Encounter_SetGoalData(encounter: EncounterTable, newGoal: Table): any;
declare function Encounter_Start(encounter: EncounterTable): any;
declare function Encounter_Stop(encounter: EncounterTable, OPT_giveStopCommandToUnits: Boolean): any;
declare function getgametype(): any;
declare function getlocalplayer(): any;
declare function getmapname(): any;
declare function getsimrate(): any;
declare function Scar_DoFile(scriptName: String): any;
declare function Scar_DoString(str: String): any;
declare function Scar_Reload(): any;
declare function setsimpause(): any;
declare function Mission_EnableAbilities(data: String, enable: Boolean): any;
declare function _AudioTrigger_ComposeError(): any;
declare function _AudioTrigger_InitCore(): any;
declare function AudioTrigger_Activate(leaderdatatable: TABLE): any;
declare function AudioTrigger_CanPlay(leaderdatatable: TABLE): any;
declare function AudioTrigger_CheckArea(leaderdatatable: TABLE): any;
declare function AudioTrigger_CheckConditional(leaderdatatable: TABLE): any;
declare function AudioTrigger_Deactivate(leaderdatatable: TABLE): any;
declare function AudioTrigger_InitAreaTrigger(baredatatable: TABLE): any;
declare function AudioTrigger_InitConditionalTrigger(baredatatable: TABLE): any;
declare function AudioTrigger_Remove(): any;
declare function MissionOMatic_Cheat_Complete_Obj(): any;
declare function MissionOMatic_Cheat_Fail_Obj(): any;
declare function MissionOMatic_Cheat_Lose(): any;
declare function MissionOMatic_Cheat_ViewRecipe(): any;
declare function MissionOMatic_Cheat_Win(): any;
declare function Missionomatic_CheckLeader(leaderdatatable: TABLE): any;
declare function MissionOMatic_FindLocation(): any;
declare function MissionOMatic_FindModule(): any;
declare function Missionomatic_FlipLeader(): any;
declare function MissionOMatic_GetPlayer(identifier: String): any;
declare function MissionOMatic_GetRelationship(p1: Player, p2: Player): any;
declare function Missionomatic_InitializeLeader(baredatatable: TABLE): any;
declare function Missionomatic_LeaderRecovery(leaderdatatable: TABLE): any;
declare function Missionomatic_LeaderSurrender(leaderdatatable: TABLE): any;
declare function Missionomatic_OnLeaderBridged(): any;
declare function MissionOMatic_RequestComplete(originalRequest: RequestData, unitsToFulfillRequest: SGroupID): any;
declare function MissionOMatic_RequestUnits(requestingModule: Table, requestData: Table, OPT_unitSources: Table): any;
declare function Missionomatic_RespawnLeader(): any;
declare function MissionOMatic_ShowTitleCard(): any;
declare function Reinforcement_AreReinforcementsNeeded(module: ModuleTable): any;
declare function Reinforcement_GenerateReplacementUnitList(module: Table, idealComposition: UnitTable): any;
declare function Reinforcement_GetAllUnitsInRequestQueue(module: Table): any;
declare function Reinforcement_RequestHasBeenTriggered(module: ModuleTable, successfulRequestData: RequestData, skipAdjustments: Boolean): any;
declare function Reinforcement_SetIdealComposition(module: Table, units: UnitTable): any;
declare function Reinforcement_SubtractSGroupFromIdealComposition(module: Table, sgroup: SGroupID): any;
declare function Reinforcement_UpdateIdealComposition(module: Table): any;
declare function UnitProvider_CanModuleProvideUnits(module: Table, requestData: Table): any;
declare function __Internal_Game_Autosave(): any;
declare function __Internal_Game_Quicksave(): any;
declare function __Internal_Game_SaveGame(): any;
declare function __Internal_Game_SaveToFileDev(): any;
declare function _Missionomatic_GoalPredicate_HoveredOverBP(): any;
declare function _Missionomatic_Hint_UserHasTimedOut(): any;
declare function _MissionOMatic_IsUpgrading(): any;
declare function _Missionomatic_SequencePredicate_HoveredOverBP(): any;
declare function _Missionomatic_TrainingPredicate_IgnoreHover(): any;
declare function _MissionOMatic_WatchForAbility(): any;
declare function _PlayerUpgrades_GetRaceName(): any;
declare function _Raiding_FindIdleRaiders(): any;
declare function _Raiding_GenerateUnitList(): any;
declare function _Raiding_GetSpawnLocation(): any;
declare function _Raiding_InitRaid(): any;
declare function _Raiding_Monitor(): any;
declare function _Raiding_ResetRaidTimer(): any;
declare function _Raiding_ResetScoutTimer(): any;
declare function _RovingArmy_AboveThreshold(): any;
declare function _RovingArmy_AttackTarget(): any;
declare function _RovingArmy_BelowThreshold(): any;
declare function _RovingArmy_Complete(): any;
declare function _RovingArmy_CreateAttackEncounter(moduleData: Module): any;
declare function _RovingArmy_CreateDefendEncounter(moduleData: Module, target: String): any;
declare function _RovingArmy_Death(): any;
declare function _RovingArmy_DefendCurrentPosition(): any;
declare function _RovingArmy_DefendCurrentTarget(): any;
declare function _RovingArmy_DefendFallbackOrSpawn(): any;
declare function _RovingArmy_DefendPreviousTarget(): any;
declare function _RovingArmy_DefendSpawnLocation(): any;
declare function _RovingArmy_Fail(): any;
declare function _RovingArmy_FindModuleByEncounterID(): any;
declare function _RovingArmy_GetFallback(moduleData: Module): any;
declare function _RovingArmy_GetMeanderingTargetIndex(): any;
declare function _RovingArmy_GetProximityTargetIndex(): any;
declare function _RovingArmy_GetRandomTargetIndex(): any;
declare function _RovingArmy_HasDefendReason(moduleData: Module): any;
declare function _RovingArmy_HasValidFallback(): any;
declare function _RovingArmy_HasValidTarget(): any;
declare function _RovingArmy_InitializeFallbacks(moduleData: Table): any;
declare function _RovingArmy_InitializeTargets(moduleData: Table): any;
declare function _RovingArmy_IsAboveThreshold(): any;
declare function _RovingArmy_IsBelowThreshold(): any;
declare function _RovingArmy_Monitor(context: Context, moduleData: Module): any;
declare function _RovingArmy_OnEncounterSuccessAttack(): any;
declare function _RovingArmy_StopAttacking(): any;
declare function _RovingArmy_StopDefending(): any;
declare function _RovingArmy_TargetIsNotFinal(): any;
declare function _RovingArmy_UpdateEmptyStatus(): any;
declare function _RovingArmy_UpdateFallback(): any;
declare function _RovingArmy_UpdateTarget(): any;
declare function AIPlayer_SetMarkerToUpdateCachedPathToHQ(): any;
declare function AIPlayer_SetMarkerToUpdateCachedPathToPosition(): any;
declare function Action_AddBattalionToModule_Do(): any;
declare function Action_AddResources_Do(): any;
declare function Action_DissolveModule_Do(): any;
declare function Action_DissolveModuleIntoModule_Do(): any;
declare function Action_MoveUnits_Do(): any;
declare function Action_NotifyPlayer_Do(): any;
declare function Action_SpawnBuilding_Do(): any;
declare function Action_SpawnUnits_Do(): any;
declare function Action_SpawnUnitsToModule_Do(): any;
declare function ActionMarker_SetVisible(name: String, visible: Boolean): any;
declare function ActionMarker_StartAction(name: String): any;
declare function ActionMarker_StopAction(name: String): any;
declare function AI_AddPrefab(player: PlayerID, name: String, behaviourName: String, radius: Real, minDifficulty: Integer, maxDifficulty: Integer, canReassign: Boolean, active: Boolean): any;
declare function AI_CacheCombatFeatureTrainingData(conflictID: Integer, playerA: PlayerID, playerB: PlayerID): any;
declare function AI_CalculateCombatFitnessEstimate(teamASquads: SGroupID, teamAEntities: EGroupID, teamAPBGs: PropertyBagGroup, teamBSquads: SGroupID, teamBEntities: EGroupID, teamBPBGs: PropertyBagGroup, aiPlayerA: PlayerID, playerB: PlayerID, playerAIsAttacker: Boolean): any;
declare function AI_CanEntityCauseSuppression(aiPlayer: PlayerID, entity: EntityID): any;
declare function AI_CanLoadSquadAndAttackCurrentTarget(entity: EntityID, squad: SquadID, bCheckSquadState: Boolean, bOverload: Boolean): any;
declare function AI_CanSquadCauseSuppression(aiPlayer: PlayerID, pSquad: SquadID): any;
declare function AI_CanSquadDecrew(pDriverSquad: SquadID, pDecrewTargetEntity: EntityID): any;
declare function AI_ClearCombatTrainingCacheEntry(conflictID: Integer): any;
declare function AI_ClearPrefabAIIntents(prefabId: UniqueID, player: PlayerID): any;
declare function AI_CombatFitnessCharacterizesSquad(player: PlayerID, squadPBG: PropertyBagGroup): any;
declare function AI_CombatFitnessGetDefensiveUpgradesForStructureArchetypeMember(memberPBG: PropertyBagGroup): any;
declare function AI_CombatFitnessGetHealerPBGs(): any;
declare function AI_CombatFitnessGetOffensiveUpgradesForStructureArchetypeMember(memberPBG: PropertyBagGroup): any;
declare function AI_CombatFitnessGetPlayerUpgrades(): any;
declare function AI_CombatFitnessGetSquadArchetypeNames(): any;
declare function AI_CombatFitnessGetSquadArchetypePBGs(archtypeNameStr: String): any;
declare function AI_CombatFitnessGetStructureArchetypePBGs(archtypeNameStr: String): any;
declare function AI_CreateAICombatFitnessLogs(): any;
declare function AI_DebugLogGroupCombatRatings(sgroup: SGroupID, egroup: EGroupID, player: PlayerID): any;
declare function AI_DebugLogPBGCombatRatings(pbgList: PropertyBagGroup, player: PlayerID): any;
declare function AI_FindClosestOpenPositionForAbility(caster: ConstTargetHandle, pAbilityPBG: PropertyBagGroup, posIn: Position): any;
declare function AI_FindClosestOpenPositionForAbilityWithinRange(caster: ConstTargetHandle, pAbilityPBG: PropertyBagGroup, posIn: Position, minDist: Integer, maxDist: Integer): any;
declare function AI_FindClosestOpenPositionForStructure(aiPlayer: PlayerID, pEntityPBG: PropertyBagGroup, posIn: Position): any;
declare function AI_GetAbilityMaxNumTargets(ability: ScarAbilityPBG): any;
declare function AI_GetAnySquadCombatTarget(pSquad: SquadID): any;
declare function AI_LogCombatTrainingData(conflictID: Integer, playerA: PlayerID, playerB: PlayerID, score: Real): any;
declare function AI_Module_FindAssociatedModule(item: SGroupID): any;
declare function AI_Module_FindModuleFromScarEncounter(item: AiEncounterID): any;
declare function AI_Module_ResolveCombatArea(module: DefendModuleRovingArmyModule, t: PositionMarkerTable, OPT_combatRange: Real, OPT_leashRange: Real, OPT_direction: Vector, OPT_idlePosition: Position, OPT_useCustomDirection: Boolean): any;
declare function AI_PushPrefabAIIntent(prefabId: UniqueID, player: PlayerID, aiPrefabIntentBagName: String): any;
declare function AI_SetPrefabActive(prefabId: UniqueID, player: PlayerID, active: Boolean): any;
declare function AI_SetPrefabCanReassign(prefabId: UniqueID, player: PlayerID, canReassign: Boolean): any;
declare function AI_SetPrefabSelection_SGroup(prefabId: UniqueID, player: PlayerID, squads: SGroupID): any;
declare function AI_SetPrefabTarget_EGroup(prefabId: UniqueID, player: PlayerID, entities: EGroupID): any;
declare function AI_SetPrefabTarget_Position(prefabId: UniqueID, player: PlayerID, position: Position): any;
declare function AI_SetPrefabTarget_SGroup(prefabId: UniqueID, player: PlayerID, squads: SGroupID): any;
declare function AI_SetPrefabTarget_Waypoints(prefabId: UniqueID, player: PlayerID, waypointName: String): any;
declare function AIPlayer_CachedPathCrossesEnemyTerritory(aiPlayer: PlayerID, requestingID: Integer, minDistToEnemyTerritory: Real, unused: Boolean): any;
declare function AIPlayer_CanSeeEntity(aiPlayer: PlayerID, canSee: EntityID): any;
declare function AIPlayer_ClearCachedPath(player: PlayerID, requestingID: Integer): any;
declare function AIPlayer_EnemyTerritoryDetected(player: PlayerID): any;
declare function AIPlayer_FindClosestSiegeTarget(player: PlayerID, eGroup: EGroupID, minSections: Integer, unbreached: Boolean, refPosition: Position): any;
declare function AIPlayer_FindClumpContainingPosition(aiPlayer: PlayerID, pos: Position, targetFilterFlags: Integer): any;
declare function AIPlayer_GetAnchorPosition(aiPlayer: PlayerID): any;
declare function AIPlayer_GetBestClumpForPositionIdx(pPlayer: PlayerID, position: Position, pAbilityPBG: PropertyBagGroup, minRange: Real, maxRange: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestClumpForSquadIdx(pPlayer: PlayerID, pSquad: SquadID, pAbilityPBG: PropertyBagGroup, minRange: Real, maxRange: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestClumpIdx(pPlayer: PlayerID, minRange: Real, maxRange: Real, clumpSelectionGlobalBestMinRatio: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestClumpIdxForAbility(pPlayer: PlayerID, pAbilityPBG: PropertyBagGroup, minRange: Real, maxRange: Real, clumpSelectionGlobalBestMinRatio: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestOwnedClumpIdx(pPlayer: PlayerID, minRange: Real, maxRange: Real, clumpSelectionGlobalBestMinRatio: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestOwnedClumpIdxForAbility(pPlayer: PlayerID, pAbilityPBG: PropertyBagGroup, minRange: Real, maxRange: Real, clumpSelectionGlobalBestMinRatio: Real, targetFilterFlags: Integer, minNumSquads: Integer): any;
declare function AIPlayer_GetBestOwnTrafficPos(aiPlayer: PlayerID, minNumSquads: Integer): any;
declare function AIPlayer_GetBestTrafficPos(aiPlayer: PlayerID, relationshipEnum: StackVar, minNumSquads: Integer): any;
declare function AIPlayer_GetCachedPathLength(player: PlayerID, requestingID: Integer): any;
declare function AIPlayer_GetCachedPathPoints(player: PlayerID, requestingID: Integer): any;
declare function AIPlayer_GetCapturePoints(aiPlayer: PlayerID, relationshipEnum: StackVar, onlyCanPlaceSecuringStructure: Boolean, egroupOut: EGroupID): any;
declare function AIPlayer_GetClumpPosition(pPlayer: PlayerID, clumpIndex: Integer, targetFilterFlags: Integer): any;
declare function AIPlayer_GetDistanceToEnemyTerritory(player: PlayerID, position: Position): any;
declare function AIPlayer_GetDynamicMultiplier(aiPlayer: PlayerID, tableName: Key): any;
declare function AIPlayer_GetDynamicUnitTypeMultipliersForEntity(aiPlayer: PlayerID, targetEntity: Entity): any;
declare function AIPlayer_GetDynamicUnitTypeMultipliersForSquad(aiPlayer: PlayerID, targetSquad: Squad): any;
declare function AIPlayer_GetKnownResourceDeposits(aiPlayer: PlayerID, resourceType: String, includeDepleted: Boolean): any;
declare function AIPlayer_GetLocal(playerId: Integer): any;
declare function AIPlayer_GetLocalFromPlayer(pPlayerIn: PlayerID): any;
declare function AIPlayer_GetOrCreateHomebase(aiPlayer: PlayerID, targetPosition: Position): any;
declare function AIPlayer_GetOwnedClumpPosition(pPlayer: PlayerID, clumpIndex: Integer): any;
declare function AIPlayer_GetOwnedMilitaryPointEntitiesInRange(militaryPointPBG: EntityPBG, position: Position, range: Number): any;
declare function AIPlayer_GetPositionsOfMilitaryPointsWithRelation(aiPlayer: PlayerID, relationshipEnum: StackVar): any;
declare function AIPlayer_GetSquadPBGProductionUtility(aiPlayer: PlayerID, squadPBG: ScarSquadPBG): any;
declare function AIPlayer_IsDamagedStructureOnPathToTarget(aiPlayer: PlayerID, squad: SquadID, structurePbg: PropertyBagGroup, damagePercentage: Real, searchRadius: Real, targetPosition: Position): any;
declare function AIPlayer_IsOnAnIsland(): any;
declare function AIPlayer_IsPathProcessed(aiPlayer: PlayerID, requestedPathRequestID: Integer): any;
declare function AIPlayer_IsPointThreatened(aiPlayer: PlayerID, pos: Position, filterEnemyBuildings: Boolean, thresholdFitness: Real): any;
declare function AIPlayer_PopScoreMultiplier(aiPlayer: PlayerID, tuningValueName: Key, id: AIScoreMultiplierID): any;
declare function AIPlayer_PopUnitTypeScoreMultiplier(aiPlayer: PlayerID, unitTypeName: Key, id: AIScoreMultiplierID): any;
declare function AIPlayer_ProcessedPathSuccessful(aiPlayer: PlayerID, processedPathRequestID: Integer): any;
declare function AIPlayer_PushScoreMultiplier(aiPlayer: PlayerID, tuningValueName: Key, multiplier: Real, multiplierID: AIScoreMultiplierID): any;
declare function AIPlayer_PushUnitTypeScoreMultiplier(aiPlayer: PlayerID, unitTypeName: Key, multiplier: Real, multiplierID: AIScoreMultiplierID): any;
declare function AIPlayer_RemoveEntityHomebase(aiPlayer: PlayerID, eGroup: EGroupID): any;
declare function AIPlayer_RemoveSquadHomebase(aiPlayer: PlayerID, sGroup: SGroupID): any;
declare function AIPlayer_RequestHighPath(player: PlayerID, requestingID: Integer, start: Position, end: Position, pathingEntityPBG: PropertyBagGroup, requiresPartialPath: Boolean): any;
declare function AIPlayer_ResetAbilityPriorityOverride(player: PlayerID, abilityPBG: PropertyBagGroup): any;
declare function AIPlayer_ResetAIAbilityPriorityOverride(player: PlayerID, aiAbilityPBG: PropertyBagGroup): any;
declare function AIPlayer_SetAbilityPriorityOverride(player: PlayerID, abilityPBG: PropertyBagGroup, priority: Real): any;
declare function AIPlayer_SetAIAbilityPriorityOverride(player: PlayerID, aiAbilityPBG: PropertyBagGroup, priority: Real): any;
declare function AIPlayer_SetEntityHomebase(aiPlayer: PlayerID, eGroup: EGroupID, homeBaseID: Integer): any;
declare function AIPlayer_SetSquadHomebase(aiPlayer: PlayerID, sGroup: SGroupID, homeBaseID: Integer): any;
declare function AIPlayer_SetStrategicBaseIntention(player: PlayerID, intentionName: String, value: Real): any;
declare function AIPlayer_ToggleDrawCachedPath(requestingID: Integer, on: Boolean): any;
declare function AIPlayer_UpdateGathering(pPlayer: PlayerID): any;
declare function AIPlayer_UpdateSkirmishAttackAndCaptureTasks(pPlayer: PlayerID): any;
declare function AIPlayer_UpdateSkirmishPlayerAbilities(pPlayer: PlayerID): any;
declare function AIPlayer_UpdateSkirmishProduction(pPlayer: PlayerID): any;
declare function AIPlayer_UpdateSkirmishScoutingTasks(pPlayer: PlayerID): any;
declare function AISquad_FindFilteredCoverCompareCurrent(player: PlayerID, aiSquad: SquadID, maxPathDistanceFromGoal: Real, compareToCurrentCover: Boolean): any;
declare function AISquad_GetClosestCuttableObstruction(pSquad: SquadID, radius: Real): any;
declare function AISquad_GetClosestObstruction(pSquad: SquadID, radius: Real, bFilterAllied: Boolean): any;
declare function AISquad_GetClosestObstructionOfType(pSquad: SquadID, radius: Real, pbgtype: PropertyBagGroup): any;
declare function AISquad_GetClumpFarBound(aiSquad: SquadID, clumpIndex: Integer, targetFilterFlags: Integer): any;
declare function AISquad_GetCurrentFallBackPosition(aiSquad: SquadID): any;
declare function AISquad_HasBeenAttacked(pAISquad: SquadID, historyTicks: Integer): any;
declare function AISquad_HasFiredWeapon(pAISquad: SquadID, historyTicks: Integer): any;
declare function AISquad_HasPathWithinDistance(aiSquad: SquadID, targetPosition: Position, maxDistance: Real): any;
declare function AISquad_ShouldFallBackOrBraceSelf(pAISquad: SquadID): any;
declare function AllMarkers_FromName(name: String, type: String): any;
declare function AngleToCardinalDirection(angle: NUMBER): any;
declare function App_ClearMovieModeFramerate(): any;
declare function app_currenttime(): any;
declare function app_setidealframerate(frameRate: Integer): any;
declare function App_SetMovieModeFramerate(frameRate: Integer): any;
declare function AssignTradecartsToTrade(): any;
declare function AssignVillagersToBushes(): any;
declare function AssignVillagersToDeer(): any;
declare function AssignVillagersToFarms(): any;
declare function AssignVillagersToFish(): any;
declare function AssignVillagersToGold(): any;
declare function AssignVillagersToSheep(): any;
declare function AssignVillagersToStone(): any;
declare function AssignVillagersToWood(): any;
declare function Attack_ConnectSupportModules(): any;
declare function Attack_Disband(moduleData: Table, OPT_returned_sgroup: SGroupID): any;
declare function Attack_FindModuleByEncounterID(): any;
declare function Attack_GetHighestUnitCount(): any;
declare function Attack_GetRemainingUnitRatio(): any;
declare function Attack_GetSGroup(): any;
declare function Attack_GetUnitChangeFromStart(): any;
declare function Attack_IsDefeated(): any;
declare function Attack_OnSuccess(): any;
declare function Attack_UpdateTargetLocation(attackModule: Table, newTarget: String, OPT_attackMove: Boolean): any;
declare function Camera_ClampToMarker(marker: MarkerID): any;
declare function Camera_ExecuteBSplinePan(totalT: Real, controlRotation: Boolean): any;
declare function Camera_ExecuteCaptureCameraPan(cameraPanTable: StackVarTable): any;
declare function Camera_ExecuteCatromSplinePan(totalT: Real, controlRotation: Boolean): any;
declare function Camera_ExecuteLinearSplinePan(totalT: Real, controlRotation: Boolean): any;
declare function Camera_FocusOnPosition(position: Position): any;
declare function Camera_FollowEntity(entity: EntityID): any;
declare function Camera_FollowSelection(): any;
declare function Camera_FollowSquad(squad: SquadID): any;
declare function Camera_GetCurrentPos(): any;
declare function Camera_GetCurrentTargetPos(): any;
declare function Camera_GetDeclination(): any;
declare function Camera_GetDefaultOrbit(): any;
declare function Camera_GetOrbit(): any;
declare function Camera_GetPivot(): any;
declare function Camera_GetPos(): any;
declare function Camera_GetTargetPos(): any;
declare function Camera_GetZoomDist(): any;
declare function Camera_HideMesh(): any;
declare function Camera_IsInputEnabled(): any;
declare function Camera_IsMeshShown(): any;
declare function Camera_QueueRelativeSplinePanPos(deltaPos: Position): any;
declare function Camera_QueueSplinePanPos(pos: Position): any;
declare function Camera_ResetFocus(): any;
declare function Camera_ResetOrbit(): any;
declare function Camera_ResetToDefault(): any;
declare function Camera_SetDeclination(declination: Real): any;
declare function Camera_SetDefaultDeclination(declination: Real): any;
declare function Camera_SetDefaultOrbit(orbit: Real): any;
declare function Camera_SetDefaultZoomDist(distance: Real): any;
declare function Camera_SetInputEnabled(enabled: Boolean): any;
declare function Camera_SetOrbit(orbit: Real): any;
declare function Camera_SetOrbitRelative(deltaOrbit: Real): any;
declare function Camera_SetZoomDist(distance: Real): any;
declare function Camera_ShowMesh(): any;
declare function Camera_StartDeltaOrbit(deltaOrbit: Real, totalT: Real): any;
declare function Camera_StartOrbit(endOrbit: Real, totalT: Real): any;
declare function Camera_StartPan(startPos: Position, endPos: Position, totalT: Real, zoomDistance: Real): any;
declare function Camera_StartPanTo(endPos: Position, totalT: Real, zoomDistance: Real): any;
declare function Camera_StartRelativePan(deltaPos: Position, totalT: Real, zoomDistance: Real): any;
declare function Camera_StartRelativeZoomDist(deltaZoomDist: Real, totalT: Real): any;
declare function Camera_StartZoomDist(startZoomDist: Real, endZoomDist: Real, totalT: Real): any;
declare function Camera_StartZoomDistTo(endZoomDist: Real, totalT: Real): any;
declare function Camera_StopPan(): any;
declare function Camera_ToggleDebugCamera(): any;
declare function Camera_ToggleMeshShown(show: Boolean): any;
declare function Camera_Unclamp(): any;
declare function Cheat_GrantAllRibbonsAndMedals(): any;
declare function Cheat_ResetAchievementProgress(): any;
declare function cmdline_string(name: String): any;
declare function CombatTest_BasicBuildingDamage(): any;
declare function CombatTest_BasicDamage(): any;
declare function CombatTest_DealDamage(): any;
declare function CombatTest_EntityTakeDamage(): any;
declare function CombatTest_NavalDealDamage(): any;
declare function CombatTest_NavalTakeDamage(): any;
declare function CombatTest_TakeDamage(): any;
declare function Condition_BuildingsSpotted_Check(): any;
declare function Condition_EGroupEmpty_Check(): any;
declare function Condition_HasUnits_Check(): any;
declare function Condition_TaggedUnitAtLocation_Check(): any;
declare function Condition_UnitAtLocation_Check(): any;
declare function cursor_hide(): any;
declare function cursor_setposition(x: Real, y: Real): any;
declare function cursor_show(): any;
declare function dca_get_variable_value(pEntity: EntityID, variableName: String): any;
declare function Decal_GetNextDecalId(): any;
declare function Decal_RemoveAllDecalsAfterId(id: Integer): any;
declare function Defend_AddSGroup(): any;
declare function Defend_CreateEncounter(): any;
declare function Defend_Disband(moduleData: Table, OPT_returned_sgroup: SGroupID): any;
declare function Defend_FindModuleByEncounterID(): any;
declare function Defend_GetHighestUnitCount(): any;
declare function Defend_GetRemainingUnitRatio(): any;
declare function Defend_GetSGroup(): any;
declare function Defend_GetUnitChangeFromStart(): any;
declare function Defend_Init(): any;
declare function Defend_IsDefeated(): any;
declare function Defend_Monitor(): any;
declare function Defend_RemoveSGroup(moduleData: Table, sgroup: SGroupID, OPT_updateComposition: Boolean): any;
declare function Defend_RequestUnits(): any;
declare function Defend_Stop(): any;
declare function Defend_UpdateTargetLocation(moduleData: Table, newTarget: String): any;
declare function DissolveModuleIntoModule(): any;
declare function dr_clear(frame: String): any;
declare function dr_drawCircle(frame: String, x: Real, y: Real, z: Real, radius: Real, r: Integer, g: Integer, b: Integer): any;
declare function dr_setautoclear(frame: String, bEnable: Boolean): any;
declare function dr_setdisplay(frame: String, bEnable: Boolean): any;
declare function dr_text2d(frame: String, x: Real, y: Real, cmd: String, r: Integer, g: Integer, b: Integer): any;
declare function dr_text3d(frame: String, x: Real, y: Real, z: Real, cmd: String, r: Integer, g: Integer, b: Integer): any;
declare function DrawOBB(pModel: RenderModel, transform: Transform): any;
declare function EGroup_CallEntityFunction(egroup: EGroupID, entityFunction: Function, argumentlist: variable): any;
declare function EGroup_CallEntityFunctionAllOrAny(egroup: EGroupID, all: Boolean, entityFunction: Function, argumentlist: variable): any;
declare function EGroup_GetTotalHealthFromCanBeDamagedOnly(egroup: EGroupID): any;
declare function Entity_BuildStructureOnHex(player: PlayerID, blueprint: Integer, spawn: HexPos, OPT_egroup: EGroupID): any;
declare function Event_Save(type: SaveTriggerType): any;
declare function Event_SaveWithName(type: SaveTriggerType, fileName: String): any;
declare function EventCues_CallToAction(text: String, cta_type: String, OPT_onTriggerIntel: LuaFunction, OPT_onClickFunction: LuaFunction, OPT_pos: POSMARKERGROUP, OPT_duration: REAL, OPT_customImage: String, OPT_customStinger: String): any;
declare function EventCues_ClearCallToAction(): any;
declare function EventCues_HighPriority(text: String, description: String): any;
declare function fatal(state: lua_State): any;
declare function fatal(state: lua_State): any;
declare function FindDecorableFoodDepositInSight(): any;
declare function Formation_GetDimensionsAndOffset(sgroup: SGroupID): any;
declare function Formation_PlaceSquadGroupsInFormation(sgroup: SGroupID, position: Position, direction: Position): any;
declare function Formation_PlaceSquadsInFormation(sgroup: SGroupID, position: Position, direction: Position): any;
declare function fx_dump(): any;
declare function fx_forcelod(lod: Integer): any;
declare function fx_logenable(enable: Boolean): any;
declare function fx_toggle(): any;
declare function fx_toggleRendering(): any;
declare function fx_usedebugshader(enable: Boolean): any;
declare function Game_AIControlLocalPlayer(): any;
declare function Game_DeleteSaveGameDev(filename: String): any;
declare function Game_EnableInput(enable: Boolean): any;
declare function Game_FastForwardProduction(secondsForward: Real): any;
declare function Game_FastForwardResourceIncome(secondsForward: Real): any;
declare function Game_GetSimRate(): any;
declare function Game_GetSPDifficulty(): any;
declare function Game_GetTerrainTypeVariables(terrainVars: StackVarTable): any;
declare function Game_IsDataLocked(dataID: String): any;
declare function Game_IsFtue(): any;
declare function Game_IsRTM(): any;
declare function Game_IsSaving(): any;
declare function Game_LaunchSPGeneratedMap(biomePbgName: String, layoutPbgName: String, sizePbgName: String, difficulty: Integer, terrainResult: StackVarTable): any;
declare function Game_LoadDataStore(id: String, path: String, binary: Boolean): any;
declare function Game_LoadFromFileDev(filename: String): any;
declare function Game_LoadGame(name: String): any;
declare function Game_LoadSP(scenarioName: String, difficulty: Integer): any;
declare function Game_LockRandom(): any;
declare function Game_QuitApp(): any;
declare function Game_QuitAppWithCode(exitCode: Integer): any;
declare function Game_RemoveTableData(path: String): any;
declare function Game_RetrieveTableData(dataID: String, clearFromStorage: Boolean): any;
declare function Game_SaveDataStore(id: String, path: String, binary: Boolean): any;
declare function Game_SaveGameExistsDev(filename: String): any;
declare function Game_ScreenFade(r: Real, g: Real, b: Real, a: Real, timeSecs: Real): any;
declare function Game_SendCustomChallengeEvent(player: PlayerID, eventType: ChallengeEventType, amount: Real): any;
declare function Game_SetDataLock(dataID: String, lock: Boolean): any;
declare function Game_SetSimRate(rate: Real): any;
declare function Game_ShowPauseMenu(): any;
declare function Game_StoreTableData(dataID: String, table: RefTable): any;
declare function Game_TransitionToState(stateName: String, transitionTimeSec: Real): any;
declare function Game_UnLockRandom(): any;
declare function GetMarkerWithDirection(markerName: String, markerDir: NUMBER): any;
declare function IdleVillagers_MakeBusy(theintervaldatatableprovideplayerIDandalocationmarker: In, optionalsgroup: and, optionalegroup: and): any;
declare function Initialize(): any;
declare function inv_dump(): any;
declare function IsEconomyClassStructure_CS(pbg: PropertyBagGroup): any;
declare function IsSecuringStructure_CS(pbg: PropertyBagGroup): any;
declare function IsSecuringStructurePlacedOnPoint_CS(pbg: PropertyBagGroup): any;
declare function IsStructure_CS(pbg: PropertyBagGroup): any;
declare function listplayers(): any;
declare function Loadout_GetEquippedArmyUnitAtIndex(player: PlayerID, index: Integer): any;
declare function Loadout_GetEquippedArmyUnitsCount(player: PlayerID): any;
declare function LOC(string: String): any;
declare function Loc_Empty(): any;
declare function Loc_FormatInteger(integer: Integer): any;
declare function Loc_FormatNumber(number: Real, numDecimalPlaces: Integer): any;
declare function Loc_FormatTime_H_M_S(secs: Real, leading_zeroes: Boolean): any;
declare function Loc_FormatTime_M_S(secs: Real, leading_zeroes: Boolean): any;
declare function Loc_FormatTime_M_S_MS(secs: Real, leading_zeroes: Boolean): any;
declare function Loc_GetString(id: StackVar): any;
declare function LOCATION(identifier: EGroupID): any;
declare function Location_AddSGroup(): any;
declare function Location_FromDescriptor(descriptor: String): any;
declare function lockstep_simulation_presentation_toggle(): any;
declare function Marker_Create(name: String, type: String, pos: Position, direction: Position, radius: Real): any;
declare function Marker_CreateMarkerFromEntityMarker(entity: EntityID, internalMarker: String, newMarker: String): any;
declare function Marker_Destroy(marker: MarkerID): any;
declare function Marker_DoesNumberAttributeExist(marker: MarkerID, name: String): any;
declare function Marker_DoesStringAttributeExist(marker: MarkerID, name: String): any;
declare function Marker_Exists(name: String, type: String): any;
declare function Marker_FromName(name: String, type: String): any;
declare function Marker_GetDirection(marker: MarkerID): any;
declare function Marker_GetName(marker: MarkerID): any;
declare function Marker_GetNumberAttribute(marker: MarkerID, name: String): any;
declare function Marker_GetPosition(marker: MarkerID): any;
declare function Marker_GetProximityDimensionsOrDefault(marker: MarkerID, defaultWidth: Real, defaultHeight: Real): any;
declare function Marker_GetProximityRadius(marker: MarkerID): any;
declare function Marker_GetProximityRadiusOrDefault(marker: MarkerID, defaultValue: Real): any;
declare function Marker_GetStringAttribute(marker: MarkerID, name: String): any;
declare function Marker_GetType(marker: MarkerID): any;
declare function Marker_HasProximityRange(marker: MarkerID): any;
declare function Marker_InProximity(marker: MarkerID, pos: Position): any;
declare function Marker_SetProximityCircle(marker: MarkerID, radius: Real): any;
declare function Marker_SetProximityPoint(marker: MarkerID): any;
declare function Marker_SetProximityRectangle(marker: MarkerID, width: Real, height: Real): any;
declare function MarkerPaths_AttackMoveSGroupAlongPath(sgroup: SGroupID, markerName: String, opt_markerType: String): any;
declare function MarkerPaths_ClearIcons(pathName: String, removePath: Boolean): any;
declare function MarkerPaths_GenerateIcons(pathName: String, pointList: TABLE, iconName: String, spacing: NILNUMBER): any;
declare function MarkerPaths_MoveSGroupAlongPath(sgroup: SGroupID, markerName: String, opt_markerType: String, opt_startMarker: Num, opt_endMarker: Num): any;
declare function memdump(): any;
declare function memdumpf(foldername: String): any;
declare function mempoolcount(): any;
declare function mempoolinuse(int: Integer): any;
declare function mempoolmax(int: Integer): any;
declare function mempoolname(poolid: Integer): any;
declare function memshrink(): any;
declare function memtofile(pool: String): any;
declare function Misc_AbortToFE(): any;
declare function Misc_AIControlLocalPlayer(): any;
declare function Misc_AppendToFile(filename: String, text: String): any;
declare function Misc_DetectKeyboardInput(sinceTime: Real): any;
declare function Misc_DetectMouseInput(sinceTime: Real): any;
declare function Misc_EnablePerformanceTest(toEnable: Boolean): any;
declare function Misc_GetCommandLineString(option: String): any;
declare function Misc_GetFileSize(filename: String): any;
declare function Misc_IsCommandLineOptionSet(option: String): any;
declare function Misc_IsDevMode(): any;
declare function Misc_IsPosOnScreen(pos: Position, percent: Real): any;
declare function Misc_QueryDataDirectory(pathQuery: String, recursiveFind: Boolean): any;
declare function Misc_QueryDirectory(pathQuery: String, recursiveFind: Boolean): any;
declare function Misc_ReadFile(filename: String): any;
declare function Misc_RemoveFile(filename: String): any;
declare function Misc_Screenshot(): any;
declare function Misc_ScreenshotExt(fileExtension: String): any;
declare function Misc_SetCurrentAutotest(description: String): any;
declare function Misc_SetDesignerSplatsVisibility(bVisible: Boolean): any;
declare function Misc_WriteFile(filename: String, text: String): any;
declare function Mission_Complete(): any;
declare function Mission_Fail(): any;
declare function MissionOMatic_AssociateEntityWithNearbyLocation(entity: EntityID): any;
declare function Missionomatic_ChallengeInit(playerSlot: Integer, playerData: Table): any;
declare function Missionomatic_DisableTrainingByGoalKey(searchKey: VALUE, value: Boolean): any;
declare function MissionOMatic_FindBattalion(): any;
declare function MissionOMatic_GetTypeForBlueprint(blueprint: SquadIDSBP): any;
declare function MissionOMatic_HintOnAbilityUsed(): any;
declare function MissionOMatic_HintOnHover(): any;
declare function MissionOMatic_HintOnSquadSelect(): any;
declare function Missionomatic_InitPlayer(playerSlot: Integer, playerData: Table): any;
declare function MissionOMatic_RevealMovingSGroup(): any;
declare function Missionomatic_SetGateLock(egroup: EGroupID, locked: Boolean): any;
declare function Missionomatic_SetGateLock_B(): any;
declare function MissionOMatic_SGroupCommandDelayed(sgroup: SGroupID, destination: SGroupID, attackMove: Boolean, delay: Number, destroyOnArrive: Boolean, onDestroyCallback: Function): any;
declare function MissionOMatic_SGroupCommandDelayed_B(): any;
declare function Missionomatic_SpawnPickup(position: MARKERPOSITION, resource: String, amount: NILNUMBER): any;
declare function Modifier_ApplyToEntity(modifier: ScarModifier, entity: EntityID, durationSeconds: Real): any;
declare function Modifier_ApplyToPlayer(modifier: ScarModifier, player: PlayerID, durationSeconds: Real): any;
declare function Modifier_ApplyToSquad(modifier: ScarModifier, squad: SquadID, durationSeconds: Real): any;
declare function Modifier_Create(applicationType: ModifierApplicationType, modtype: String, usageType: ModifierUsageType, exclusive: Boolean, value: Real, v: StackVar): any;
declare function Modifier_InitResourceBasedModifierTables(): any;
declare function Modifier_IsEnabled(pEntity: EntityID, modtype: String, bEnabledByDefault: Boolean): any;
declare function Modify_FoodCarryCapacity(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_FoodGatherRate(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_GoldCarryCapacity(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_GoldGatherRate(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_PlayerMaxPopCap(player: PlayerID, amount: Real, OPT_usage: ModifierUsageType): any;
declare function Modify_PlayerPopCap(player: PlayerID, amount: Real, OPT_usage: ModifierUsageType): any;
declare function Modify_StoneCarryCapacity(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_StoneGatherRate(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_WoodCarryCapacity(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function Modify_WoodGatherRate(group: SGroupID, scalefactor: Real, Usage: MUT): any;
declare function MovieCapture_Start(lowResolution: Boolean): any;
declare function MovieCapture_Stop(): any;
declare function network_show_calls(): any;
declare function network_show_statgraph(): any;
declare function NormalizeTable(): any;
declare function Obj_Create(player: PlayerID, title: String, desc: String, icon: String, dataTemplate: String, faction: String, type: ObjectiveType, parentID: Integer, telemetryTitle: String): any;
declare function Obj_Delete(objectiveID: Integer): any;
declare function Obj_DeleteAll(): any;
declare function Obj_GetCounterCount(objectiveID: Integer): any;
declare function Obj_GetCounterMax(objectiveID: Integer): any;
declare function Obj_GetCounterType(objectiveID: Integer): any;
declare function Obj_GetProgress(objectiveID: Integer): any;
declare function Obj_GetProgressVisible(objectiveID: Integer): any;
declare function Obj_GetState(objectiveID: Integer): any;
declare function Obj_GetVisible(objectiveID: Integer): any;
declare function Obj_SetColour(objectiveID: Integer, red: Integer, green: Integer, blue: Integer, alpha: Integer): any;
declare function Obj_SetCounterCount(objectiveID: Integer, count: Integer): any;
declare function Obj_SetCounterMax(objectiveID: Integer, max: Integer): any;
declare function Obj_SetCounterTimerSeconds(objectiveID: Integer, timerSeconds: Real): any;
declare function Obj_SetCounterType(objectiveID: Integer, counterType: Integer): any;
declare function Obj_SetDescription(objectiveID: Integer, desc: String): any;
declare function Obj_SetIcon(objectiveID: Integer, icon: String): any;
declare function Obj_SetObjectiveFunction(id: Integer, fnType: ObjectiveFn, f: LuaFunction): any;
declare function Obj_SetProgress(objectiveID: Integer, progress: Real): any;
declare function Obj_SetProgressVisible(objectiveID: Integer, visible: Boolean): any;
declare function Obj_SetState(objectiveID: Integer, state: State): any;
declare function Obj_SetTitle(objectiveID: Integer, title: String): any;
declare function Obj_SetVisible(objectiveID: Integer, visible: Boolean): any;
declare function PerfStats_Disable(): any;
declare function PerfStats_Dump(): any;
declare function PerfStats_Enable(): any;
declare function PerfStats_IsEnabled(): any;
declare function PerfStats_Toggle(): any;
declare function Physics_GetNumRBodies(): any;
declare function Physics_IsEnabled(): any;
declare function Player_GetState(pPlayer: PlayerID): any;
declare function PlayerUpgrades_Auto(playerID: PlayerID, includeCurrentAge: Boolean, OPT_exceptions: Table, OPT_race: String): any;
declare function PlayerUpgrades_HideAllUpgrades(playerID: PlayerID, desiredAge: Integer, race: String): any;
declare function PlayerUpgrades_LearnAllResearch(playerID: PlayerID, desiredAge: Integer, OPT_exceptions: Table, OPT_race: String): any;
declare function PlayerUpgrades_LearnAllUnits(playerID: PlayerID, desiredAge: Integer, OPT_exceptions: Table, OPT_race: String): any;
declare function PlayerUpgrades_LockAllUpgrades(playerID: PlayerID, desiredAge: Integer, race: String): any;
declare function PrintOnScreen(text: String): any;
declare function PrintOnScreen_Add(object: Object, id: String, OPT_style: String): any;
declare function PrintOnScreen_Remove(id: String): any;
declare function PrintOnScreen_RemoveFromScreen(): any;
declare function quit(): any;
declare function Raiding_Activate(): any;
declare function Raiding_AddSpawnLocation(): any;
declare function Raiding_CountIdleRaiders(): any;
declare function Raiding_CountParties(): any;
declare function Raiding_Dectivate(): any;
declare function Raiding_ExtractAllSquads(): any;
declare function Raiding_Init(): any;
declare function Raiding_IsTimerValid(): any;
declare function Raiding_PruneParties(): any;
declare function Raiding_RemoveParty(): any;
declare function Raiding_SetPartyLimit(): any;
declare function Raiding_SetScouting(): any;
declare function Raiding_TriggerProbe(): any;
declare function Raiding_TriggerRaid(raidPos: EGroupID, force: Boolean): any;
declare function Raiding_UpdateComposition(): any;
declare function render_viewport_toggle(): any;
declare function ReplayStatViewer_PopulateReplayStatTabs(tableofdataTemplenamesSupportedvaluesPlayerScoreTemplateCurrentResourcesTemplateIncomeTemplateMilitaryTemplateConquestTrackerTemplateReligiousTrackerTemplateWonderTrackerTemplateegReplayStatViewer_PopulateReplayStatTabs: a): any;
declare function ReplayStatViewer_RegisterDataContextUpdater(withnoarugment: function1): any;
declare function ReplayStatViewer_RegisterPlayerDataContextUpdater(withtwoarguments: function1): any;
declare function ResolveSpawnLocation(): any;
declare function restart(): any;
declare function RovingArmy_AddSGroup(moduleData: Module, sgroup: SGroupID, OPT_updateComposition: Boolean): any;
declare function RovingArmy_AddTarget(moduleData: Module, target: String, OPT_combatRange: Real, OPT_leashRange: Real, OPT_skipTransition: Boolean): any;
declare function RovingArmy_AddTargets(moduleData: Module, targets: Table): any;
declare function RovingArmy_ClearTargets(moduleData: Table): any;
declare function RovingArmy_CountUnvisitedTargets(): any;
declare function RovingArmy_Disband(moduleData: Table, OPT_returned_sgroup: SGroupID): any;
declare function RovingArmy_ForceStart(): any;
declare function RovingArmy_GetNearestSeen(moduleData: RovingArmy, huntedGroup: EGroupID): any;
declare function RovingArmy_GetPosition(moduleData: RovingArmy): any;
declare function RovingArmy_GetRemainingUnitRatio(): any;
declare function RovingArmy_GetRendezvousPosition(moduleData: Module): any;
declare function RovingArmy_GetSGroup(moduleData: Table): any;
declare function RovingArmy_GetTarget(moduleData: Module): any;
declare function RovingArmy_GetTargets(moduleData: Module): any;
declare function RovingArmy_GetUnitChangeFromStart(): any;
declare function RovingArmy_HasUnits(): any;
declare function RovingArmy_Init(moduleData: Table): any;
declare function RovingArmy_IsDead(moduleData: Module): any;
declare function RovingArmy_IsDefeated(): any;
declare function RovingArmy_IsEmpty(moduleData: Module): any;
declare function RovingArmy_RemoveSGroup(moduleData: Table, sgroup: SGroupID, OPT_updateComposition: Boolean): any;
declare function RovingArmy_RequestUnits(moduleData: rovingArmy, units: table, OPT_unitSources: table, OPT_priority: String): any;
declare function RovingArmy_Reset(moduleData: Table): any;
declare function RovingArmy_SetTarget(moduleData: Module, target: String, OPT_combatRange: Real, OPT_leashRange: Real, OPT_skipTransition: Boolean): any;
declare function RovingArmy_SetTargets(moduleData: Module, targets: Table): any;
declare function RovingArmy_SetWithdrawThreshold(): any;
declare function RovingArmy_Start(): any;
declare function RovingArmy_UnitRequest_Start(moduleData: Module, requestData: Request): any;
declare function RulesProfiler_Activate(on: Boolean): any;
declare function RulesProfiler_Enable(on: Boolean): any;
declare function RulesProfiler_IsActive(): any;
declare function RulesProfiler_ResetTypeFilter(): any;
declare function RulesProfiler_SetTypeFilter(filter: String): any;
declare function Scar_DebugCheatMenuExecute(command: String): any;
declare function Scar_DebugConsoleExecute(command: String): any;
declare function scartype(v: StackVar): any;
declare function scartype_enum_tostring(v: StackVar): any;
declare function scartype_tostring(v: StackVar): any;
declare function setsimframecap(fcap: Real): any;
declare function setsimrate(rate: Real): any;
declare function Setup_GetWinConditionOptions(outOptions: StackVarTable): any;
declare function Setup_SetPlayerName(player: PlayerID, name: String): any;
declare function Setup_SetPlayerRace(player: PlayerID, racePBG: ScarRacePBG): any;
declare function Setup_SetPlayerStartingPosition(player: PlayerID, pos: Position): any;
declare function Setup_SetPlayerTeam(p: PlayerID, team_id: Integer): any;
declare function SGroup_CallEntityFunction(sgroup: SGroupID, entityFunction: Function, argumentlist: variable): any;
declare function SGroup_CallSquadFunction(sgroup: SGroupID, squadFunction: Function, argumentlist: variable): any;
declare function SGroup_CallSquadFunctionAllOrAny(sgroup: SGroupID, all: Boolean, squadFunction: Function, argumentlist: variable): any;
declare function Siege_AddSGroup(): any;
declare function Siege_CanAid(): any;
declare function Siege_Disband(): any;
declare function Siege_GetSGroup(): any;
declare function Siege_IsDefeated(): any;
declare function Siege_RenderAid(): any;
declare function Siege_RequestAid(): any;
declare function Siege_RequestReinforcements(): any;
declare function Sim_GetDrawMarketInfo(): any;
declare function Sim_GetTradeEntitiesFromEndpoint(endpoint: EntityID, egroup: EGroupID): any;
declare function Sim_MarketAddSettlement(settlement: EntityID): any;
declare function Sim_MarketExecuteTrade(player: PlayerID, resourceName: String, tradeTypeString: String): any;
declare function Sim_MarketSetTradeStatusPlayer(firstPlayer: PlayerID, secondPlayer: PlayerID, status: Boolean): any;
declare function Sim_MarketSetTradeStatusSettlement(player: PlayerID, settlement: EntityID, status: Boolean): any;
declare function Sim_SetDrawMarketInfo(bEnable: Boolean): any;
declare function SitRep_PlayMovie(url: String): any;
declare function SitRep_StopMovie(): any;
declare function Sound_Debug_ShowAudioRegions(enable: Boolean): any;
declare function Sound_IsPlaying(handle: Integer): any;
declare function Sound_Play2D(eventName: String): any;
declare function Sound_Play3D(eventName: String, actor: EntityID): any;
declare function Sound_PlayWallaCelebrateOnSGroup(sgroup: SGroupID): any;
declare function Sound_PlayWallaChargeOnSGroup(sgroup: SGroupID): any;
declare function Sound_PlayWallaEngageOnSGroup(sgroup: SGroupID): any;
declare function Sound_PlayWallaFearOnSGroup(sgroup: SGroupID): any;
declare function Sound_PlayWallaSpearwallOnSGroup(sgroup: SGroupID): any;
declare function Sound_PostEvent(eventName: String, handle: Integer): any;
declare function Sound_Stop(handle: Integer): any;
declare function SpawnGarrisonsIntoEGroup(egroup: EGroupID, player: Player, opt_scarType: String, opt_count: Integer): any;
declare function SpawnUnitGroups(): any;
declare function SpawnUnitsToModule(units: Table, module: Module, spawnLocation: String, OPT_pause: Boolean): any;
declare function standard_test(unique_nameTableunit_testsBooleanis_long_test: String): any;
declare function standard_test(unique_nameStringdescriptionFunctionstart_functionFunctionupdate_functionFunctionfinish_functionNumbertimeout_seconds: String): any;
declare function StateTree_QueueGlobalStateTreeEntity(keepAlive: Boolean, openingBranchName: String, entity: EntityID): any;
declare function StateTree_QueueGlobalStateTreePlayer(keepAlive: Boolean, openingBranchName: String, player: PlayerID): any;
declare function StateTree_QueueGlobalStateTreeSquad(keepAlive: Boolean, openingBranchName: String, squad: SquadID): any;
declare function statgraph_save(begin: Boolean): any;
declare function std(): any;
declare function std(): any;
declare function std(): any;
declare function switchplayer(state: lua_State): any;
declare function SyncWeapon_CanAttackNow(weapon: SyncWeaponID, target: EGroupID): any;
declare function SyncWeapon_Exists(weapon: SyncWeaponID): any;
declare function SyncWeapon_GetEntity(weapon: SyncWeaponID): any;
declare function SyncWeapon_GetFromEGroup(egroup: EGroupID): any;
declare function SyncWeapon_GetFromSGroup(sgroup: SGroupID): any;
declare function SyncWeapon_GetPosition(weapon: SyncWeaponID): any;
declare function SyncWeapon_IsAttacking(weapon: SyncWeaponID, time: Real): any;
declare function SyncWeapon_IsOwnedByPlayer(weapon: SyncWeaponID, OPT_player: PlayerID): any;
declare function SyncWeapon_SetAutoTargetting(weapon: SyncWeaponID, hardpoint: String, enable: Boolean): any;
declare function Table_Concatenate(table1: LuaTable, table2: LuaTable): any;
declare function Table_Contains(OriginalTable: LuaTable, item: Item): any;
declare function Table_Copy(OriginalTable: LuaTable): any;
declare function Table_FillWithDefaultValues(myTable: Table, myDefaults: Table, OPT_errorMessage: String): any;
declare function Table_GetRandomItem(table: Table, OPT_numberofitems: Integer): any;
declare function Table_MakeReadOnly(table: Table, OPT_recursive: Boolean, OPT_errorMessage: String): any;
declare function Table_RemoveFirstItem(table: TABLE, toRemove: OBJECT): any;
declare function Table_Reverse(table: Table): any;
declare function Table_Shuffle(table: Table): any;
declare function Terrain_GetCoverType_AsNumber(pos: Position): any;
declare function Terrain_GetCoverType_AsString(pos: Position): any;
declare function Test_AbilityRevealFOW(t_test_group: table, t_paramsstringname: table, timeout_seconds: Integer, description: String, sbp_caster: String, abp_ability_reveal_fow: String, ebp_ability_summoned_artifact: String): any;
declare function Test_AgeUp(t_test_grouptablet_ebpname_buildings: table, ofbuildingstospawnbeforeageuptablet_ebpname_wonders: list, ofwondersstringsbpname_builder: list, nameofthebuilderunit: Integer): any;
declare function Test_AI(t_test_grouptablet_params: table): any;
declare function Test_AI_CombatFitness(t_test_grouptablet_params: table): any;
declare function Test_BPConversion_ConvertedMilitary_Combat(t_test_group: table, t_params: table, sbp_monk: String, sbp_combat_ally: String, sbp_conversion_target: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_BPConversion_ConvertedMilitary_Movement(t_test_group: table, t_params: table, sbp_monk: String, sbp_combat_ally: String, sbp_conversion_target: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_BPConversion_ConvertedVillager_Construction(t_test_group: table, t_params: table, sbp_monk: String, sbp_villager: String, ebp_name_construction: String, ebp_name_tc: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_BPConversion_ConvertedVillager_Gathering(t_test_group: table, t_params: table, sbp_monk: String, sbp_villager: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_BPConversion_SquadTierUpgrade_Combat(t_test_group: table, t_params: table, sbp_to_upgrade: String, sbp_after_upgrade: String, upgrade_name: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_BPConversion_SquadTierUpgrade_Movement(t_test_group: table, t_params: table, sbp_to_upgrade: String, sbp_after_upgrade: String, upgrade_name: String, timeout_seconds: Integer, test_name: String, test_description: String): any;
declare function Test_CombatForcedEngagement(t_test_group: table, t_paramsbooleanattacker_should_intercept_defender: table, description: String, name: String, timeout_seconds: Integer): any;
declare function Test_CommandedAnimalGathering(t_test_groupstringsbpname_gathererstringebpname_dropofftablet_sbpname_animalsstringsofthesquadblueprintnamesoftheanimalstospawn: table): any;
//declare function Test_FormationMove(t_test_groupinttimeout_seconds: table, squad_blueprint_names: table, number_to_spawn: Integer, use_squad_formation: Boolean, acceptable_distance: Integer, usigntheformation: when, willbeoverwrittenbythesizeoftheformationtableUtil_GetPosition: this): any;
declare function Test_Gathering(t_test_groupbooleangive_gather_commandstringsbpname_gatherertablet_gather_combinationcontaining3variablesinthatorderstringentityblueprintnameforthedropoffbuildingstringentityblueprintnamefortheresourcedepositintresourcetype2RT_Food: table, RT_Gold: 3, RT_Stone: 5, RT_Woodint: 6): any;
declare function Test_Healing(t_test_group: table, t_healer_listsstringsbp_healer: table, auto_heal_enabled: Boolean, sbp_target: String, spawn_amountinttimeout_seconds: Integer, input_name: String, input_description: String): any;
declare function Test_PackUnpack(t_test_group: table, t_paramsstringebp_building_name: table, timeout_seconds: real, test_description: String, ability_name_unpack: String, ebp_building_unpacked: String, ebp_building_packed: String): any;
declare function Test_SpawnSquad(tableofteststopassblueprint_name: a, nameoftheSBPtospawnexpected_population: the, valuetoprovidetheexpectedpopulationcostoftheunittimeout_seconds: Optional, howlongbeforethetesttimesout: Optional): any;
declare function Test_SquadAttackMove(): any;
declare function Test_SquadAttackMoveEntity(): any;
declare function Test_SquadMoveWithOptionalFacing(t_test_groupstringblueprint_nametablemove_and_face_targetsfloatmove_pos_xfloatmove_pos_zfloatface_pos_x: table): any;
declare function Test_Surround(t_test_groupinttimeout_seconds: table, attacker_blueprint_names: table, number_to_spawn: Integer, use_squad_formation: Boolean, acceptable_distance: Integer, Util_GetPosition: table): any;
declare function TestConfig_AutoGenerateTestTemplate(undefined: stack_level): any;
declare function TestConfig_LoadFromCommandLine(): any;
declare function TestConfig_LoadFromFile(path: path): any;
declare function TestConfig_SaveCachedTestTemplates(): any;
declare function TestGroup_BuildingBasics(): any;
declare function TestGroup_SquadBasics(): any;
declare function TestGroup_SquadBasics_NoCombat(): any;
declare function TestPhysics_Destruction(): any;
declare function TestUtil_CallWithoutBlocking(t_function_parameterfunctioncallback: Table): any;
declare function TestUtil_DestroyAllNeutralEntities(): any;
declare function TestUtil_DestroyAllPlayerSquadsAndEntities(player: Player): any;
declare function TestUtil_DestroyAllSquadsAndEntities(): any;
declare function TestUtil_DestroySpecifiedPlayerSquadsAndEntities(player: Player, t_blueprintsToDestroy: String): any;
declare function TestUtil_GetAllBlueprintNames(do_entitytrueforentityblueprints: Boolean, forsquadblueprintsstringbase_filterspecifyastringthatmatchesapathinsideattribinstancesusuallyusedtomatchafoldertableofstringsspecifyablacklistfilterafterthebasefilterhasbeenappliedusuallyusedtoexcludefilesbasedonstringmatches: false): any;
declare function TestUtil_HighlightCircleRadius(positionrealradiusrealopt_lifetimerealopt_red_valuerealopt_green_valuerealopt_blue_valuerealopt_number_of_circle_segmentsintopt_thickness_of_circle_border: ScarPos): any;
declare function TestUtil_MakeBuildingFast(ebpname_building: String): any;
declare function TestUtil_PrintAllSquadsAndEntities(): any;
declare function TestUtil_PrintPlayerEntities(player: Player): any;
declare function TestUtil_PrintPlayerSquads(player: Player): any;
declare function TestUtil_RegisterTest(atableofteststoberunbythesamedriver: t_test_group): any;
declare function TestUtil_SpawnEntitiesInGridWithoutBlocking(playerEGroupegroup: Player, t_ebpnamesPositionpos_top_leftNumberspacingfunctioncallback: Table): any;
declare function TestUtil_SpawnSquadsInGridWithoutBlocking(playerSGroupsgroup: Player, t_sbpnamesPositionpos_spawnfunctioncallback: Table): any;
declare function TestUtil_TestClose(value1: Any, value2: Any, OPT_acceptable_difference: Number, OPT_value1_name: String, OPT_value2_name: String): any;
declare function TestUtil_TestCompare(value1: Any, value2: Any, OPT_value1_name: String, OPT_value2_name: String): any;
declare function TestUtil_TestDirectionsSame(item1: EGroupID, item2: EGroupID): any;
declare function TestUtil_TestEqual(value1: Any, value2: Any, OPT_value1_name: String, OPT_value2_name: String): any;
declare function TestUtil_TestPositionsSame(object1: EGroupID, object2: EGroupID, max_accepted_difference: Number): any;
declare function TownLife_Disband(moduleData: Table, OPT_returned_sgroup: SGroupID): any;
declare function TownLife_IsDefeated(): any;
declare function TownLife_SetPlayerOwner(): any;
declare function TrackTradeCartsForPlayers(players: Table): any;
declare function TransferModuleIntoModule(sourceModule: String, targetModule: String, OPT_pause: Boolean): any;
declare function UI_AddChild(elementName: String, typeName: String, childName: String, propertyTable: StackVarTable): any;
declare function UI_AddCommandBinding(groupName: String, bindingName: String, callbackName: String): any;
declare function UI_AddEventHandler(elementName: String, eventName: String, callbackName: String): any;
declare function UI_AddText(elementName: String, text: String): any;
declare function UI_Clear(elementName: String): any;
declare function UI_MessageBoxHide(dialogResult: DialogResult): any;
declare function UI_MessageBoxReset(): any;
declare function UI_MessageBoxSetButton(dialogResult: DialogResult, text: String, tooltip: String, icon: String, isEnabled: Boolean): any;
declare function UI_MessageBoxSetText(title: String, message: String): any;
declare function UI_Remove(elementName: String): any;
declare function UI_RemoveCommandBinding(groupName: String, bindingName: String): any;
declare function UI_RemoveEventHandler(elementName: String, eventName: String, callbackName: String): any;
declare function UI_SetDataContext(elementName: String, table: StackVarTable): any;
declare function UI_SetEntityDataContext(entity: EntityID, table: StackVarTable): any;
declare function UI_SetPlayerDataContext(player: PlayerID, table: StackVarTable): any;
declare function UI_SetPropertyValue(elementName: String, propertyName: String, stackVar: StackVar): any;
declare function UI_SetPropertyValues(elementName: String, propertyTable: StackVarTable): any;
declare function UI_SetSquadDataContext(squad: SquadID, table: StackVarTable): any;
declare function UnitEntry_CompleteAllDeploymentsImmediately(): any;
declare function UnitEntry_CompleteDeploymentImmediately(deployment: DeploymentID): any;
declare function UnitEntry_DeploySquads(player: PlayerID, sgroup: SGroupID, units: Table, spawn: MarkerIDPos, OPT_entryMethod?: Table, OPT_stagger?: Real, OPT_options?: Table): any;
declare function UnitEntry_ResolveSpawnLocation(): any;
declare function UnitSpawner_IsDefeated(): any;
declare function UnitTable_AddUnits(unitTable: Table, unitsToAdd: Table): any;
declare function UnitTable_AddUnitsByType(unitTable: Table, type: String, OPT_amount: Integer): any;
declare function UnitTable_CountUnitsOfType(unitTable: Table, type: String): any;
declare function UnitTable_GenerateFromSGroup(sgroup: SGroupID): any;
declare function UnitTable_GetTotalUnitCount(unitTable: Table): any;
declare function UnitTable_RemoveUnits(unitTable: Table, unitsToRemove: Table): any;
declare function UnitTable_RemoveUnitsByType(unitTable: Table, type: String, OPT_amount: Integer): any;
declare function Util_CinematicKill(killer: SGroupID, target: SGroupID): any;
declare function Utility_FormatSeconds(): any;
declare function Utility_GetFormattedTime(): any;
declare function VerifyAllDissolves(): any;
declare function VillagerLife_AddSGroup(instance: VillagerLife, sgroup: SGroupID, job: String): any;
declare function VillagerLife_Attack(): any;
declare function VillagerLife_Create(player: Player, name: String, sg_roaming: SGroupID, sg_wood: SGroupID, sg_food: SGroupID, sg_stone: SGroupID, sg_gold: SGroupID, villager_response: String, mkr_home: Marker, mkr_flee: Marker, b_require_garrison: Boolean, mkr_flee_backup: Marker): any;
declare function VillagerLife_DestroyIfNearPosition(): any;
declare function VillagerLife_GarrisonIsNearby(): any;
declare function VillagerLife_GoToWork(): any;
declare function villagerlife_Init(): any;
declare function VillagerLife_Monitor(): any;
declare function VillagerLife_OnFail(): any;
declare function VillagerLife_OnSuccess(): any;
declare function VillagerLife_Wander(): any;
declare function Wave_AddUnits(wave: Wave, units: Table): any;
declare function Wave_GetSpawnableCategories(): any;
declare function Wave_Launch(wave: Wave, OPT_index: Integer): any;
declare function Wave_New(wave_data: Table): any;
declare function Wave_OverrideBuildingSpawnType(building_type: String, categories: Table): any;
declare function Wave_OverrideUnitBuildTime(type: String, time: Number): any;
declare function Wave_Prepare(wave: Wave, OPT_sg_custom: SGroupID, OPT_data: Table): any;
declare function Wave_RefreshSpawns(): any;
declare function Wave_SetUnits(wave: Wave, units: Table): any;
declare function World_EndSP(localPlayerWon: Boolean, winReason: WinReason): any;
declare function World_GetHiddenPositionOnPath(player: PlayerID, origin: MarkerIDPos, destination: MarkerIDPos, checktype: Integer): any;
declare function World_IsGameOver(): any;
declare function World_KillPlayer(player: PlayerID, reason: KillPlayerReason): any;
declare function World_LeaveGameMatch(): any;
declare function World_SetPlayerLose(player: PlayerID): any;
declare function World_SetPlayerWin(player: PlayerID): any;
declare function World_SetTeamWin(winningTeam: Integer, winReason: WinReason): any;
declare function AI_AddHeavyCoverEbpOccupancyOverride(pPlayer: PlayerID, ebp: ScarEntityPBG, occupancyOverride: Integer): any;
declare function AI_ClearPBGRepairPriority(pPlayer: PlayerID, pbgShortname: String): any;
declare function AI_ConvertToSimEntity(pAIEntity: EntityID): any;
declare function AI_ConvertToSimPlayer(pAIPlayer: PlayerID): any;
declare function AI_ConvertToSimSquad(pAISquad: SquadID): any;
declare function AI_CreateEncounter(pPlayer: PlayerID, encounterType: Integer): any;
declare function AI_DebugAttackEncounterPositionScoringEnable(enable: Boolean): any;
declare function AI_DebugAttackEncounterPositionScoringIsEnabled(): any;
declare function AI_DebugLuaEnable(enable: Boolean): any;
declare function AI_DebugLuaIsEnabled(): any;
declare function AI_DebugRatingEnable(enable: Boolean): any;
declare function AI_DebugRatingIsEnabled(): any;
declare function AI_DebugRenderAllTaskChildrenEnable(enable: Boolean): any;
declare function AI_DebugRenderAllTaskChildrenIsEnabled(): any;
declare function AI_DebugSkirmishForwardDeployEnable(enable: Boolean): any;
declare function AI_DebugSkirmishForwardDeployIsEnabled(): any;
declare function AI_DisableAllEconomyOverrides(pPlayer: PlayerID): any;
declare function AI_DoString(playerID: Integer, string: String): any;
declare function AI_Enable(pPlayer: PlayerID, enable: Boolean): any;
declare function AI_EnableAll(enable: Boolean): any;
declare function AI_EnableEconomyOverride(pPlayer: PlayerID, overrideName: String, enable: Boolean): any;
declare function AI_FindAISquadByID(pPlayer: PlayerID, UID: Integer): any;
declare function AI_FindBestProducibleEntityPBGforEntityTypes(player: PlayerID, entityTypeNames: String): any;
declare function AI_FindBestProducibleSquadPBGforSquadTypes(player: PlayerID, squadTypeNames: String): any;
declare function AI_FindConstructionLocation(pPlayer: PlayerID, pPbg: PropertyBagGroup, position: Position): any;
declare function AI_GetAllMilitaryPointsOfType(pAIPlayer: PlayerID, type: AIMilitaryTargetType, egroup: EGroupID): any;
declare function AI_GetAndReserveNextTaskID(player: PlayerID): any;
declare function AI_GetDifficulty(pPlayer: PlayerID): any;
declare function AI_GetPersonality(pPlayer: PlayerID): any;
declare function AI_GetPersonalityLuaFileName(pPlayer: PlayerID): any;
declare function AI_IsAIPlayer(pPlayer: PlayerID): any;
declare function AI_IsAITargetable(pPlayer: PlayerID): any;
declare function AI_IsDebugDisplay(pPlayer: PlayerID): any;
declare function AI_IsEnabled(pPlayer: PlayerID): any;
declare function AI_IsLocalAIPlayer(pPlayer: PlayerID): any;
declare function AI_IsPositionNearInSupplySector(aiPlayer: PlayerID, position: Position): any;
declare function AI_IsSquadValid(pSquadAI: SquadID): any;
declare function AI_LockEntity(pPlayer: PlayerID, pEntity: EntityID): any;
declare function AI_LockSquad(pPlayer: PlayerID, pSquad: SquadID): any;
declare function AI_LockSquads(pPlayer: PlayerID, squads: SGroupID): any;
declare function AI_PauseCurrentTasks(pPlayer: PlayerID, pause: Boolean): any;
declare function AI_PlayerAddExclusionArea(pPlayer: PlayerID, position: Position, noPathRadius: Real, noTargetRadius: Real): any;
declare function AI_PlayerDataDictionarySetBool(player: PlayerID, varName: String, value: Boolean): any;
declare function AI_PlayerDataDictionarySetNumber(player: PlayerID, varName: String, value: Real): any;
declare function AI_PlayerDataDictionarySetPBG(player: PlayerID, varName: String, value: PropertyBagGroup): any;
declare function AI_PlayerRemoveExclusionArea(pPlayer: PlayerID, position: Position, noPathRadius: Real, noTargetRadius: Real): any;
declare function AI_RemoveCapturePointHighPriority(pPlayer: PlayerID, pEntity: EntityID): any;
declare function AI_RestartSCAR(pPlayer: PlayerID): any;
declare function AI_RestoreDefaultPersonalitySettings(pPlayer: PlayerID): any;
declare function AI_SetAISquadCombatRangePolicyTaskOverride(pSquadAI: SquadID, policy: CombatRangePolicy): any;
declare function AI_SetAITargetable(pPlayer: PlayerID, targetable: Boolean): any;
declare function AI_SetCapturePointAsHighPriority(pPlayer: PlayerID, pEntity: EntityID): any;
declare function AI_SetDebugDisplay(pPlayer: PlayerID, enable: Boolean): any;
declare function AI_SetDifficulty(pPlayer: PlayerID, difficultyLevel: Integer): any;
declare function AI_SetPBGRepairPriority(pPlayer: PlayerID, pbgShortname: String, priorityValue: Real): any;
declare function AI_SetPersonality(pPlayer: PlayerID, personalityName: String): any;
declare function AI_SetResourceIncomeDesire(player: PlayerID, resourceType: Integer, desiredIncome: Real): any;
declare function AI_SquadDataDictionaryClearSquad(squad: SquadID, varName: String): any;
declare function AI_SquadDataDictionaryGetBool(squad: SquadID, varName: String): any;
declare function AI_SquadDataDictionaryGetNumber(squad: SquadID, varName: String): any;
declare function AI_SquadDataDictionaryGetSquad(squad: SquadID, varName: String): any;
declare function AI_SquadDataDictionarySetBool(squad: SquadID, varName: String, value: Boolean): any;
declare function AI_SquadDataDictionarySetNumber(squad: SquadID, varName: String, value: Real): any;
declare function AI_SquadDataDictionarySetPBG(squad: SquadID, varName: String, value: PropertyBagGroup): any;
declare function AI_SquadDataDictionarySetSquad(squad: SquadID, varName: String, targetSquad: SquadID): any;
declare function AI_ToggleDebugDisplay(pPlayer: PlayerID): any;
declare function AI_UnlockAll(pPlayer: PlayerID): any;
declare function AI_UnlockEntity(pPlayer: PlayerID, pEntity: EntityID): any;
declare function AI_UnlockSquad(pPlayer: PlayerID, pSquad: SquadID): any;
declare function AI_UnlockSquads(pPlayer: PlayerID, squads: SGroupID): any;
declare function AI_UpdateStatics(pPlayer: PlayerID): any;
declare function AIAbilityEncounter_AbilityGuidance_SetAbilityPBG(pEncounter: AIEncounterID, abilityPBG: PropertyBagGroup): any;
declare function AIEncounter_Cancel(pEncounter: AIEncounterID): any;
declare function AIEncounter_CombatGuidance_AddForcedCombatTargetEGroup(pEncounter: AIEncounterID, egroup: EGroupID): any;
declare function AIEncounter_CombatGuidance_AddForcedCombatTargetEntity(pEncounter: AIEncounterID, pEntity: EntityID): any;
declare function AIEncounter_CombatGuidance_AddForcedCombatTargetSGroup(pEncounter: AIEncounterID, sgroup: SGroupID): any;
declare function AIEncounter_CombatGuidance_AddForcedCombatTargetSquad(pEncounter: AIEncounterID, pSquad: SquadID): any;
declare function AIEncounter_CombatGuidance_ClearForcedCombatTargets(pEncounter: AIEncounterID): any;
declare function AIEncounter_CombatGuidance_EnableCombatGarrison(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_CombatGuidance_RemoveForcedCombatTargetEGroup(pEncounter: AIEncounterID, egroup: EGroupID): any;
declare function AIEncounter_CombatGuidance_RemoveForcedCombatTargetEntity(pEncounter: AIEncounterID, pEntity: EntityID): any;
declare function AIEncounter_CombatGuidance_RemoveForcedCombatTargetSGroup(pEncounter: AIEncounterID, sgroup: SGroupID): any;
declare function AIEncounter_CombatGuidance_RemoveForcedCombatTargetSquad(pEncounter: AIEncounterID, pSquad: SquadID): any;
declare function AIEncounter_CombatGuidance_SetCombatRangePolicy(pEncounter: AIEncounterID, policy: CombatRangePolicy): any;
declare function AIEncounter_CombatGuidance_SetSpreadAttackers(pEncounter: AIEncounterID, value: Boolean): any;
declare function AIEncounter_DataDictionarySetBool(pEncounter: AIEncounterID, varName: String, value: Boolean): any;
declare function AIEncounter_DataDictionarySetNumber(pEncounter: AIEncounterID, varName: String, value: Real): any;
declare function AIEncounter_DataDictionarySetPBG(pEncounter: AIEncounterID, varName: String, value: PropertyBagGroup): any;
declare function AIEncounter_DefenseGuidance_EnableIdleGarrison(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_AddEncouterSetupLocation(pEncounter: AIEncounterID, pos: Position, facingDir: Position): any;
declare function AIEncounter_EngagementGuidance_ClearSetupLocationOverrides(pEncounter: AIEncounterID): any;
declare function AIEncounter_EngagementGuidance_EnableAggressiveEngagementMove(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_EnableConstruction(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_EnableSetupLocations(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetAllowResourceGatheringOutsideLeash(pEncounter: AIEncounterID, allowOutsideLeash: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetAllowReturnToPreviousStages(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetCoordinatedSetup(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetEnableSniperReactions(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetEnableSubEngagementAreas(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_EngagementGuidance_SetMaxEngagementTime(pEncounter: AIEncounterID, seconds: Real): any;
declare function AIEncounter_EngagementGuidance_SetMaxIdleTime(pEncounter: AIEncounterID, seconds: Real): any;
declare function AIEncounter_EngagementGuidance_SetSetupLocationSbpPriority(pEncounter: AIEncounterID, sbp: ScarSquadPBG, priority: Real): any;
declare function AIEncounter_EngagementGuidance_SetSquadSetupLocation(pEncounter: AIEncounterID, pSquad: SquadID, pos: Position, facingDir: Position): any;
declare function AIEncounter_FallbackGuidance_EnableReinforceDuringCombat(pEncounter: AIEncounterID, value: Boolean): any;
declare function AIEncounter_FallbackGuidance_EnableRetreatOnPinned(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_FallbackGuidance_EnableRetreatOnSuppression(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_FallbackGuidance_SetEntitiesRemainingThreshold(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetFallbackCapacityPercentage(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetFallbackCombatRating(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetFallbackSquadHealthPercentage(pEncounter: AIEncounterID, fallbackStartValue: Real, fallbackEndValue: Real): any;
declare function AIEncounter_FallbackGuidance_SetFallbackSquadShieldPercentage(pEncounter: AIEncounterID, fallbackStartValue: Real, fallbackEndValue: Real): any;
declare function AIEncounter_FallbackGuidance_SetFallbackVehicleHealthPercentage(pEncounter: AIEncounterID, fallbackStartValue: Real, fallbackEndValue: Real): any;
declare function AIEncounter_FallbackGuidance_SetGlobalFallbackPercentage(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetGlobalFallbackRetreat(pEncounter: AIEncounterID, value: Boolean): any;
declare function AIEncounter_FallbackGuidance_SetReinforceHealthPercentage(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetReinforceMaxDistance(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetReinforceMinHealthRatioToReachReinforcePoint(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetRetreatCapacityPercentage(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetRetreatCombatRating(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetRetreatHealthPercentage(pEncounter: AIEncounterID, value: Real): any;
declare function AIEncounter_FallbackGuidance_SetTargetPosition(pEncounter: AIEncounterID, pos: Position): any;
declare function AIEncounter_ForceComplete(pEncounter: AIEncounterID): any;
declare function AIEncounter_FormationGuidance_SetFormUpAtBuildingOfType(encounter: AIEncounterID, unitTypeList: String): any;
declare function AIEncounter_FormationGuidance_SetFormUpAtEntityTarget(encounter: AIEncounterID, entity: EntityID): any;
declare function AIEncounter_FormationGuidance_SetFormUpAtPositionTarget(encounter: AIEncounterID, postion: Position): any;
declare function AIEncounter_FormationGuidance_SetFormUpAtSquadAverage(encounter: AIEncounterID): any;
declare function AIEncounter_FormationGuidance_SetFormUpAtTimeOutParams(encounter: AIEncounterID, timeoutSeconds: Real, requiredSquadsPercent: Real): any;
declare function AIEncounter_FormationPhase_GetEndPosition(encounterID: AITaskID): any;
declare function AIEncounter_FormationPhase_GetEndReason(encounterID: AITaskID): any;
declare function AIEncounter_FormationPhase_GetEnemiesAtEnd(encounterID: AITaskID, enemySquads: SGroupID, enemyBuildings: EGroupID): any;
declare function AIEncounter_FormationPhase_GetExitCombatFitnessResult(encounterID: AITaskID): any;
declare function AIEncounter_FormationPhase_GetSquadsAvailableAtEnd(encounterID: AITaskID, squadsAvailable: SGroupID, squadsUnavailable: SGroupID): any;
declare function AIEncounter_FormationPhase_HasValidExitInfo(encounterID: AITaskID): any;
declare function AIEncounter_FormationPhaseGuidance_SetCombatCoordinator(encounter: AIEncounterID, coordinatorPBG: PropertyBagGroup): any;
declare function AIEncounter_FormationPhaseGuidance_SetCombatExitParams(encounter: AIEncounterID, timeoutSeconds: Real, testTargetDestroyed: Boolean, testEnemySquadsCleared: Boolean, testEnemyBuildingsCleared: Boolean, enemyScanRange: Real, excludeBuildingTypeNames: String): any;
declare function AIEncounter_FormationPhaseGuidance_SetMoveEnemiesExitParams(encounter: AIEncounterID, enemyScanRange: Real, combatFitnessThreshold: Real, enemyFormationHeading: Real, enemyFormationPosition: Real, enemyFormationDistance: Real, excludeBuildingTypeNames: String): any;
declare function AIEncounter_FormationPhaseGuidance_SetMoveExitParams(encounter: AIEncounterID, timeoutSeconds: Real, requiredSquadsPercent: Real, wasRecentlyAttackedSecs: Real): any;
declare function AIEncounter_FormationTaskStateGuidance_MinRange(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, repositionIntervalSecs: Real, useTactics: Boolean, unitTypeNames: String, targetPriorityPBG: PropertyBagGroup): any;
declare function AIEncounter_FormationTaskStateGuidance_MinRangeWithProtect(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, repositionIntervalSecs: Real, useTactics: Boolean, unitTypeNames: String, targetPriorityPBG: PropertyBagGroup, protectMinSquads: Integer, protectMaxSquads: Integer, protectProportionSquads: Real, protectDistance: Real, protectRepositionThreshold: Real, protectRepositionIntervalSecs: Real, protectUnitTypeNames: String): any;
declare function AIEncounter_FormationTaskStateGuidance_Move(encounter: AIEncounterID, attackMove: Boolean, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, unitTypeNames: String): any;
declare function AIEncounter_FormationTaskStateGuidance_SetupRanged(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, unitTypeNames: String, targetPriorityPBG: PropertyBagGroup): any;
declare function AIEncounter_FormationTaskStateGuidance_SetupRangedWithProtect(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, unitTypeNames: String, targetPriorityPBG: PropertyBagGroup, protectMinSquads: Integer, protectMaxSquads: Integer, protectProportionSquads: Real, protectDistance: Real, protectRepositionThreshold: Real, protectRepositionIntervalSecs: Real, protectUnitTypeNames: String): any;
declare function AIEncounter_FormationTaskStateGuidance_SimpleMelee(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, unitTypeNames: String, targetPriorityPBG: PropertyBagGroup): any;
declare function AIEncounter_FormationTaskStateGuidance_TransportMove(encounter: AIEncounterID, priority: Integer, minSquads: Integer, maxSquads: Integer, maxTasks: Integer, unitTypeNames: String, minPassengerSquads: Integer, maxPassengerSquadsPerTransport: Integer, unloadAbilityPBG: PropertyBagGroup, passengerUnitTypeNames: String, targetPriorityPBG: PropertyBagGroup): any;
declare function AIEncounter_GetEncounterFromID(player: PlayerID, taskID: AITaskID): any;
declare function AIEncounter_IsAIPlayerValid(pEncounter: AIEncounterID): any;
declare function AIEncounter_IsValid(PlayerUniqueID: UniqueID, encounterTaskID: AITaskID): any;
declare function AIEncounter_LogDebug(pPlayer: PlayerID, encounterID: Integer, debugString: String): any;
declare function AIEncounter_MoveGuidance_EnableAggressiveMove(pEncounter: AIEncounterID, enable: Boolean): any;
declare function AIEncounter_MoveGuidance_SetSquadCoherenceRadius(pEncounter: AIEncounterID, radius: Real): any;
declare function AIEncounter_Notify_ClearCallbacks(pEncounter: AIEncounterID): any;
declare function AIEncounter_Notify_SetEnableSnipedCallbacks(pEncounter: AIEncounterID, value: Boolean): any;
declare function AIEncounter_Notify_SetPlayerEventEncounterID(pEncounter: AIEncounterID, id: Integer): any;
declare function AIEncounter_Pause(pEncounter: AIEncounterID, bPause: Boolean): any;
declare function AIEncounter_ResourceGuidance_CalculateEstimatedSquadProductionTime(pEncounter: AIEncounterID, pbgShortname: String, canAffordNowOnly: Boolean): any;
declare function AIEncounter_ResourceGuidance_ClearEntities(pEncounter: AIEncounterID): any;
declare function AIEncounter_ResourceGuidance_ClearSquads(pEncounter: AIEncounterID): any;
declare function AIEncounter_ResourceGuidance_EntityGroup(pEncounter: AIEncounterID, entities: EGroupID): any;
declare function AIEncounter_ResourceGuidance_IsSquadGroupEqual(pEncounter: AIEncounterID, squads: SGroupID): any;
declare function AIEncounter_ResourceGuidance_SetResourceMoney(pEncounter: AIEncounterID, resourceAmount: ResourceAmount): any;
declare function AIEncounter_ResourceGuidance_SquadGroup(pEncounter: AIEncounterID, squads: SGroupID): any;
declare function AIEncounter_SetDebugName(pEncounter: AIEncounterID, name: String): any;
declare function AIEncounter_TacticFilter_Reset(pEncounter: AIEncounterID): any;
declare function AIEncounter_TacticFilter_ResetAbilityGuidance(pEncounter: AIEncounterID): any;
declare function AIEncounter_TacticFilter_ResetAbilityPriority(pEncounter: AIEncounterID, abilityPBG: PropertyBagGroup): any;
declare function AIEncounter_TacticFilter_ResetPriority(pEncounter: AIEncounterID, tactic: AITacticType): any;
declare function AIEncounter_TacticFilter_ResetTacticGuidance(pEncounter: AIEncounterID): any;
declare function AIEncounter_TacticFilter_ResetTargetGuidance(pEncounter: AIEncounterID): any;
declare function AIEncounter_TacticFilter_SetAbilityGuidance(pEncounter: AIEncounterID, ability: PropertyBagGroup, maxCasters: Integer, retrySecs: Real, waitSelfSecs: Real, waitEncounterSecs: Real, timeoutSecs: Real, initialWait: Boolean, maxRange: Real, castChanceOverride: Real): any;
declare function AIEncounter_TacticFilter_SetAbilityPriority(pEncounter: AIEncounterID, abilityPBG: PropertyBagGroup, priority: Real): any;
declare function AIEncounter_TacticFilter_SetAbilityPriorityForSquad(pEncounter: AIEncounterID, squad: SquadID, abilityPBG: PropertyBagGroup, priority: Real): any;
declare function AIEncounter_TacticFilter_SetDefaultAbilityGuidance(pEncounter: AIEncounterID, maxCasters: Integer, retrySecs: Real, waitSelfSecs: Real, waitEncounterSecs: Real, timeoutSecs: Real, initialWait: Boolean, maxRange: Real, castChanceOverride: Real): any;
declare function AIEncounter_TacticFilter_SetDefaultTacticGuidance(pEncounter: AIEncounterID, maxUsers: Integer, retrySecs: Real, waitSecs: Real, timeoutSecs: Real, initialWait: Boolean, maxRange: Real): any;
declare function AIEncounter_TacticFilter_SetPriority(pEncounter: AIEncounterID, tactic: AITacticType, priority: Real): any;
declare function AIEncounter_TacticFilter_SetPriorityForSquad(pEncounter: AIEncounterID, squad: SquadID, tactic: AITacticType, priority: Real): any;
declare function AIEncounter_TacticFilter_SetTacticGuidance(pEncounter: AIEncounterID, tactic: AITacticType, maxUsers: Integer, retrySecs: Real, waitSecs: Real, timeoutSecs: Real, initialWait: Boolean, maxRange: Real): any;
declare function AIEncounter_TacticFilter_SetTargetPolicy(pEncounter: AIEncounterID, policy: TargetPreference): any;
declare function AIEncounter_TargetGuidance_DisableSquadPatrol(pEncounter: AIEncounterID, pSquad: SquadID): any;
declare function AIEncounter_TargetGuidance_SetPatrolPathByName(pEncounter: AIEncounterID, pathName: String, delaySecs: Real, invertPathAtEnd: Boolean, startInverted: Boolean): any;
declare function AIEncounter_TargetGuidance_SetPatrolWander(pEncounter: AIEncounterID, delaySecs: Real, radiusMode: Integer, radiusOverride: Real, overrideCenter: Boolean, centerOverride: Position): any;
declare function AIEncounter_TargetGuidance_SetSquadPatrolPathByName(pEncounter: AIEncounterID, pSquad: SquadID, pathName: String, delaySecs: Real, invertPathAtEnd: Boolean, startInverted: Boolean): any;
declare function AIEncounter_TargetGuidance_SetSquadPatrolWander(pEncounter: AIEncounterID, pSquad: SquadID, delaySecs: Real, radiusMode: Integer, radiusOverride: Real, overrideCenter: Boolean, centerOverride: Position): any;
declare function AIEncounter_TargetGuidance_SetTargetArea(pEncounter: AIEncounterID, radius: Real): any;
declare function AIEncounter_TargetGuidance_SetTargetEntity(pEncounter: AIEncounterID, entity: EntityID): any;
declare function AIEncounter_TargetGuidance_SetTargetLeash(pEncounter: AIEncounterID, radius: Real): any;
declare function AIEncounter_TargetGuidance_SetTargetPosition(pEncounter: AIEncounterID, pos: Position): any;
declare function AIEncounter_TargetGuidance_SetTargetSquad(pEncounter: AIEncounterID, squad: SquadID): any;
declare function AIEncounter_Trigger(pEncounter: AIEncounterID): any;
declare function AIPlayer_CanAISquadLockTacticItem(tacticItemEntity: EntityID, lockingAISquad: SquadID): any;
declare function AIPlayer_GetOpponentPlayerAtIndex(aiPlayer: PlayerID, index: Integer): any;
declare function AIPlayer_GetOpponentPlayerCount(aiPlayer: PlayerID): any;
declare function AIPlayer_GetStateModelAISquadListEntries(aiPlayer: PlayerID, key: String): any;
declare function AIPlayer_IsTacticItemLocked(player: PlayerID, tacticItemEntity: EntityID): any;
declare function AIPlayer_IsTacticItemLockedByAISquad(tacticItemEntity: EntityID, lockingAISquad: SquadID): any;
declare function AIPlayer_LockTacticItemForAISquad(tacticItemEntity: EntityID, lockingAISquad: SquadID): any;
declare function AIPlayer_ResetEnemySquadsVisibility(player: PlayerID, enemyPlayer: PlayerID): any;
declare function AIPlayer_SetGathererDistributionOverride(aiPlayer: PlayerID, luaGatherDistro: Real): any;
declare function AIPlayer_SetRequiresStatsUpdate(player: PlayerID): any;
declare function AIPlayer_UnLockTacticItemForAISquad(tacticItemEntity: EntityID, lockingAISquad: SquadID): any;
declare function AISquad_FindBestIsolatedSquadTarget(aiSquad: SquadID, targetSquads: SGroupID, tacticTargetPolicy: TargetPreference, targetAllies: Boolean): any;
declare function AISquad_FindBestSquadTarget(aiSquad: SquadID, targetSquads: SGroupID, tacticTargetPolicy: TargetPreference): any;
declare function AISquad_FindSafePositionInEncounterLeash(aiSquad: SquadID, maxRadius: Real): any;
declare function AISquad_IsRunningSquadTacticAbility(aiSquad: SquadID, abilityPBG: PropertyBagGroup): any;
declare function AIStateTree_SpawnRootControllerWithStateModelTunings(pPlayer: PlayerID, openingBranchName: String, keepAlive: Boolean, stateModelTuningsScarPBG: ScarAIStateModelTuningsPBG, stateModelSGroupListTunings: SGroupID, stateModelEGroupListTunings: EGroupID, stateModelPositionTargetListTunings: Position, stateModelMarkerTargetListTunings: MarkerID, stateModelEntityTypeListTunings: Stringlist, stateModelCoordinatorPBGListTunings: LuaMapScarAIFormationCoordinatorPBG, stateModelBoolTunings: Boolean, stateModelFloatTunings: Real, stateModelIntTunings: Integer): any;
declare function Squad_GetInternalAIEncounterPtr(squad: SquadID): any;
declare function Squad_IsInAIEncounter(squad: SquadID): any;
declare function SquadGroup_CountSpawnedAndStatsInitialized(sgroup: SGroupID, player: PlayerID): any;
declare function BP_GetAbilityBlueprint(pbgShortname: String): any;
declare function BP_GetAbilityBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetAIAbilityBlueprint(pbgShortname: String): any;
declare function BP_GetAIAbilityBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetAIFormationCoordinatorBlueprint(pbgShortname: String): any;
declare function BP_GetAIFormationCoordinatorBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetAIFormationTargetPriorityBlueprint(pbgShortname: String): any;
declare function BP_GetAIFormationTargetPriorityBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetAIStateModelTuningsBlueprint(pbgShortname: String): any;
declare function BP_GetAIStateModelTuningsBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetEntityBlueprint(pbgShortname: String): any;
declare function BP_GetEntityBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetEntityChildBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetEntityChildBlueprintCount(pbgShortname: String): any;
declare function BP_GetEntityParentBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetEntityParentBlueprintCount(pbgShortname: String): any;
declare function BP_GetEntityTypeExtRaceBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetEntityTypeExtRaceCount(pbgShortname: String): any;
declare function BP_GetEntityUIInfo(ebp: ScarEntityPBG): any;
declare function BP_GetMapPoolBlueprint(pbgShortname: String): any;
declare function BP_GetMapPoolBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetMoveTypeBlueprint(pbgShortname: String): any;
declare function BP_GetMoveTypeBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetName(pbg: PropertyBagGroup): any;
declare function BP_GetPassTypeBlueprint(pbgShortname: String): any;
declare function BP_GetPassTypeBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetPropertyBagGroupCount(type: PropertyBagGroupType): any;
declare function BP_GetPropertyBagGroupPathName(type: PropertyBagGroupType, index: Integer): any;
declare function BP_GetReticuleBlueprint(pbgShortname: String): any;
declare function BP_GetSlotItemBlueprint(pbgShortname: String): any;
declare function BP_GetSlotItemBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetSquadBlueprint(pbgShortname: String): any;
declare function BP_GetSquadBlueprintByPbgID(pbgID: String): any;
declare function BP_GetSquadChildBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetSquadChildBlueprintCount(pbgShortname: String): any;
declare function BP_GetSquadParentBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetSquadParentBlueprintCount(pbgShortname: String): any;
declare function BP_GetSquadTypeExtRaceBlueprintAtIndex(pbgShortname: String, index: Integer): any;
declare function BP_GetSquadTypeExtRaceCount(pbgShortname: String): any;
declare function BP_GetSquadUIInfo(sbp: ScarSquadPBG, rbp: ScarRacePBG): any;
declare function BP_GetType(v: StackVar): any;
declare function BP_GetUpgradeBlueprint(pbgShortname: String): any;
declare function BP_GetUpgradeBlueprintByPbgID(pbgID: Integer): any;
declare function BP_GetUpgradeUIInfo(ubp: ScarUpgradePBG): any;
declare function BP_GetWeaponBlueprint(pbgShortname: String): any;
declare function BP_GetWeaponBlueprintByPbgID(pbgID: Integer): any;
declare function BP_IsUpgradeOfType(upgradePBG: ScarUpgradePBG, key: String): any;
declare function EBP_Exists(pbgShortname: String): any;
declare function EBP_IsOfRace(pbgShortname: String, race: ScarRacePBG): any;
declare function SBP_Exists(pbgShortname: String): any;
declare function SBP_IsOfRace(pbgShortname: String, race: ScarRacePBG): any;
declare function Camera_CatromSplinePanOverTime(var1: Variable, seconds: Integer, keepQueue: Boolean, controlRotation: Boolean): any;
declare function Camera_CyclePositions(list: Table, OPT_pan: Boolean, OPT_panRate: Real, OPT_callback: ScarFn): any;
declare function Camera_Follow(var1: Variable): any;
declare function Camera_LinearSplinePanOverTime(var1: Variable, seconds: Integer, keepQueue: Boolean, controlRotation: Boolean): any;
declare function Camera_MoveTo(var1: Variable, pan: Boolean, panRate: Real, keepInputLocked: Boolean, resetToDefault: Boolean): any;
declare function Camera_MoveToIfClose(var1: Variable): any;
declare function Camera_PanOverTimeRelative(delta: Position, seconds: Integer, keepQueue: Boolean): any;
declare function Camera_PanOverTimeTo(var1: Variable, seconds: Integer, keepQueue: Boolean): any;
declare function Camera_ResetRotation(): any;
declare function Camera_RotateRelative(angle: Real): any;
declare function Camera_RotateTo(angle: Real): any;
declare function CheatMenu_RegisterCheatFunction(cheatFunction: Function, title: String, OPT_restartMission: Boolean): any;
declare function Cmd_AbandonTeamWeapon(sgroupid: SGroupID, OPT_preserveCrew: Boolean, OPT_queued: Boolean): any;
declare function Cmd_Ability(user: EGroupID, blueprint: Integer, OPT_target?: EGroupID, OPT_direction?: Position, OPT_skipCostPrereq?: Boolean, OPT_queued?: Boolean): any;
declare function Cmd_AttachSquads(sgroup: SGroupID, sgroupAttachee: SGroupID): any;
declare function Cmd_Attack(sgroup: SGroupID, target: EGroupID, OPT_queued: Boolean, OPT_stationary: Boolean, OPT_plan: String, OPT_checkFOW: Boolean): any;
declare function Cmd_AttackMove(sgroup: SGroupID, targetposition: Position, OPT_queued: Boolean, OPT_plan: String, OPT_coverSearchRadius: Real, OPT_deleteWhenNearMarker: MarkerID, OPT_splitCmd: Boolean): any;
declare function Cmd_AttackMoveThenCapture(attacker: SGroupID, target: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_CaptureTeamWeapon(sgroupid: SGroupID, targetid: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_Construct(sgroupid: SGroupID, blueprint: Entity, targetid: EGroupID, OPT_Facing: Position, OPT_queued: Boolean): any;
declare function Cmd_DetonateDemolitions(player: PlayerID, target: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_EjectOccupants(fromgroupid: EGroupID, OPT_destination: Position, OPT_queued: Boolean): any;
declare function Cmd_Garrison(fromsgroupid: SGroupID, togroupid: EGroupID, OPT_overload: Boolean, OPT_queued: Boolean, OPT_instant: Boolean): any;
declare function Cmd_HoldPosition(sgroup: SGroupID, OPT_location: Boolean, OPT_queued: Boolean): any;
declare function Cmd_InstantReinforceUnit(sgroup: SGroupID, count: Integer): any;
declare function Cmd_InstantSetupTeamWeapon(sgroupid: SGroupID, OPT_queued: Boolean): any;
declare function Cmd_InstantUpgrade(target: EGroupID, blueprint: Integer, OPT_count: Integer): any;
declare function Cmd_Move(sgroup: SGroupID, position: EGroupID, OPT_queued: Boolean, OPT_deleteWhenNearMarker: MarkerID, OPT_facing: Position, OPT_offset: Integer, OPT_distance: Real, OPT_coverSearchRadius: Real, OPT_splitCmd: Boolean): any;
declare function Cmd_MoveAwayFromPos(sgroup: SGroupID, position: Pos, radius: Integer, OPT_queued: Boolean): any;
declare function Cmd_MoveToAndDeSpawn(sgroup: SGroupID, marker: MarkerID, queued: Boolean): any;
declare function Cmd_MoveToAndDestroy(sgroup: SGroupID, marker: MarkerID, queued: Boolean): any;
declare function Cmd_MoveToClosestMarker(sgroup: SGroupID, markertable: Table): any;
declare function Cmd_MoveToThenAttackMove(sgroup: SGroupID, position: EGroupID, OPT_distance: Integer, OPT_ANY: Boolean, OPT_queued: Boolean): any;
declare function Cmd_MoveToThenCapture(attacker: SGroupID, target: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_RecrewVehicle(sgroupid: SGroupID, targetid: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_ReinforceUnit(sgroup: SGroupID, count: Integer): any;
declare function Cmd_Retreat(sgroup: SGroupID, OPT_location: Position, OPT_deleteWhenNearMarker: Boolean, OPT_queued: Boolean, OPT_saveEncounters: Boolean, OPT_vulnerableRetreat: Boolean): any;
declare function Cmd_RevertOccupiedBuilding(sgroupid: SGroupID, targetid: EGroupID, OPT_queued: Boolean): any;
declare function Cmd_SetDemolitions(sgroupid: SGroupID, targetid: EGroupID, OPT_skipCostPrereq: Boolean, OPT_queued: Boolean): any;
declare function Cmd_SetupTeamWeapon(sgroupid: SGroupID, OPT_queued: Boolean): any;
declare function Cmd_SquadCamouflageStance(sgroup: SGroupID, stanceid: CamouflageStanceID): any;
declare function Cmd_SquadPath(sgroup: SGroupID, pathName: String, bFromClosest: Boolean, loop: Integer, bAttackMove: Boolean, pauseTime: Real, OPT_deleteWhenNearMarker: MarkerID, OPT_queued: Boolean, OPT_bMoveForward: Boolean): any;
declare function Cmd_SquadPatrolMarker(sgroup: SGroupID, marker: MarkerID): any;
declare function Cmd_StaggeredRetreat(sgroup: SGroupID, markers: Table, OPT_maxTries: Integer, OPT_vulnerableRetreat: Boolean): any;
declare function Cmd_Stop(group: EGroupID): any;
declare function Cmd_Surrender(sgroupid: SGroupID, OPT_actionpoints: Integer, OPT_exitpos: Position, OPT_deleteAtExit: Boolean, OPT_removeWeapon: Boolean): any;
declare function Cmd_UngarrisonSquad(sgroupid: SGroupID, OPT_destination: Position, OPT_queued: Boolean): any;
declare function Cmd_Upgrade(user: EGroupID, blueprint: Integer, OPT_count: Integer, OPT_instant: Boolean): any;
declare function LocalCommand_Entity(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType): any;
declare function LocalCommand_EntityAbility(player: PlayerID, egroup: EGroupID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_EntityBuildSquad(player: PlayerID, egroup: EGroupID, squadPbg: ScarSquadPBG): any;
declare function LocalCommand_EntityEntity(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType, target: EGroupID): any;
declare function LocalCommand_EntityExt(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_EntityPos(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType, target: Position): any;
declare function LocalCommand_EntityPosAbility(player: PlayerID, egroup: EGroupID, pos: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_EntityPosDirAbility(player: PlayerID, egroup: EGroupID, pos: Position, dir: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_EntityPosSquad(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType, target: Position, sgroup: SGroupID): any;
declare function LocalCommand_EntitySquad(player: PlayerID, egroup: EGroupID, entityCommand: EntityCommandType, target: SGroupID): any;
declare function LocalCommand_EntityTargetEntityAbility(player: PlayerID, egroup: EGroupID, entityTarget: EntityID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_EntityTargetSquadAbility(player: PlayerID, egroup: EGroupID, squadTarget: SquadID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_EntityUpgrade(player: PlayerID, egroup: EGroupID, upgrade: ScarUpgradePBG, instant: Boolean, queued: Boolean): any;
declare function LocalCommand_Player(player: PlayerID, dest: PlayerID, playerCommand: PlayerCommandType): any;
declare function LocalCommand_PlayerAbility(player: PlayerID, dest: PlayerID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function LocalCommand_PlayerEntity(player: PlayerID, dest: PlayerID, playerCommand: PlayerCommandType, target: EGroupID): any;
declare function LocalCommand_PlayerExt(player: PlayerID, dest: PlayerID, playerCommand: PlayerCommandType, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_PlayerMultiTargetAbility(caster: PlayerID, targets: vectorConstTargetHandle, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function LocalCommand_PlayerPlaceAndConstructEntitiesPlanned(player: PlayerID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean, payOnApply: Boolean): any;
declare function LocalCommand_PlayerPlaceAndConstructFencePlanned(player: PlayerID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean, payOnApply: Boolean): any;
declare function LocalCommand_PlayerPlaceAndConstructSlottedSplinePlanned(player: PlayerID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean, payOnApply: Boolean): any;
declare function LocalCommand_PlayerPos(player: PlayerID, dest: PlayerID, playerCommand: PlayerCommandType, pos: Position): any;
declare function LocalCommand_PlayerPosAbility(player: PlayerID, dest: PlayerID, pos: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function LocalCommand_PlayerPosDirAbility(player: PlayerID, dest: PlayerID, pos: Position, dir: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function LocalCommand_PlayerPosExt(player: PlayerID, dest: PlayerID, playerCommand: PlayerCommandType, pos: Position, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructBuilding(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructBuildingCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructFence(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructFenceCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructField(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructFieldCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSpline(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSplineCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, posStart: Position, posEnd: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSplineDependent(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSplineDependentCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSplineReplacer(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerSquadConstructSlottedSplineReplacerCheat(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facingPos: Position, queued: Boolean): any;
declare function LocalCommand_PlayerUpgrade(player: PlayerID, upgrade: ScarUpgradePBG, instant: Boolean, queued: Boolean): any;
declare function LocalCommand_Squad(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, queued: Boolean): any;
declare function LocalCommand_SquadAbility(player: PlayerID, sgroup: SGroupID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadAttackMovePos(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: Position, planName: String, queued: Boolean, split: Boolean): any;
declare function LocalCommand_SquadEntity(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: EGroupID, queued: Boolean): any;
declare function LocalCommand_SquadEntityAbility(player: PlayerID, sgroup: SGroupID, target: EGroupID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadEntityAttack(player: PlayerID, sgroup: SGroupID, target: EGroupID, bCheckFOW: Boolean, bStationary: Boolean, planName: String, queued: Boolean): any;
declare function LocalCommand_SquadEntityBool(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: EGroupID, cmdparam: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadEntityExt(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: EGroupID, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_SquadEntityLoad(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: EGroupID, bOverLoad: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadExt(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_SquadMovePos(player: PlayerID, sgroup: SGroupID, target: Position, queued: Boolean, reverseMove: Boolean, split: Boolean, acceptableProximity: Real): any;
declare function LocalCommand_SquadMovePosFacing(player: PlayerID, sgroup: SGroupID, target: Position, facing: Position, queued: Boolean, reverseMove: Boolean, split: Boolean, acceptableProximity: Real): any;
declare function LocalCommand_SquadMultiTargetAbility(caster: SquadID, targets: vectorConstTargetHandle, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadPath(pPlayer: PlayerID, pSGroup: SGroupID, pathName: String, pathIndex: Integer, bFromClosest: Boolean, loopType: LoopType, bAttackMove: Boolean, pauseTime: Real, bMoveForward: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadPos(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: Position, queued: Boolean): any;
declare function LocalCommand_SquadPosAbility(player: PlayerID, sgroup: SGroupID, pos: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadPosExt(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: Position, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_SquadPositionAttack(player: PlayerID, sgroup: SGroupID, target: Position, bCheckFOW: Boolean, bStationary: Boolean, planName: String, queued: Boolean): any;
declare function LocalCommand_SquadRetreatPos(player: PlayerID, sgroup: SGroupID, target: Position, queued: Boolean, allowNonInteractiveStages: Boolean): any;
declare function LocalCommand_SquadSetCombatStance(player: PlayerID, sgroup: SGroupID, stanceType: StanceType, queued: Boolean): any;
declare function LocalCommand_SquadSetWeaponPreference(player: PlayerID, sgroup: SGroupID, weaponPreference: WeaponPreference, queued: Boolean): any;
declare function LocalCommand_SquadSquad(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: SGroupID, queued: Boolean): any;
declare function LocalCommand_SquadSquadAbility(player: PlayerID, sgroup: SGroupID, target: SGroupID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadSquadAttack(player: PlayerID, sgroup: SGroupID, target: SGroupID, bCheckFOW: Boolean, bStationary: Boolean, planName: String, queued: Boolean): any;
declare function LocalCommand_SquadSquadExt(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: SGroupID, cmdparam: Integer, queued: Boolean): any;
declare function LocalCommand_SquadSquadLoad(player: PlayerID, sgroup: SGroupID, squadCommand: SquadCommandType, target: SGroupID, bOverLoad: Boolean, queued: Boolean): any;
declare function LocalCommand_SquadUpgrade(player: PlayerID, sgroup: SGroupID, upgrade: ScarUpgradePBG, instant: Boolean, queued: Boolean): any;
declare function Core_AddPlayerToTeam(player: PlayerID, teams_table: Team): any;
declare function Core_Compare(value1: Number, value2: Number, comparator: COMPARISON): any;
declare function Core_GetActiveTeamCount(): any;
declare function Core_GetPlayersTableEntry(player: PlayerID): any;
declare function Core_GetPlayersTableEntryFromIndex(playerIndex: Integer): any;
declare function Core_GetPlayerTeamsEntry(player: PlayerID): any;
declare function Core_GetTeamsEntryFromIndex(index: Integer): any;
declare function Core_IsModuleRegistered(name: String): any;
declare function Core_IsPlayerEliminated(player: PlayerID): any;
declare function Core_IsPlayerOnPlayerTeam(): any;
declare function Core_IsPlayersTableEntryValid(player: PlayerID): any;
declare function Core_IsTeamEliminated(teams_table: Team): any;
declare function Core_IsTeamsEntryIndexValid(index: Integer): any;
declare function Core_OnGameOver(): any;
declare function Core_RegisterModule(name: String): any;
declare function Core_RemovePlayerFromPlayersTable(player: PlayerID): any;
declare function Core_RevealFOWOnEliminationEnabled(): any;
declare function Core_SetDefaultDefeatPresentation(presentationTable: Table): any;
declare function Core_SetDefaultVictoriousPresentation(presentationFunction: function1): any;
declare function Core_SetMutualPlayerRelationship(player1: PlayerID, player2: PlayerID, relationship: Integer): any;
declare function Core_SetMutualRelationship(playerteams_table: PlayerIDTable, playerteams_table2: PlayerIDTable, relationship: Relationship): any;
declare function Core_SetPlayerDefeated(player: PlayerID, presentationFunction: function1, reason: winReason): any;
declare function Core_SetPlayerVictorious(player: PlayerID, presentationFunction: function1, reason: winReason): any;
declare function Core_SetTeamDefeated(teams_table: Team, presentationTable: Table): any;
declare function Core_SetTeamVictorious(teams_table: Team, presentationFunction: function1, reason: winReason): any;
declare function Core_UnregisterModule(name: String): any;
declare function Core_WinnerlessGameOver(presentationFunction: function1, reason: winReason): any;
declare function Event_Delay(seconds: Real): any;
declare function Event_IsBeingSkipped(): any;
declare function Event_Skip(): any;
declare function Event_Start(eventFunction: LuaFunction, int: Integer): any;
declare function Event_StartEx(eventFunction: LuaFunction, int: Integer, onComplete: LuaFunction): any;
declare function Scar_AddInit(f: LuaFunction): any;
declare function Scar_InitComplete(): any;
declare function Scar_InitExists(f: LuaFunction): any;
declare function Scar_RemoveInit(f: LuaFunction): any;
declare function _idleBehaviour_stop(data: TABLE): any;
declare function _IntelDebugNext(): any;
declare function _IntelDebugPrev(): any;
declare function _IntelDebugReplay(): any;
declare function Game_DefaultGameRestore(): any;
declare function Game_GetGameRestoreCallbackExists(callback: Function): any;
declare function Game_RemoveGameRestoreCallback(callback: Function): any;
declare function Game_SetGameRestoreCallback(callback: Function): any;
declare function Util_EnterCinematicMode(OPT_VisibilityFlagEnums: GameUICore, OPT_ofGameUICoreVisibilityFlagenumstohideincinematicmodePassinanemptytableorniltonothideanygamecomponentsPassintheconstantDEFAULT_CINEMATIC_HIDDEN_GAME_COMPONENT_FLAGSforadefaultsetofgamecomponentstohide: List, skipNISCallback: Function): any;
declare function Util_ExitCinematicMode(): any;
declare function Util_FullscreenMode(OPT_VisibilityFlagEnums: GameUICore, OPT_ofGameUICoreVisibilityFlagenumstohideinfullscreenmodePassinanemptytableorniltonothideanygamecomponentsPassintheconstantDEFAULT_FULLSCREEN_HIDDEN_GAME_COMPONENT_FLAGSforadefaultsetofgamecomponentstohide: List): any;
declare function Util_GetCommandLineArgument(keyoftheargumentyouwanttoquery: String): any;
declare function Util_IsCinematicMode(): any;
declare function Util_NormalMode(): any;
declare function Util_ReverseList(list_to_reverse: table): any;
declare function Are_Resources_Disabled(): any;
declare function Are_Resources_Disabled(): any;
declare function Debug_ScartypeToString(): any;
declare function Debug_ScartypeToString(): any;
declare function EGroup_SetOnFire(egroup: EGroupID): any;
declare function EGroup_SetStayBurningWhileInvulnerable(egroup: EGroupID, stayBurning: Boolean): any;
declare function Player_GetSquadsOnscreen(player: PLAYER, sgroup: SGroupID): any;
declare function Position_GetAverage(): any;
declare function Resources_Disable(): any;
declare function Resources_Disable(): any;
declare function Resources_Enable(): any;
declare function Resources_Enable(): any;
declare function SGroup_GetClosestSquads(): any;
declare function SGroup_SetTargetingType(): any;
declare function SGroup_Split(sgroup: SGroupID, numNewSGroups: NUMBER): any;
declare function SGroup_SplitIntoExistingSGroups(sourceSGroup: SGroupID, sgroupTable: TABLE, clearSGroups: Boolean): any;
declare function SGroup_SplitUnderCap(sgroup: SGroupID, maxSGroupSize: NUMBER): any;
declare function Table_Contains(OriginalTable: LuaTable, item: Item): any;
declare function Table_Copy(OriginalTable: LuaTable): any;
declare function Table_GetRandomItem(table: Table, OPT_numberofitems: Integer): any;
declare function Table_GetRandomItemWeighted(): any;
declare function Table_MakeReadOnly(table: Table, OPT_recursive: Boolean, OPT_errorMessage: String): any;
declare function EGroup_Add(group: EGroupID, entity: EntityID): any;
declare function EGroup_AddAbility(egroup: EGroupID, ability: Integer): any;
declare function EGroup_AddEGroup(group: EGroupID, grouptoadd: EGroupID): any;
declare function EGroup_CanSeeEGroup(egroup: EGroupID, targetegroup: EGroupID, all: Boolean): any;
declare function EGroup_CanSeeSGroup(egroup: EGroupID, targetsgroup: SGroupID, all: Boolean): any;
declare function EGroup_Clear(egroup: EGroupID): any;
declare function EGroup_Compare(group1: EGroupID, group2: EGroupID): any;
declare function EGroup_ContainsBlueprints(egroup: EGroupID, blueprint: EBPEntityTypeTable, all: Boolean): any;
declare function EGroup_ContainsEGroup(egroup1: EGroupID, egroup2: EGroupID, all: Boolean): any;
declare function EGroup_ContainsEntity(egroup: EGroupID, entity: EntityID): any;
declare function EGroup_Count(egroup: EGroupID): any;
declare function EGroup_CountAlive(egroup: EGroupID): any;
declare function EGroup_CountBlueprints(sgroup: EGroupID, ebp: Integer): any;
declare function EGroup_CountDeSpawned(egroup: EGroupID): any;
declare function EGroup_CountSpawned(egroup: EGroupID): any;
declare function EGroup_Create(name: String): any;
declare function EGroup_CreateIfNotFound(egroupname: String): any;
declare function EGroup_CreateKickerMessage(group: EGroupID, textid: String): any;
declare function EGroup_CreateUnique(OPT_prefix: String): any;
declare function EGroup_CreateUniqueWithPrefix(prefix: String): any;
declare function EGroup_DeSpawn(egroup: EGroupID): any;
declare function EGroup_Destroy(egroup: EGroupID): any;
declare function EGroup_DestroyAllEntities(egroup: EGroupID): any;
declare function EGroup_Duplicate(egroupid1: EGroupID, egroupid2: EGroupID): any;
declare function EGroup_EnableMinimapIndicator(egroup: EGroupID, enable: Boolean): any;
declare function EGroup_EnableUIDecorator(group: SGroupID, enable: Boolean, enableSelection: Boolean): any;
declare function EGroup_Exists(name: String): any;
declare function EGroup_Filter(egroup: EGroupID, blueprinttype: String, filtertype: Integer, OPT_splitGroup?: EGroupID): any;
declare function EGroup_FilterOnScreen(egroup: EGroupID, percent: Real, filtertype: Integer): any;
declare function EGroup_FilterUnderConstruction(egroup: EGroupID, filtertype: Integer): any;
declare function EGroup_ForEach(egroup: EGroupID, f: StackVarFunction): any;
declare function EGroup_ForEachAllOrAny(egroup: EGroupID, all: Boolean, f: StackVarFunction): any;
declare function EGroup_ForEachAllOrAnyEx(egroup: EGroupID, all: Boolean, f: StackVarFunction, spawned: Boolean, despawned: Boolean): any;
declare function EGroup_ForEachEx(egroup: EGroupID, f: StackVarFunction, spawned: Boolean, despawned: Boolean): any;
declare function EGroup_FromName(name: String): any;
declare function EGroup_GetAvgHealth(egroup: EGroupID): any;
declare function EGroup_GetClosestEntity(egroupid: EGroupID, position: MarkerPos): any;
declare function EGroup_GetDeSpawnedEntityAt(group: EGroupID, int: Integer): any;
declare function EGroup_GetEntityAt(group: EGroupID, int: Integer): any;
declare function EGroup_GetInvulnerable(egroup: EGroupID, all: Boolean): any;
declare function EGroup_GetLastAttacker(EGroupVictim: EGroupID, SGroupAttacker: SGroupID): any;
declare function EGroup_GetName(egroup: EGroupID): any;
declare function EGroup_GetOffsetPosition(egroup: EGroupID, offset: Integer, value: Real): any;
declare function EGroup_GetPosition(group: EGroupID): any;
declare function EGroup_GetRandomSpawnedEntity(egroupid: EGroupID): any;
declare function EGroup_GetSequence(name: String): any;
declare function EGroup_GetSpawnedEntityAt(group: EGroupID, int: Integer): any;
declare function EGroup_GetSpawnedEntityFilter(egroupid: EGroupID, condition: function1): any;
declare function EGroup_GetSpread(egroup: EGroupID): any;
declare function EGroup_GetSquadsHeld(egroup: EGroupID, sgroupRecipient: SGroupID): any;
declare function EGroup_GetTotalHealth(egroup: EGroupID): any;
declare function EGroup_HasAbility(egroup: EGroupID, ability: Integer, all: Boolean): any;
declare function EGroup_HasBlueprint(egroup: EGroupID, blueprint: EBPEntityTypeTable, all: Boolean): any;
declare function EGroup_HasUpgrade(egroup: EGroupID, upgrade: UpgradeID, all: Boolean): any;
declare function EGroup_Hide(egroup: EGroupID, hide: Boolean): any;
declare function EGroup_InstantCaptureStrategicPoint(egroup: EGroupID, player: PlayerID): any;
declare function EGroup_InstantRevertOccupiedBuilding(egroup: EGroupID): any;
declare function EGroup_Intersection(group: EGroupID, grouptointersect: EGroupID): any;
declare function EGroup_IsBurning(egroup: EGroupID, ALL: Boolean): any;
declare function EGroup_IsCapturedByPlayer(egroup: EGroupID, playerId: PlayerID, all: Boolean): any;
declare function EGroup_IsCapturedByTeam(egroup: EGroupID, teamId: TeamID, all: Boolean): any;
declare function EGroup_IsDoingAttack(egroup: EGroupID, all: Boolean, time: Real): any;
declare function EGroup_IsEmpty(egroup: EGroupID): any;
declare function EGroup_IsHoldingAny(egroup: EGroupID): any;
declare function EGroup_IsInCover(egroup: EGroupID, all: Boolean): any;
declare function EGroup_IsMoving(egroupid: EGroupID, all: Boolean): any;
declare function EGroup_IsOnScreen(player: PlayerID, group: EGroupID, all: Boolean, OPT_percent: Real): any;
declare function EGroup_IsProducingSquads(egroup: EGroupID, all: Boolean): any;
declare function EGroup_IsSpawned(egroup: EGroupID, ALL: Boolean): any;
declare function EGroup_IsUnderAttack(egroup: EGroupID, all: Boolean, time: Real): any;
declare function EGroup_IsUnderAttackByPlayer(group: EGroupID, attackerplayer: PlayerID, duration: Real): any;
declare function EGroup_IsUnderAttackFromDirection(egroup: EGroupID, all: Boolean, offset: Integer, time: Real): any;
declare function EGroup_IsUsingAbility(egroup: EGroupID, ALL: Boolean): any;
declare function EGroup_IsValid(egroupID: Integer): any;
declare function EGroup_Kill(egroup: EGroupID): any;
declare function EGroup_NotifyOnPlayerDemolition(id: EGroupID, function1: LuaFunction): any;
declare function EGroup_Remove(group: EGroupID, entity: EntityID): any;
declare function EGroup_RemoveDemolitions(egroup: EGroupID): any;
declare function EGroup_RemoveGroup(group: SGroupID, grouptoremove: SGroupID): any;
declare function EGroup_RemoveNonHoldEntities(egroup: EGroupID): any;
declare function EGroup_RemoveUpgrade(egroup: EGroupID, upgrade: Integer): any;
declare function EGroup_ReSpawn(egroup: EGroupID): any;
declare function EGroup_SetAnimatorAction(egroup: EGroupID, actionName: String): any;
declare function EGroup_SetAnimatorEvent(egroup: EGroupID, eventName: String): any;
declare function EGroup_SetAnimatorState(egroup: EGroupID, stateMachineName: String, stateName: String): any;
declare function EGroup_SetAnimatorVariable(egroup: EGroupID, variableName: String, value: Real): any;
declare function EGroup_SetAutoTargetting(group: EGroupID, hardpoint: String, enable: Boolean): any;
declare function EGroup_SetAvgHealth(egroup: EGroupID, healthPercent: Real): any;
declare function EGroup_SetCrushable(egroup: EGroupID, crushable: Boolean): any;
declare function EGroup_SetDemolitions(player: PlayerID, egroupid: EGroupID, OPT_numcharges: Integer): any;
declare function EGroup_SetHealthMinCap(egroup: EGroupID, minhealth: Real): any;
declare function EGroup_SetInvulnerable(egroup: EGroupID, enabled: Boolean, OPT_reset_time: Real): any;
declare function EGroup_SetPlayerOwner(egroup: EGroupID, owner: PlayerID): any;
declare function EGroup_SetRallyPoint(egroup: EGroupID, target: Position): any;
declare function EGroup_SetRecrewable(sgroup: EGroupID, recrewable: Boolean): any;
declare function EGroup_SetSelectable(egroup: EGroupID, selectable: Boolean): any;
declare function EGroup_SetSharedProductionQueue(egroup: EGroupID, enable: Boolean): any;
declare function EGroup_SetStrategicPointNeutral(egroup: EGroupID): any;
declare function EGroup_SetWorldOwned(egroup: EGroupID): any;
declare function EGroup_Single(egroup: EGroupID, entity: entityID): any;
declare function EGroup_SortBasedOnHealth(egroup: EGroupID, ascending: Boolean): any;
declare function EGroup_WarpToMarker(entity: EGroupID, marker: MarkerID): any;
declare function EGroup_WarpToPos(entity: EGroupID, pos: Position): any;
declare function SGroup_GetTotalHealth(sgroup: SGroupID): any;
declare function SGroup_HasEntityUpgrade(egroup: EGroupID, upgrade: UpgradeID, all: Boolean): any;
declare function Ai(sgroup: SGroupID, all: ANYALL): any;
declare function Ai(squad: Squad): any;
declare function AI_DisableAllEncounters(): any;
declare function AI_EnableAllEncounters(): any;
declare function AI_GetActiveEncounters(): any;
declare function AI_GetNumEncounters(): any;
declare function AI_IsMatchingDifficulty(difficultyList: Integer): any;
declare function AI_OverrideDifficulty(level: Integer): any;
declare function AI_RemoveAllEncounters(stopAll: Boolean): any;
declare function AI_SetDebugLevel(): any;
declare function AI_SetDefaultEnemyPlayer(player: PlayerID): any;
declare function AI_ToggleDebugData(): any;
declare function AI_ToggleDebugPrint(): any;
declare function AIAbilityGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIAbilityGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIAbilityGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIAbilityGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIAttackGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIAttackGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIAttackGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIAttackGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIBaseGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIBaseGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIBaseGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIBaseGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIDefendGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIDefendGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIDefendGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIDefendGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIFormationAttackGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIFormationAttackGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIFormationAttackGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIFormationAttackGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIFormationDefendAreaGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIFormationDefendAreaGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIFormationDefendAreaGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIFormationDefendAreaGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AIMoveGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AIMoveGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AIMoveGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AIMoveGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function AITownLifeGoal_AdjustDefaultGoalData(additionalDefaultGoalData: Table): any;
declare function AITownLifeGoal_SetDefaultGoalData(defaultGoalData: Table): any;
declare function AITownLifeGoal_SetModifyGoalData(modifyGoalData: Table): any;
declare function AITownLifeGoal_SetOverrideGoalData(overrideGoalData: Table): any;
declare function Encounter(data: EncounterData, OPT_spawnNow: Boolean, OPT_spawnStaggered: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_encRange: Integer, OPT_encLeash: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_encRange: Integer, OPT_encLeash: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_encRange: Integer, OPT_encLeash: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_encRange: Integer, OPT_encLeash: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encPath: String, OPT_dynamicSpawn: MarkerPos, OPT_pathWait: Integer, OPT_pathLoop: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_moveRange: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_moveRange: Integer): any;
declare function Encounter(name: String, encUnits: SBPTable, spawnLoc: MarkerPos, encTarget: EGroupID, OPT_dynamicSpawn: MarkerPos, OPT_townLifeRange: Integer): any;
declare function Encounter(name: String, spawnLoc: MarkerPos, encUnits: SBPTable, OPT_dynamicSpawn: MarkerPos): any;
declare function Encounter(squadgroup: SGroupID): any;
declare function Encounter(spawnStaggered: Boolean): any;
declare function Encounter(unitData: Table, spawnType: SPAWN): any;
declare function Encounter(goalData: GoalData, triggerGoal: Boolean): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(goalData: GoalData): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function Encounter(includeUnits: Boolean): any;
declare function Encounter(func: ScarFn): any;
declare function Encounter(): any;
declare function Encounter(): any;
declare function EventHandler_RelocateGoal(data: Table): any;
declare function EventHandler_ResetGoalRelocation(data: Table): any;
declare function EventHandler_TriggerEncounterGoal(data: Table): any;
declare function MergeClone(defaultTable: Table, overrideTable: Table): any;
declare function Entity_AddAbility(entity: EntityID, ability: ScarAbilityPBG): any;
declare function Entity_AdjustAbilityCooldown(entity: EntityID, tickAmount: Integer): any;
declare function Entity_BuildCycleList(): any;
declare function Entity_CalculatePassableSpawnPosition(entity: EntityID, pos: Position): any;
declare function Entity_CanAttackNow(attacker: EntityID, target: Position): any;
declare function Entity_CancelProductionQueueItem(entity: EntityID, index: Integer): any;
declare function Entity_CanCurrentlyBeDamaged(entity: EntityID): any;
declare function Entity_CanLoadSquad(entity: EntityID, squad: SquadID, assumeEmpty: Boolean, assumeVisible: Boolean): any;
declare function Entity_CanSeeEntity(entity: EntityID, target: EntityID): any;
declare function Entity_CanSeeSquad(entity: EntityID, target: SquadID): any;
declare function Entity_CanTargetEntity(entity: Entity, target: Entity, checkFOW: Boolean): any;
declare function Entity_ClearPendingDeathFlag(entity: EntityID): any;
declare function Entity_ClearPostureSuggestion(entity: EntityID): any;
declare function Entity_ClearStateModelEnumTableTarget(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_ClearStateModelTarget(entity: EntityID, key: String): any;
declare function Entity_ClearTagDebug(): any;
declare function Entity_CompleteUpgrade(pEntity: EntityID, upgradePBG: ScarUpgradePBG): any;
declare function Entity_ConvertBlueprint(entity: Entity, pbg: PropertyBagGroup): any;
declare function Entity_CycleDebug(): any;
declare function Entity_DeSpawn(entity: EntityID): any;
declare function Entity_Destroy(entity: EntityID): any;
declare function Entity_DisableCancelConstructionCommand(entity: EntityID, disable: Boolean): any;
declare function Entity_DoBurnDamage(entity: EntityID, val: Real, ignoreMaxDamagePerSecond: Boolean): any;
declare function Entity_EnableAttention(entity: EntityID, attentive: Boolean): any;
declare function Entity_EnableProductionQueue(entity: EntityID, enable: Boolean): any;
declare function Entity_EnableStrategicPoint(entity: EntityID, enable: Boolean): any;
declare function Entity_ExtensionCount(): any;
declare function Entity_ExtensionEnabled(pEntity: EntityID, extID: ComponentDependencyIndex): any;
declare function Entity_ExtensionExecuting(pEntity: EntityID, extID: ComponentDependencyIndex): any;
declare function Entity_ExtensionName(pEntity: EntityID, extID: ComponentDependencyIndex): any;
declare function Entity_ForceConstruct(e: EntityID): any;
declare function Entity_ForceSelfConstruct(e: EntityID): any;
declare function Entity_FromID(id: Integer): any;
declare function Entity_GetActiveCommand(entity: EntityID): any;
declare function Entity_GetAttackTarget(entity: EntityID, sgroup: SGroupID): any;
declare function Entity_GetAttackTargetEntity(entity: EntityID): any;
declare function Entity_GetAttackTargetSquad(entity: EntityID): any;
declare function Entity_GetBlueprint(entity: EntityID): any;
declare function Entity_GetBuildingProgress(pEntity: EntityID): any;
declare function Entity_GetCoverValue(entity: EntityID): any;
declare function Entity_GetDebugEntity(): any;
declare function Entity_GetFenceEntityCount(ebp: PropertyBagGroup, startPos: Position, endPos: Position): any;
declare function Entity_GetFilledHoldSquadSlots(entity: EntityID): any;
declare function Entity_GetHeading(entity: EntityID): any;
declare function Entity_GetHealth(entity: EntityID): any;
declare function Entity_GetHealthMax(entity: EntityID): any;
declare function Entity_GetHealthPercentage(entity: EntityID): any;
declare function Entity_GetID(entity: EntityID): any;
declare function Entity_GetInvulnerable(squad: SquadID): any;
declare function Entity_GetInvulnerableMinCap(entity: EntityID): any;
declare function Entity_GetLastAttacker(entity: EntityID, sgroup: SGroupID): any;
declare function Entity_GetLastAttackers(entity: EntityID, group: SGroupID, timeSeconds: Real): any;
declare function Entity_GetLastEntityAttackers(entity: EntityID, group: EGroupID, timeSeconds: Real): any;
declare function Entity_GetMaxCaptureCrewSize(entity: EntityID): any;
declare function Entity_GetMaxHoldSquadSlots(entity: EntityID): any;
declare function Entity_GetMeleeBlocksPerAttacks(entity: Entity): any;
declare function Entity_GetNumInteractors(entity: EntityID, interactionType: String): any;
declare function Entity_GetOffsetPosition(entity: EntityID, offset: Integer, distance: Real): any;
declare function Entity_GetPlayerOwner(entity: EntityID): any;
declare function Entity_GetPosition(entity: EntityID): any;
declare function Entity_GetProductionQueueItem(entity: EntityID, index: Integer): any;
declare function Entity_GetProductionQueueItemType(entity: EntityID, index: Integer): any;
declare function Entity_GetProductionQueueSize(entity: EntityID): any;
declare function Entity_GetProjectileBlocksPerAttacks(entity: Entity): any;
declare function Entity_GetRangedBlocksPerAttacks(entity: Entity): any;
declare function Entity_GetRemainingResourceDepositAmount(entity: EntityID): any;
declare function Entity_GetSightInnerHeight(entity: EntityID): any;
declare function Entity_GetSightInnerRadius(entity: EntityID): any;
declare function Entity_GetSightOuterHeight(entity: EntityID): any;
declare function Entity_GetSightOuterRadius(entity: EntityID): any;
declare function Entity_GetSquad(pEntity: EntityID): any;
declare function Entity_GetSquadsHeld(pEntity: EntityID, sgroup: SGroupID): any;
declare function Entity_GetStateModelBool(entity: EntityID, key: String): any;
declare function Entity_GetStateModelEntityTarget(entity: EntityID, key: String): any;
declare function Entity_GetStateModelEnumTableBool(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTableEntityTarget(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTableFloat(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTableInt(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTablePlayerTarget(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTableSquadTarget(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelEnumTableVector3f(entity: EntityID, key: String, tableRowIndex: Integer): any;
declare function Entity_GetStateModelFloat(entity: EntityID, key: String): any;
declare function Entity_GetStateModelInt(entity: EntityID, key: String): any;
declare function Entity_GetStateModelPlayerTarget(entity: EntityID, key: String): any;
declare function Entity_GetStateModelSquadTarget(entity: EntityID, key: String): any;
declare function Entity_GetStateModelVector3f(entity: EntityID, key: String): any;
declare function Entity_GetStateTreeTargeting_EntityTarget(entity: Entity, type: String, key: String): any;
declare function Entity_GetStateTreeTargeting_PlayerTarget(entity: Entity, type: String, key: String): any;
declare function Entity_GetStateTreeTargeting_SquadTarget(entity: Entity, type: String, key: String): any;
declare function Entity_GetStateTreeTargeting_Vector3f(entity: Entity, type: String, key: String): any;
declare function Entity_GetStrategicPointSecureCount(entity: EntityID): any;
declare function Entity_GetTargetingType(entity: Entity): any;
declare function Entity_GetWeaponBlueprint(entity: EntityID, hardPointIndex: Integer): any;
declare function Entity_GetWeaponHardpointCount(entity: EntityID): any;
declare function Entity_HandleAllAsserts(): any;
declare function Entity_HasAbility(entity: EntityID, ability: ScarAbilityPBG): any;
declare function Entity_HasBlueprint(entity: EntityID, blueprints: EBPEntityTypeTable): any;
declare function Entity_HasProductionQueue(entity: EntityID): any;
declare function Entity_HasUpgrade(pEntity: EntityID, upgradePBG: ScarUpgradePBG): any;
declare function Entity_InstantCaptureStrategicPoint(entity: EntityID, player: PlayerID): any;
declare function Entity_InstantConvertBuildingToFieldSupport(building: EntityID, owner: PlayerID): any;
declare function Entity_InstantRevertOccupiedBuilding(entity: EntityID): any;
declare function Entity_IsAbilityActive(entity: EntityID, pbg: ScarAbilityPBG): any;
declare function Entity_IsActive(pEntity: EntityID): any;
declare function Entity_IsAlive(pEntity: EntityID): any;
declare function Entity_IsAttacking(entity: EntityID, time: Real): any;
declare function Entity_IsBuilding(e: EntityID): any;
declare function Entity_IsBurnable(e: EntityID): any;
declare function Entity_IsBurning(e: EntityID): any;
declare function Entity_IsCamouflaged(entity: EntityID): any;
declare function Entity_IsCapturableBuilding(entity: EntityID): any;
declare function Entity_IsCasualty(entity: EntityID): any;
declare function Entity_IsCuttable(entity: EntityID): any;
declare function Entity_IsDemolitionReady(entity: EntityID): any;
declare function Entity_IsDoingAbility(entity: EntityID, pbg: ScarAbilityPBG): any;
declare function Entity_IsEBPBuilding(ebp: ScarEntityPBG): any;
declare function Entity_IsEBPObjCover(ebp: ScarEntityPBG): any;
declare function Entity_IsEBPOfType(ebp: ScarEntityPBG, type: String): any;
declare function Entity_IsHardpointActive(entity: EntityID, hardPointIndex: Integer): any;
declare function Entity_IsHoldingAny(entity: EntityID): any;
declare function Entity_IsInBackground(pEntity: EntityID): any;
declare function Entity_IsInCover(entityId: EntityID): any;
declare function Entity_IsInfantry(pEntity: EntityID): any;
declare function Entity_IsInvulnerable(entity: EntityID): any;
declare function Entity_IsMoving(pEntity: EntityID): any;
declare function Entity_IsOfType(entity: EntityID, type: String): any;
declare function Entity_IsOnWalkableWall(entity: EntityID): any;
declare function Entity_IsPartOfSquad(pEntity: EntityID): any;
declare function Entity_IsPlane(pEntity: EntityID): any;
declare function Entity_IsPlannedStructure(entity: EntityID): any;
declare function Entity_IsProducingSquad(entity: EntityID, pbg: ScarSquadPBG): any;
declare function Entity_IsProductionQueueAvailable(entity: EntityID): any;
declare function Entity_IsResourceGenerator(entity: EntityID): any;
declare function Entity_IsSlotItem(entity: EntityID): any;
declare function Entity_IsSpawned(entity: EntityID): any;
declare function Entity_IsStartingPosition(entity: EntityID): any;
declare function Entity_IsStrategicPoint(pEntity: EntityID): any;
declare function Entity_IsStrategicPointCapturedBy(entity: EntityID, player: PlayerID): any;
declare function Entity_IsSyncWeapon(entity: EntityID): any;
declare function Entity_IsUnderAttack(entity: EntityID, time: Real): any;
declare function Entity_IsUnderAttackByPlayer(entity: EntityID, pAttackerOwner: PlayerID, time: Real): any;
declare function Entity_IsUnderAttackFromDirection(entity: EntityID, offset: Integer, timeSeconds: Real): any;
declare function Entity_IsUnderRepair(entity: EntityID): any;
declare function Entity_IsValid(id: Integer): any;
declare function Entity_IsVaultable(pEntity: EntityID): any;
declare function Entity_IsVehicle(pEntity: EntityID): any;
declare function Entity_IsVictoryPoint(pEntity: EntityID): any;
declare function Entity_Kill(entity: EntityID): any;
declare function Entity_NotifyOnPlayerDemolition(entity: Entity, function1: LuaFunction): any;
declare function Entity_Population(entity: EntityID, type: CapType): any;
declare function Entity_RagDoll(entity: EntityID): any;
declare function Entity_RemoveAbility(entity: EntityID, ability: ScarAbilityPBG): any;
declare function Entity_RemoveBoobyTraps(pEntityTarget: EntityID): any;
declare function Entity_RemoveDemolitions(entity: EntityID): any;
declare function Entity_RemoveUpgrade(entity: EntityID, upgrade: ScarUpgradePBG): any;
declare function Entity_RequiresSlottedSplineUpdateAfterBlueprintConversion(entity: EntityID): any;
declare function Entity_ResetMeleeBlocksPerAttacks(entity: Entity): any;
declare function Entity_ResetProjectileBlocksPerAttacks(entity: Entity): any;
declare function Entity_ResetRangedBlocksPerAttacks(entity: Entity): any;
declare function Entity_RestoreTargetingType(entity: Entity): any;
declare function Entity_SetAnimatorAction(pEntity: EntityID, actionName: String): any;
declare function Entity_SetAnimatorActionParameter(pEntity: EntityID, actionParameterName: String, actionParameterValue: String): any;
declare function Entity_SetAnimatorEvent(pEntity: EntityID, eventName: String): any;
declare function Entity_SetAnimatorState(pEntity: EntityID, stateMachineName: String, stateName: String): any;
declare function Entity_SetAnimatorVariable(pEntity: EntityID, variableName: String, value: Real): any;
declare function Entity_SetBackground(pEntity: EntityID, isInBackground: Boolean): any;
declare function Entity_SetBurnExtEnabled(unit: EGroupID, enabled: Boolean): any;
declare function Entity_SetCrushable(entity: EntityID, crushable: Boolean): any;
declare function Entity_SetCrushMode(entity: EntityID, mode: CrushMode): any;
declare function Entity_SetDemolitions(player: PlayerID, entity: EntityID, numcharges: Integer): any;
declare function Entity_SetEnableCasualty(enable: Boolean, entity: EntityID): any;
declare function Entity_SetExtEnabled(entity: EntityID, extID: String, enabled: Boolean): any;
declare function Entity_SetHeading(entity: EntityID, pos: Position, bInterpolate: Boolean): any;
declare function Entity_SetHeadingGroundSnapOptional(entity: EntityID, pos: Position, bSnapToGround: Boolean, bInterpolate: Boolean): any;
declare function Entity_SetHealth(entity: EntityID, healthPercent: Real): any;
declare function Entity_SetInvulnerable(entity: EntityID, enable: Boolean, reset_time: Real): any;
declare function Entity_SetInvulnerableMinCap(entity: EntityID, minHealthPercentage: Real, resetTime: Real): any;
declare function Entity_SetMeleeBlocksPerAttacks(entity: Entity, blocks: Integer, attacks: Integer): any;
declare function Entity_SetOnFire(entity: EntityID): any;
declare function Entity_SetPlayerOwner(entity: EntityID, owner: PlayerID): any;
declare function Entity_SetPosition(entity: EntityID, pos: Position): any;
declare function Entity_SetPositionWithinCell(entity: EntityID, desiredPosition: Position): any;
declare function Entity_SetProjectileBlocksPerAttacks(entity: Entity, blocks: Integer, attacks: Integer): any;
declare function Entity_SetProjectileCanExplode(projectile: EntityID, canExplode: Boolean): any;
declare function Entity_SetRangedBlocksPerAttacks(entity: Entity, blocks: Integer, attacks: Integer): any;
declare function Entity_SetRecrewable(entity: EntityID, capturable: Boolean): any;
declare function Entity_SetRemainingResourceDepositAmount(entity: EntityID, amount: Real): any;
declare function Entity_SetSharedProductionQueue(entity: EntityID, shared: Boolean): any;
declare function Entity_SetShowSilhouette(entity: EntityID, show: Boolean): any;
declare function Entity_SetStateModelBool(entity: EntityID, key: String, value: Boolean): any;
declare function Entity_SetStateModelEntityTarget(entity: EntityID, key: String, value: EntityID): any;
declare function Entity_SetStateModelEnumTableBool(entity: EntityID, key: String, tableRowIndex: Integer, value: Boolean): any;
declare function Entity_SetStateModelEnumTableEntityTarget(entity: EntityID, key: String, tableRowIndex: Integer, value: EntityID): any;
declare function Entity_SetStateModelEnumTableFloat(entity: EntityID, key: String, tableRowIndex: Integer, value: Real): any;
declare function Entity_SetStateModelEnumTableInt(entity: EntityID, key: String, tableRowIndex: Integer, value: Integer): any;
declare function Entity_SetStateModelEnumTablePlayerTarget(entity: EntityID, key: String, tableRowIndex: Integer, value: PlayerID): any;
declare function Entity_SetStateModelEnumTableSquadTarget(entity: EntityID, key: String, tableRowIndex: Integer, value: SquadID): any;
declare function Entity_SetStateModelEnumTableVector3f(entity: EntityID, key: String, tableRowIndex: Integer, value: Position): any;
declare function Entity_SetStateModelFloat(entity: EntityID, key: String, value: Real): any;
declare function Entity_SetStateModelInt(entity: EntityID, key: String, value: Integer): any;
declare function Entity_SetStateModelPlayerTarget(entity: EntityID, key: String, value: PlayerID): any;
declare function Entity_SetStateModelSquadTarget(entity: EntityID, key: String, value: SquadID): any;
declare function Entity_SetStateModelVector3f(entity: EntityID, key: String, value: Position): any;
declare function Entity_SetStayBurningWhileInvulnerable(entity: EntityID, shouldStayBurning: Boolean): any;
declare function Entity_SetStrategicPointNeutral(entity: EntityID): any;
declare function Entity_SetStrategicPointReticuleVisible(entity: EntityID, visible: Boolean): any;
declare function Entity_SetTargetingType(entity: Entity, type: TargetingType): any;
declare function Entity_SetWorldOwned(entity: EntityID): any;
declare function Entity_SimHide(entity: EntityID, hide: Boolean): any;
declare function Entity_SnapToGridAndGround(entity: EntityID, interpolate: Boolean): any;
declare function Entity_Spawn(entity: EntityID): any;
declare function Entity_SpawnDoNotAddPathfindingAndCollision(entity: EntityID): any;
declare function Entity_SpawnToward(entity: EntityID, pos: Position, toward: Position, spawnType: String): any;
declare function Entity_StopAbility(entity: EntityID, ability: ScarAbilityPBG, bIsEarlyExit: Boolean): any;
declare function Entity_StopFire(entity: EntityID): any;
declare function Entity_SuggestPosture(entity: EntityID, posture: Integer, duration: Real): any;
declare function Entity_SupportsDemolition(entity: EntityID): any;
declare function Entity_TagDebug(entity: EntityID): any;
declare function Entity_VisHide(pEntity: EntityID, bHide: Boolean): any;
declare function Entity_WarpToPos(entity: EntityID, pos: Position): any;
declare function Misc_DoesPositionHaveAssociatedDistrict(pos: Position): any;
declare function Misc_DoWeaponHitEffectOnPosition(pos: Position, weaponPBG: ScarWeaponPBG, penetrated: Boolean): any;
declare function Misc_FindDepositsCloseToSquad(group: EGroupID, squad: SquadID, searchRange: Real): any;
declare function Misc_FindDepositsOfTypeCloseToPosition(resourceType: ResourceType, gathererEBP: EBP, position: Position, searchRange: Number): any;
declare function Misc_GetDistrictGeneratorFromPosition(pos: Position): any;
declare function Misc_GetDistrictValueFromPosition(pos: Position): any;
declare function Misc_UpdateSlottedSplinesContainingEGroupAfterBlueprintConversion(egroup: EGroupID): any;
declare function Event_CreateAND(callback: Function, data: Table, events: Table, delay: Real): any;
declare function Event_Death(callback: Function, group: EGroupID, selection: ALL_UNITSANY_MEMBERANY_SQUAD, repeat: Boolean, requireAllEntitiesDead: Boolean, data: Table): any;
declare function Event_EncounterCanSeePlayerSquads(callback: Function, data: Table, encounter: SGroupID, player: PlayerID, delay: Real): any;
declare function Event_EnterProximity(callback: Function, data: Table, target: ConstTargetHandle, arequireAll: Boolean, location: Marker, range: REAL, repeat: Boolean, triggerOnEnter: Boolean): any;
declare function Event_ExitProximity(callback: Function, data: Table, target: ConstTargetHandle, arequireAll: Boolean, location: Marker, range: REAL, repeat: Boolean, triggerOnEnter: Boolean): any;
declare function Event_GroupCount(callback: Function, data: Table, SGroupgroup: EGroupID, amount: Integer): any;
declare function Event_GroupIsDeadOrRetreating(callback: Function, data: Table, SGroupgroup: EGroupID, delay: Real): any;
declare function Event_GroupLeftAlive(callback: Function, data: Table, SGroupgroup: EGroupID, amount: Integer, delay: Real): any;
declare function Event_IsEngaged(callback: Function, data: Table, attackTime: Real, delay: Real): any;
declare function Event_IsOutOfCombat(callback: Function, data: Table, SGroupgroup: EGroupID, attackTime: Real, delay: Real): any;
declare function Event_IsSelected(callback: Function, data: Table): any;
declare function Event_IsUnderAttack(callback: Function, data: Table, SGroup: SGroupID, EGroup: EGroupID, attackTime: Real, player: PlayerID, delay: Real): any;
declare function Event_PlayerCanSeeElement(callback: Function, data: Table, team: PlayerID, element: SGroupID): any;
declare function Event_Proximity(callback: Function, data: Table, target: ConstTargetHandle, location: Marker, range: REAL, delay: Real): any;
declare function Event_SGroupCountMember(callback: Function, data: Table, group: SGroupID, amount: Integer): any;
declare function Event_WhileInProximity(callback: Function, data: Table, target: ConstTargetHandle, arequireAll: Boolean, location: Marker, range: REAL, repeat: Boolean, triggerOnEnter: Boolean): any;
declare function FOW_ExploreAll(): any;
declare function FOW_ForceRevealAllUnblockedAreas(): any;
declare function FOW_PlayerExploreAll(player: PlayerID): any;
declare function FOW_PlayerRevealAll(player: PlayerID): any;
declare function FOW_PlayerRevealArea(player: PlayerID, pos: Position, radius: Real, durationSecs: Real): any;
declare function FOW_PlayerRevealSGroup(player: PlayerID, group: SGroupID, radius: Real, durationSecs: Real): any;
declare function FOW_PlayerUnExploreAll(player: PlayerID): any;
declare function FOW_PlayerUnRevealAll(player: PlayerID): any;
declare function FOW_PlayerUnRevealArea(player: PlayerID, pos: Position): any;
declare function FOW_PlayerUnRevealSGroup(player: PlayerID, group: SGroupID): any;
declare function FOW_RevealAll(): any;
declare function FOW_RevealArea(pos: Position, radius: Real, durationSecs: Real): any;
declare function FOW_RevealEGroup(group: EGroupID, radius: Real, durationSecs: Real): any;
declare function FOW_RevealEGroupOnly(group: EGroupID, durationSeconds: Real): any;
declare function FOW_RevealEntity(entity: EntityID, radius: Real, durationSecs: Real): any;
declare function FOW_RevealMarker(marker: MarkerID, duration: Real): any;
declare function FOW_RevealSGroup(group: SGroupID, radius: Real, durationSecs: Real): any;
declare function FOW_RevealSGroupOnly(group: SGroupID, durationSeconds: Real): any;
declare function FOW_RevealSquad(squad: SquadID, radius: Real, durationSecs: Real): any;
declare function FOW_RevealTerritory(player: PlayerID, sectorID: Integer, durationSecs: Real, mustOwn: Boolean): any;
declare function FOW_UIRevealAll(): any;
declare function FOW_UIRevealAll_Transition(duration: Real): any;
declare function FOW_UIRevealAllEntities(): any;
declare function FOW_UIUnRevealAll(): any;
declare function FOW_UIUnRevealAll_Transition(duration: Real): any;
declare function FOW_UIUnRevealAllEntities(): any;
declare function FOW_UndoForceRevealAllUnblockedAreas(): any;
declare function FOW_UnExploreAll(): any;
declare function FOW_UnRevealAll(): any;
declare function FOW_UnRevealArea(pos: Position): any;
declare function FOW_UnRevealMarker(marker: MarkerID): any;
declare function FOW_UnRevealTerritory(player: PlayerID, sectorID: Integer): any;
declare function EGroup_CreateTable(format: String, size: Integer): any;
declare function EGroup_GetWBTable(format: String): any;
declare function Marker_GetNonSequentialTable(format: String, size: Integer): any;
declare function Marker_GetTable(format: String): any;
declare function SGroup_CreateTable(format: String, size: Integer): any;
declare function SGroup_GetWBTable(format: String): any;
declare function AllMarkersFromName(name: String, type: String): any;
declare function Marker_GetSequence(name: String, type: String): any;
declare function MarkerCountFromName(name: String, type: String): any;
declare function Mission_Complete(): any;
declare function Mission_Fail(): any;
declare function Modifier_IsEnabledOnEGroup(egroup: EGroupID, modifier: String, modtype: String, all: Boolean, bEnabledByDefault: Boolean): any;
declare function Modifier_Remove(modifier: modids): any;
declare function Modifier_RemoveAllFromEGroup(egroup: EGroupID): any;
declare function Modifier_RemoveAllFromSGroup(sgroup: SGroupID): any;
declare function Modify_AbilityCastTime(player: PlayerID, ability: AbilityID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_AbilityChannelingTime(player: PlayerID, ability: AbilityID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_AbilityDelayTime(player: PlayerID, ability: AbilityID, scalefactor: Real): any;
declare function Modify_AbilityDurationTime(player: PlayerID, ability: AbilityID, scalefactor: Real): any;
declare function Modify_AbilityManpowerCost(player: PlayerID, ability: AbilityID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_AbilityMaxCastRange(player: PlayerID, ability: AbilityID, scalefactor: Real): any;
declare function Modify_AbilityMinCastRange(player: PlayerID, ability: AbilityID, scalefactor: Real): any;
declare function Modify_AbilityMunitionsCost(player: PlayerID, ability: AbilityID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_AbilityRechargeTime(playerentitysquad: PlayerIDEntityIDSquadID, ability: AbilityID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_Armor(group: EGroupID, scalefactor: Real, OPT_exclusive: Boolean): any;
declare function Modify_CaptureTime(egroup: EGroupID, scalefactor: Real): any;
declare function Modify_CoverCaptureTime(egroup: EGroupID, scalefactor: Real): any;
declare function Modify_DisableHold(group: EGroupID, disable: Boolean): any;
declare function Modify_EnableCamoflage(group: EGroupID, disable: Boolean): any;
declare function Modify_EntityBuildTime(playerId: PlayerID, ebp: String, scalefactor: Real): any;
declare function Modify_EntityConstructionRate(group: EGroupID, Factor: Integer, Usage: MUT): any;
declare function Modify_EntityCost(player: PlayerID, blueprint: String, resourcetype: Integer, addition: Integer): any;
declare function Modify_EntityHealthRegen(group: EGroupID, Factor: Integer, Usage: MUT): any;
declare function Modify_EntityMaxHealth(group: EGroupID, Factor: Integer, Usage: MUT): any;
declare function Modify_EntitySelectionName(group: EGroupID, value: Integer, Usage: MUT): any;
declare function Modify_PlayerExperienceReceived(player: PlayerID, factor: Real): any;
declare function Modify_PlayerProductionRate(sgroup: PlayerID, scalefactor: Real): any;
declare function Modify_PlayerResourceCap(playerId: PlayerID, resourceType: Integer, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_PlayerResourceRate(playerId: PlayerID, resourceType: Integer, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_PlayerSightRadius(player: PlayerID, scalefactor: Real): any;
declare function Modify_PlayerUpkeep(playerId: PlayerID, resourceType: Integer, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_ProductionRate(sgroup: EGroupID, scalefactor: Real): any;
declare function Modify_ProductionSpeed(entity: Entity, scalefactor: Real): any;
declare function Modify_ProjectileDelayTime(player: PlayerID, entityBP: PBG, factor: Real): any;
declare function Modify_ReceivedAccuracy(group: EGroupID, scalefactor: Real, OPT_exclusive: Boolean): any;
declare function Modify_ReceivedDamage(group: EGroupID, scalefactor: Real, OPT_exclusive: Boolean): any;
declare function Modify_ReceivedSuppression(sgroup: SGroupID, scalefactor: Real): any;
declare function Modify_SetUpgradeCost(playerId: PlayerID, upgrade: UpgradeID, resourceType: Integer, newCost: Real): any;
declare function Modify_SightRadius(group: EGroupID, scalefactor: Real): any;
declare function Modify_SquadAvailability(player: PlayerID, blueprint: String, addition: Integer): any;
declare function Modify_SquadCaptureRate(group: SGroupID, scalefactor: Real): any;
declare function Modify_SquadCost(player: PlayerID, blueprint: String, resourcetype: Integer, addition: Integer): any;
declare function Modify_SquadHealthRegen(group: SGroupID, Factor: Integer, Usage: MUT): any;
declare function Modify_SquadInvulnerableToKnockback(group: SGroupID, disable: Boolean): any;
declare function Modify_SquadMaxHealth(group: SGroupID, Factor: Integer, Usage: MUT): any;
declare function Modify_SquadTypeSightRadius(player: PlayerID, blueprint: String, scalefactor: Real): any;
declare function Modify_TargetPriority(group: EGroupID, addition: Integer): any;
declare function Modify_TeamWeapon(group: EGroupID, modifier: String, scalefactor: Real, OPT_hardpoint: String): any;
declare function Modify_TerritoryRadius(group: EGroupID, scalefactor: Real): any;
declare function Modify_UnitSpeed(sgroup: SGroupID, scalefactor: Real): any;
declare function Modify_UnitVeterancyValue(group: EGroupID, scalefactor: Real, OPT_mathtype: Integer): any;
declare function Modify_UpgradeBuildTime(playerId: PlayerID, upgrade: UpgradeID, scalefactor: Real): any;
declare function Modify_VehicleRepairRate(player: PlayerID, factor: Real, engineer_entity_blueprint: String): any;
declare function Modify_VehicleRotationSpeed(group: EGroupID, factor: Real): any;
declare function Modify_VehicleTurretRotationSpeed(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_Vulnerability(group: EGroupID, scalefactor: Real): any;
declare function Modify_WeaponAccuracy(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponBurstLength(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponBurstRateOfFire(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponCooldown(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponDamage(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponEnabled(group: EGroupID, hardpoint: String, enabled: Boolean): any;
declare function Modify_WeaponPenetration(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponRange(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponReload(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponScatter(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Modify_WeaponSuppression(group: EGroupID, hardpoint: String, scalefactor: Real): any;
declare function Music_GetDefaultMovement(): any;
declare function Music_GetMusicEventIntensityLevel(musicevent: String): any;
declare function Music_LockIntensity(level: Real, OPT_duration: Real): any;
declare function Music_Outro_End(): any;
declare function Music_PlayDefaultMovement(): any;
declare function Music_PlayMovement(movement: String): any;
declare function Music_PlayStinger(Stinger: String): any;
declare function Music_PostCombat_End(): any;
declare function Music_RestartAfterObjective(duration: Real): any;
declare function Music_SetDefaultMovement(newMovement: String): any;
declare function Music_SetIntensityAfterObjective(delay: Real, level: Integer, duration: Real): any;
declare function Music_Stop(): any;
declare function Music_StopAfterObjective(delay: Real): any;
declare function Music_UnlockIntensity(): any;
declare function NIS_CameraCheckpoint(): any;
declare function NIS_END(OPT_details: Table): any;
declare function NIS_FadeCameraCut(): any;
declare function NIS_PREAMBLE(details: Table): any;
declare function NIS_START(OPT_details: Table): any;
declare function NIS_StartDrift(OPT_totalTime: Real, OPT_driftScale: Real): any;
declare function NIS_StopDrift(): any;
declare function NIS_StoreCurrentCameraPos(): any;
declare function Objective_AddAreaHighlight(objTable: LuaTable, pos: MarkerPositionGroup, OPT_areatype: AreaType, OPT_scale: Real, OPT_color: Table, OPT_alpha: Real): any;
declare function Objective_AddAreaHighlight(objTable: LuaTable, pos: MarkerPositionGroup, OPT_areatype: AreaType, OPT_scale: Real, OPT_color: Table, OPT_alpha: Real): any;
declare function Objective_AddGroundReticule(): any;
declare function Objective_AddGroundReticule(objTable: LuaTable, position: MarkerPos, OPT_size: Real, OPT_reticuleBlueprint: BP, OPT_hintpointTemplate: String): any;
declare function Objective_AddHealthBar(objTable: LuaTable, barIndex: Integer, group: EGroupID, name: String, OPT_onlyWhenDamaged: Boolean): any;
declare function Objective_AddHealthBar(objTable: LuaTable, group: EGroupID, OPT_onlyWhenDamaged: Boolean, OPT_barIndex: Integer, OPT_text: String): any;
declare function Objective_AddPing(objectiveTable: LuaTable, pos: Position): any;
declare function Objective_AddPing(objectiveTable: LuaTable, pos: Position): any;
declare function Objective_AddTimerBar(objTable: LuaTable, barIndex: Integer, text: String): any;
declare function Objective_AddTimerBar(objTable: LuaTable, OPT_barIndex: Integer, OPT_text: String): any;
declare function Objective_AddUIElements(objTable: LuaTable, pos: Position, OPT_ping: Boolean, OPT_hintpointText: String, OPT_worldArrow: Boolean, OPT_objectiveArrowOffset: Real, OPT_objectiveArrowFacing: EntitySquadPosition, OPT_actionType: Integer, OPT_iconName: String, OPT_iconName2: String): any;
declare function Objective_AddUIElements(objTable: LuaTable, pos: Position, OPT_ping: Boolean, OPT_hintpointText: String, OPT_worldArrow: Boolean, OPT_objectiveArrowOffset: Real, OPT_objectiveArrowFacing: EntitySquadPosition, OPT_actionType: Integer, OPT_iconName: String, OPT_templateName: String): any;
declare function Objective_AreAllPrimaryObjectivesComplete(): any;
declare function Objective_AreAllPrimaryObjectivesComplete(): any;
declare function Objective_AreSubObjectivesComplete(objTable: LuaTable, all: Boolean): any;
declare function Objective_AreSubObjectivesComplete(objTable: LuaTable, all: Boolean): any;
declare function Objective_AreSubObjectivesExpired(objTable: LuaTable, all: Boolean): any;
declare function Objective_AreSubObjectivesFailed(objTable: LuaTable, all: Boolean): any;
declare function Objective_AreSubObjectivesFailed(objTable: LuaTable, all: Boolean): any;
declare function Objective_BlinkUIElements(objTable: LuaTable, elementID: Integer): any;
declare function Objective_BlinkUIElements(objTable: LuaTable, elementID: Integer): any;
declare function Objective_Complete(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_Complete(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_Expire(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_Fail(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_Fail(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_GetCounter(objTable: LuaTable): any;
declare function Objective_GetCounter(objTable: LuaTable): any;
declare function Objective_GetSubObjectives(objTable: LuaTable): any;
declare function Objective_GetSubObjectives(objTable: LuaTable): any;
declare function Objective_GetTimerSeconds(objTable: LuaTable): any;
declare function Objective_GetTimerSeconds(objTable: LuaTable): any;
declare function Objective_IncreaseCounter(objTable: LuaTable, OPT_amount: Integer): any;
declare function Objective_IncreaseCounter(objTable: LuaTable, OPT_amount: Integer): any;
declare function Objective_IsComplete(objTable: LuaTable): any;
declare function Objective_IsComplete(objTable: LuaTable): any;
declare function Objective_IsCounterSet(objTable: LuaTable): any;
declare function Objective_IsCounterSet(objTable: LuaTable): any;
declare function Objective_IsExpired(objTable: LuaTable): any;
declare function Objective_IsFailed(objTable: LuaTable): any;
declare function Objective_IsFailed(objTable: LuaTable): any;
declare function Objective_IsStarted(objTable: LuaTable): any;
declare function Objective_IsStarted(objTable: LuaTable): any;
declare function Objective_IsTimerSet(objTable: LuaTable): any;
declare function Objective_IsTimerSet(objTable: LuaTable): any;
declare function Objective_IsVisible(objTable: LuaTable): any;
declare function Objective_IsVisible(objTable: LuaTable): any;
declare function Objective_PauseTimer(objTable: LuaTable): any;
declare function Objective_PauseTimer(objTable: LuaTable): any;
declare function Objective_Register(objTable: LuaTable, OPT_owner: PlayerIDTeamID): any;
declare function Objective_Register(objTable: LuaTable, OPT_owner: PlayerIDTeamID): any;
declare function Objective_RemoveGroundReticule(): any;
declare function Objective_RemoveGroundReticule(): any;
declare function Objective_RemoveHealthBar(objectiveTable: LuaTable, healthBarID: Element): any;
declare function Objective_RemoveHealthBar(objectiveTable: LuaTable, healthBarID: Element): any;
declare function Objective_RemovePing(objectiveTable: LuaTable, PingID: Integer): any;
declare function Objective_RemovePing(objectiveTable: LuaTable, PingID: Integer): any;
declare function Objective_RemoveProgressBar(objTable: LuaTable): any;
declare function Objective_RemoveTimerBar(objectiveTable: LuaTable, timerBarID: Element): any;
declare function Objective_RemoveTimerBar(objectiveTable: LuaTable, timerBarID: Element): any;
declare function Objective_RemoveUIElements(objTable: LuaTable, elementID: Integer): any;
declare function Objective_RemoveUIElements(objTable: LuaTable, elementID: Integer): any;
declare function Objective_ResumeTimer(objTable: LuaTable): any;
declare function Objective_ResumeTimer(objTable: LuaTable): any;
declare function Objective_SetAlwaysShowDetails(objTable: LuaTable, title: Boolean, hud_arrow: Boolean, hintpoints: Boolean): any;
declare function Objective_SetAlwaysShowDetails(objTable: LuaTable, title: Boolean, hud_arrow: Boolean, hintpoints: Boolean): any;
declare function Objective_SetCounter(objTable: LuaTable, current: Real, OPT_maximum: Real): any;
declare function Objective_SetCounter(objTable: LuaTable, current: Real, OPT_maximum: Real): any;
declare function Objective_SetProgressBar(objTable: LuaTable, value: Real, OPT_flashing: Boolean, OPT_barIndex: Integer, OPT_text: String): any;
declare function Objective_Show(objective_table: LuaTable, onoff: Boolean, ShowTitle: Boolean): any;
declare function Objective_Show(objective_table: LuaTable, onoff: Boolean, ShowTitle: Boolean): any;
declare function Objective_Start(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_Start(objTable: LuaTable, OPT_showTitle: Boolean, OPT_playIntel: Boolean): any;
declare function Objective_StartTimer(objTable: LuaTable, direction: Integer, OPT_initialTime: Real, OPT_flashThreshold: Real): any;
declare function Objective_StartTimer(objTable: LuaTable, direction: Integer, OPT_initialTime: Real, OPT_flashThreshold: Real): any;
declare function Objective_Stop(objTable: LuaTable): any;
declare function Objective_Stop(objTable: LuaTable): any;
declare function Objective_StopCounter(objTable: LuaTable): any;
declare function Objective_StopCounter(objTable: LuaTable): any;
declare function Objective_StopTimer(objTable: LuaTable): any;
declare function Objective_StopTimer(objTable: LuaTable): any;
declare function Objective_TogglePings(objective_table: LuaTable, onoff: Boolean): any;
declare function Objective_TogglePings(objective_table: LuaTable, onoff: Boolean): any;
declare function Objective_TriggerTitleCard(): any;
declare function Objective_TriggerTitleCard(): any;
declare function Objective_UpdateText(objTable: LuaTable, new_title: String, new_description: String, OPT_showTitle: Boolean, OPT_immediate: Boolean): any;
declare function Objective_UpdateText(objTable: LuaTable, new_title: String, new_description: String, OPT_showTitle: Boolean, OPT_immediate: Boolean): any;
declare function Player_AddAbility(player: Player, pAbilityPBG: ScarAbilityPBG): any;
declare function Player_AddAbilityLockoutZone(player: Player, abilityPBG: ScarAbilityPBG, marker: MarkerID): any;
declare function Player_AddResource(playerId: PlayerID, resourceType: Integer, value: Real): any;
declare function Player_AddResources(playerId: PlayerID, resources: Table): any;
declare function Player_AddSquadsToSGroup(playerId: PlayerID, squadgroupName: String): any;
declare function Player_AddUnspentCommandPoints(player: Player, points: Real): any;
declare function Player_AreSquadsNearMarker(playerid: PlayerID, marker: MarkerID): any;
declare function Player_CanCastAbilityOnEntity(player: PlayerID, abilityPBG: ScarAbilityPBG, targetEntity: EntityID): any;
declare function Player_CanCastAbilityOnPlayer(player: PlayerID, abilityPBG: ScarAbilityPBG, targetPlayer: PlayerID): any;
declare function Player_CanCastAbilityOnPosition(player: PlayerID, abilityPBG: ScarAbilityPBG, targetPosition: Position): any;
declare function Player_CanCastAbilityOnSquad(player: PlayerID, abilityPBG: ScarAbilityPBG, targetSquad: SquadID): any;
declare function Player_CanConstruct(player: PlayerID, pbg: PropertyBagGroup): any;
declare function Player_CanConstructOnPosition(player: PlayerID, sgroupid: SGroupID, ebp: Entity, targetid: EGroupID, OPT_Facing: Position): any;
declare function Player_CanPlaceStructureOnPosition(player: PlayerID, sgroup: SGroupID, ebp: ScarEntityPBG, position: Position, facing: Position): any;
declare function Player_CanSeeEGroup(playerid: PlayerID, egroup: EGroupID, all: Boolean): any;
declare function Player_CanSeeEntity(player: PlayerID, entity: EntityID): any;
declare function Player_CanSeePosition(player: PlayerID, pos: Position): any;
declare function Player_CanSeeSGroup(playerid: PlayerID, sgroup: SGroupID, all: Boolean): any;
declare function Player_CanSeeSquad(player: PlayerID, squad: SquadID, all: Boolean): any;
declare function Player_ClearArea(player: PlayerID, marker: MarkerID, invulnerable: Boolean): any;
declare function Player_ClearAvailabilities(player: Player): any;
declare function Player_ClearPopCapOverride(player: Player): any;
declare function Player_ClearStateModelEnumTableTarget(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_ClearStateModelTarget(player: Player, key: String): any;
declare function Player_CompleteUpgrade(pPlayer: Player, pUpgradePBG: ScarUpgradePBG): any;
declare function Player_FindFirstEnemyPlayer(player: PlayerID): any;
declare function Player_FindFirstNeutralPlayer(player: PlayerID): any;
declare function Player_FromId(id: Integer): any;
declare function Player_GetAbilityBPCost(pPlayer: PlayerID, pbg: PropertyBagGroup): any;
declare function Player_GetAIType(player: Player): any;
declare function Player_GetAll(player: PlayerID, OPT_sgroup: SGroupID, OPT_egroup: EGroupID): any;
declare function Player_GetAllEntities(player: Player): any;
declare function Player_GetAllEntitiesFromType(player: PlayerID, unitType: String): any;
declare function Player_GetAllEntitiesNearMarker(playerid: PlayerID, egroup: EGroupID, position: MarkerIDPosSectorID, OPT_range: Real): any;
declare function Player_GetAllSquadsNearMarker(player: PlayerID, sgroup: SGroupID, position: MarkerIDPosSectorID, OPT_range: Real): any;
declare function Player_GetBuildingID(player: PlayerID, entitytypesunit_types: Integer): any;
declare function Player_GetBuildingsCount(playerId: PlayerID): any;
declare function Player_GetBuildingsCountExcept(playerId: PlayerID, exceptions: Integer): any;
declare function Player_GetBuildingsCountOnly(playerId: PlayerID, ebplist: Integer): any;
declare function Player_GetBuildingUnderConstructionID(player: PlayerID, entitytypesunit_types: Integer): any;
declare function Player_GetCurrentPopulation(player: Player, capType: CapType): any;
declare function Player_GetDisplayName(player: Player): any;
declare function Player_GetEntities(player: Player): any;
declare function Player_GetEntitiesEGroup(player: Player, group: EGroupID): any;
declare function Player_GetEntitiesFromType(player: PlayerID, unitType: String): any;
declare function Player_GetEntityBPCost(player: PlayerID, pbg: PropertyBagGroup): any;
declare function Player_GetEntityConcentration(player: PlayerID, OPT_popcapOnly: Boolean, OPT_includeBlueprints: Table, OPT_excludeBlueprints: Table, OPT_bLeastConcentrated: Boolean, OPT_onlyInThisMarker: MarkerIDTable): any;
declare function Player_GetEntityCount(player: Player): any;
declare function Player_GetEntityCountByUnitType(player: Player, unitTypeString: String): any;
declare function Player_GetEntityName(player: Player, index: Integer): any;
declare function Player_GetID(player: Player): any;
declare function Player_GetMaxPopulation(player: Player, capType: CapType): any;
declare function Player_GetNumGatheringSquads(player: Player, type: Integer): any;
declare function Player_GetNumStrategicPoints(p: Player): any;
declare function Player_GetNumVictoryPoints(p: Player): any;
declare function Player_GetPopulationPercentage(playerid: PlayerID, OPT_captype: Integer): any;
declare function Player_GetRace(player: Player): any;
declare function Player_GetRaceName(player: Player): any;
declare function Player_GetRelationship(player1: PlayerID, player2: PlayerID): any;
declare function Player_GetResource(player: Player, type: Integer): any;
declare function Player_GetResourceRate(player: Player, type: Integer): any;
declare function Player_GetResources(player: Player): any;
declare function Player_GetSlotIndex(player: Player): any;
declare function Player_GetSquadBPCost(pPlayer: PlayerID, pbg: PropertyBagGroup): any;
declare function Player_GetSquadConcentration(player: PlayerID, OPT_popcapOnly: Boolean, OPT_includeBlueprints: Table, OPT_excludeBlueprints: Table, OPT_bLeastConcentrated: Boolean, OPT_onlyInThisMarker: MarkerIDTable): any;
declare function Player_GetSquadCount(player: Player): any;
declare function Player_GetSquads(player: Player): any;
declare function Player_GetSquadsFromType(player: PlayerID, unitType: String): any;
declare function Player_GetStartingPosition(player: Player): any;
declare function Player_GetStateModelBool(player: Player, key: String): any;
declare function Player_GetStateModelEntityTarget(player: Player, key: String): any;
declare function Player_GetStateModelEnumTableBool(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTableEntityTarget(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTableFloat(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTableInt(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTablePlayerTarget(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTableSquadTarget(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelEnumTableVector3f(player: Player, key: String, tableRowIndex: Integer): any;
declare function Player_GetStateModelFloat(player: Player, key: String): any;
declare function Player_GetStateModelInt(player: Player, key: String): any;
declare function Player_GetStateModelPlayerTarget(player: Player, key: String): any;
declare function Player_GetStateModelSquadTarget(player: Player, key: String): any;
declare function Player_GetStateModelVector3f(player: Player, key: String): any;
declare function Player_GetStrategicPointCaptureProgress(player: PlayerID, strategicPoint: EntityID): any;
declare function Player_GetTeam(p: Player): any;
declare function Player_GetTotalPopulation(player: Player): any;
declare function Player_GetUIColour(player: Player): any;
declare function Player_GetUnitCount(player: Player): any;
declare function Player_GetUpgradeBPCost(player: PlayerID, upgradePBG: ScarUpgradePBG): any;
declare function Player_GetUpgradeBPCostByResource(player: PlayerID, upgradePBG: ScarUpgradePBG, type: Integer): any;
declare function Player_GiftResource(player: Player, type: Integer, amount: Real): any;
declare function Player_HasAbility(player: Player, pAbilityPBG: ScarAbilityPBG): any;
declare function Player_HasBuilding(player: PlayerID, entitytypesunit_types: Integer): any;
declare function Player_HasBuildingsExcept(playerId: PlayerID, exceptionsunit_types: Integer): any;
declare function Player_HasBuildingUnderConstruction(player: PlayerID, entitytypesunit_types: Integer): any;
declare function Player_HasCapturingSquadNearStrategicPoint(player: PlayerID, strategicPoint: EntityID): any;
declare function Player_HasEntity(player: Player, entity: ScarEntityPBG): any;
declare function Player_HasMapEntryPosition(player: PlayerID): any;
declare function Player_HasUpgrade(pPlayer: PlayerID, upgradePBG: ScarUpgradePBG): any;
declare function Player_IsAbilityActive(player: Player, abilityPBG: ScarAbilityPBG): any;
declare function Player_IsAlive(player: Player): any;
declare function Player_IsAllied(playerId1: PlayerID, playerId2: PlayerID): any;
declare function Player_IsHuman(player: Player): any;
declare function Player_IsSurrendered(player: Player): any;
declare function Player_IsValid(id: Integer): any;
declare function Player_NumUpgradeComplete(player: Player, upgradePBG: ScarUpgradePBG): any;
declare function Player_ObserveRelationship(observer: PlayerID, target: PlayerID): any;
declare function Player_ObserveReputation(observer: PlayerID, target: PlayerID): any;
declare function Player_OwnsEGroup(player: Player, egroup: EGroupID, OPT_all: Boolean): any;
declare function Player_OwnsEntity(playerid: PlayerID, entity: EntityID): any;
declare function Player_OwnsSGroup(player: Player, sgroup: SGroupID, OPT_all: Boolean): any;
declare function Player_OwnsSquad(playerid: PlayerID, squad: SquadID): any;
declare function Player_RemoveAbilityLockoutZone(player: Player, abilityPBG: ScarAbilityPBG, marker: MarkerID): any;
declare function Player_RemoveAllUpgrades(player: Player): any;
declare function Player_RemoveUpgrade(player: Player, upgrade: ScarUpgradePBG): any;
declare function Player_ResetAbilityCooldowns(player: Player, ability: ScarAbilityPBG): any;
declare function Player_ResetResource(player: Player, type: Integer): any;
declare function Player_RestrictAddOnList(playerid: PlayerID, addonlist: Table): any;
declare function Player_RestrictBuildingList(playerid: PlayerID, blueprintlist: Table): any;
declare function Player_RestrictResearchList(playerid: Player, list: String): any;
declare function Player_SetAbilityAvailability(player: PlayerID, bp: Integer, availability: Integer): any;
declare function Player_SetAllCommandAvailabilityInternal(player: Player, availability: Availability, reason: String): any;
declare function Player_SetCommandAvailability(player: PlayerID, command: Integer, availability: Integer): any;
declare function Player_SetConstructionMenuAvailability(player: PlayerID, menuname: String, availability: Integer): any;
declare function Player_SetDefaultSquadMoodMode(player: Player, mood: SquadCombatBehaviourMoodMode): any;
declare function Player_SetEntityProductionAvailability(player: PlayerID, bp: Integer, availability: Integer): any;
declare function Player_SetMaxCapPopulation(playerid: PlayerID, captype: Integer, newcap: Integer): any;
declare function Player_SetMaxPopulation(playerid: PlayerID, captype: Integer, newcap: Integer): any;
declare function Player_SetPopCapOverride(player: Player, personnel: Real): any;
declare function Player_SetRelationship(observer: PlayerID, target: PlayerID, relationship: Relation): any;
declare function Player_SetReputation(observer: PlayerID, target: PlayerID, reputation: BaseType): any;
declare function Player_SetResource(player: Player, type: Integer, amt: Real): any;
declare function Player_SetResourceInternal(player: Player, type: Integer, amt: Real, reason: AddResourceReason): any;
declare function Player_SetResources(player: Player, resourceAmount: ResourceAmount): any;
declare function Player_SetSquadProductionAvailability(player: PlayerID, bp: Integer, availability: Integer): any;
declare function Player_SetStateModelBool(player: Player, key: String, value: Boolean): any;
declare function Player_SetStateModelEntityTarget(player: Player, key: String, value: EntityID): any;
declare function Player_SetStateModelEnumTableBool(player: Player, key: String, tableRowIndex: Integer, value: Boolean): any;
declare function Player_SetStateModelEnumTableEntityTarget(player: Player, key: String, tableRowIndex: Integer, value: EntityID): any;
declare function Player_SetStateModelEnumTableFloat(player: Player, key: String, tableRowIndex: Integer, value: Real): any;
declare function Player_SetStateModelEnumTableInt(player: Player, key: String, tableRowIndex: Integer, value: Integer): any;
declare function Player_SetStateModelEnumTablePlayerTarget(player: Player, key: String, tableRowIndex: Integer, value: PlayerID): any;
declare function Player_SetStateModelEnumTableSquadTarget(player: Player, key: String, tableRowIndex: Integer, value: SquadID): any;
declare function Player_SetStateModelEnumTableVector3f(player: Player, key: String, tableRowIndex: Integer, value: Position): any;
declare function Player_SetStateModelFloat(player: Player, key: String, value: Real): any;
declare function Player_SetStateModelInt(player: Player, key: String, value: Integer): any;
declare function Player_SetStateModelPlayerTarget(player: Player, key: String, value: PlayerID): any;
declare function Player_SetStateModelSquadTarget(player: Player, key: String, value: SquadID): any;
declare function Player_SetStateModelVector3f(player: Player, key: String, value: Position): any;
declare function Player_SetUpgradeAvailability(player: PlayerID, bp: Integer, availability: Integer): any;
declare function Player_StopAbility(player: PlayerID, ability: ScarAbilityPBG, bIsEarlyExit: Boolean): any;
declare function Player_StopEarningActionPoints(player: PlayerID): any;
declare function Team_GetRelationship(team1: Integer, team2: Integer): any;
declare function CheatMenu_RegisterCheatFunction(cheat_function: Function, title: String): any;
declare function Prefab_ApplyDefaults(instance_data: String, prefab_schema: Table): any;
declare function Prefab_DoAction(instance_data: String, actionName: String, OPT_param1: Var, OPT_param2: Var): any;
declare function Prefab_ForcePostInit(): any;
declare function Prefab_GetAllOfType(instance_data: String, prefab_schema: Table): any;
declare function Prefab_GetInstance(instance: String): any;
declare function Prefab_Init(instance_data: Table): any;
declare function Prefab_IsValid(instance: String): any;
declare function Prefab_Reset(instance_data: String): any;
declare function Prefab_Stop(instance_data: String): any;
declare function Prefab_Trigger(instance_data: String): any;
declare function PrefabHelper_StandardTriggerSystem(instance_data: String, action_name: String, trigger_parameters: Table): any;
declare function canseetrigger_GetTriggerCount(instance: String): any;
declare function canseetrigger_Trigger(instance: String): any;
declare function healthtrigger_Activate(instance: String): any;
declare function healthtrigger_Trigger(instance: String): any;
declare function pcanseetrigger_Activate(instance: String): any;
declare function playertrigger_Activate(instance: String): any;
declare function playertrigger_GetTriggerCount(instance: String): any;
declare function playertrigger_Trigger(instance: String): any;
declare function Actor_PlaySpeech(actor: ActorTable, locID: Integer, OPT_speechbubble: SGroupID, OPT_audioCtrlEvent: String): any;
declare function Actor_PlaySpeechWithoutPortrait(actor: ActorTable, locID: Integer, OPT_speechbubble: SGroupID, OPT_audioCtrlEvent: String): any;
declare function Prox_AreEntitiesNearMarker(egroup: EGroupID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real): any;
declare function Prox_ArePlayerEntitiesNearMarker(player: PlayerID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real, OPT_filterlist: EBPTable, OPT_filtertype: Integer, OPT_ignore_camouflage: Boolean): any;
declare function Prox_ArePlayerMembersNearMarker(player: PlayerID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real, OPT_filterlist: SBPTable, OPT_filtertype: Integer, OPT_ignore_camouflage: Boolean): any;
declare function Prox_ArePlayersNearMarker(player: PlayerID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real, OPT_filterlist: SBPTable, OPT_filtertype: Integer, OPT_ignore_camouflage: Boolean): any;
declare function Prox_AreSquadMembersNearMarker(sgroup: SGroupID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real): any;
declare function Prox_AreSquadsNearMarker(sgroup: SGroupID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real): any;
declare function Prox_AreTeamsNearMarker(team: TeamID, position: MarkerIDPositionSectorID, all: Boolean, OPT_range: Real, OPT_filterlist: SBPTable, OPT_filtertype: Integer, OPT_ignore_camouflage: Boolean): any;
declare function Prox_EGroupEGroup(egroup1: EGroupID, egroup2: EGroupID, checktype: ProxType): any;
declare function Prox_EGroupSGroup(egroup1: EGroupID, sgroup2: SGroupID, checktype: ProxType): any;
declare function Prox_EntitiesInProximityOfEntities(egroup1: EGroupID, egroup2: EGroupID, proximity: Real, all: Boolean): any;
declare function Prox_GetRandomPosition(item: Object, radius: Integer, minimum: Integer): any;
declare function Prox_MarkerEGroup(marker: MarkerID, egroup: EGroupID, checktype: ProxType): any;
declare function Prox_MarkerSGroup(marker: MarkerID, sgroup: SGroupID, checktype: ProxType): any;
declare function Prox_PlayerEntitiesInProximityOfEntities(playerid: PlayerID, egroup: EGroupID, proximity: Real, all: Boolean, exclude: EntityID): any;
declare function Prox_PlayerEntitiesInProximityOfPlayerSquads(playerentities: PlayerID, playersquads: PlayerID, proximity: Real, all: Boolean): any;
declare function Prox_PlayerEntitiesInProximityOfSquads(playerid: PlayerID, sgroup: SGroupID, proximity: Real, all: Boolean): any;
declare function Prox_PlayerSquadsInProximityOfEntities(playerid: PlayerID, egroup: EGroupID, proximity: Real, all: Boolean, filterlist: SBPTable, filtertype: Integer, ignore_camouflage: Boolean): any;
declare function Prox_PlayerSquadsInProximityOfPlayerEntities(playersquads: PlayerID, playerentities: PlayerID, proximity: Real, all: Boolean): any;
declare function Prox_PlayerSquadsInProximityOfPlayerSquads(playerid1: PlayerID, playerid2: PlayerID, proximity: Real, all: Boolean): any;
declare function Prox_PlayerSquadsInProximityOfSquads(playerid: PlayerID, sgroup: SGroupID, proximity: Real, all: Boolean, exclude: SquadID, filterlist: SBPTable, filtertype: Integer, ignore_camouflage: Boolean): any;
declare function Prox_SGroupSGroup(sgroup1: SGroupID, sgroup2: SGroupID, checktype: ProxType): any;
declare function Prox_SquadsInProximityOfEntities(sgroup: SGroupID, egroup: EGroupID, proximity: Real, all: Boolean): any;
declare function Prox_SquadsInProximityOfSquads(sgroup1: SGroupID, sgroup2: SGroupID, proximity: Real, all: Boolean): any;
declare function Decal_Create(decalName: String, position: Position, xScale: Real, yScale: Real, zScale: Real, rotationDegrees: Real, r: Integer, g: Integer, b: Integer, a: Integer): any;
declare function Decal_Destroy(decalID: Integer): any;
declare function Decal_GetInvalidID(): any;
declare function Entity_Precache(ebp: ScarEntityPBG, skinItemDefinitionID: Integer, player: PlayerID, resourceContainerCacheName: String, source: String, id: String): any;
declare function ResourceContainer_ClearCache(cacheName: String): any;
declare function ResourceContainer_CreateCache(cacheName: String, cacheSize: Integer): any;
declare function ResourceContainer_LogRefs(): any;
declare function Splat_Create(splatName: String, position: Position, xScale: Real, zScale: Real, rotationDegrees: Real, r: Integer, g: Integer, b: Integer, a: Integer, mirrorX: Boolean, mirrorZ: Boolean): any;
declare function Splat_Destroy(handle: TerrainSplatObject): any;
declare function Splat_GetInvalidID(): any;
declare function Squad_Precache(sbp: ScarSquadPBG, skinItemDefinitionID: Integer, player: PlayerID, resourceContainerCacheName: String, source: String, id: String): any;
declare function Terrain_LoadHeightMap(): any;
declare function Terrain_SaveHeightMap(): any;
declare function TerrainHighlight_Hide(): any;
declare function TerrainHighlight_Show(metadataLayerName: String, opacity: Real): any;
declare function Rule_Add(f: LuaFunction, OPT_data: Table, OPT_group: EGroupID): any;
declare function Rule_AddEGroupEvent(rule: LuaFunction, egroup: EGroupID, eventtype: Integer): any;
declare function Rule_AddEntityEvent(rule: LuaFunction, entity: EntityID, eventtype: Integer): any;
declare function Rule_AddGlobalEvent(rule: LuaFunction, eventtype: Integer): any;
declare function Rule_AddInterval(f: LuaFunction, interval: RealTable, OPT_data?: Table, OPT_group?: EGroupID): any;
declare function Rule_AddOneShot(rule: LuaFunction, OPT_delay: Real, OPT_data?: Table, OPT_group?: EGroupID): any;
declare function Rule_AddPlayerEvent(rule: LuaFunction, player: PlayerID, eventtype: Integer): any;
declare function Rule_AddSGroupEvent(rule: LuaFunction, sgroup: SGroupID, eventtype: Integer): any;
declare function Rule_AddSquadEvent(rule: LuaFunction, squad: SquadID, eventtype: Integer): any;
declare function Rule_ChangeInterval(rule: LuaFunction, interval: Real): any;
declare function Rule_ChangeIntervalWithID(id: Integer, interval: Real): any;
declare function Rule_EnterProximity(f: Function, all: Boolean, who: EGroupID, where: Marker, OPT_range: Integer, OPT_recur: Boolean, OPT_data: Table): any;
declare function Rule_Exists(rule: LuaFunction): any;
declare function Rule_ExistsWithID(id: Integer): any;
declare function Rule_ExitProximity(f: Function, all: Boolean, who: EGroupID, where: Marker, OPT_range: Integer, OPT_recur: Boolean, OPT_data: Table): any;
declare function Rule_GroupCount(f: Function, group: EGroupID, comparison: Comparison, value: Integer, recur: Boolean, data: Table): any;
declare function Rule_Pause(f: LuaFunction): any;
declare function Rule_PauseAll(TablegroupsToIgnore: Number): any;
declare function Rule_PauseWithID(id: Integer): any;
declare function Rule_Refresh(): any;
declare function Rule_Remove(rule: LuaFunction): any;
declare function Rule_RemoveAll(): any;
declare function Rule_RemoveEGroupEvent(rule: LuaFunction, egroup: EGroupID): any;
declare function Rule_RemoveEntityEvent(rule: LuaFunction, entity: EntityID): any;
declare function Rule_RemoveGlobalEvent(rule: LuaFunction): any;
declare function Rule_RemoveMe(): any;
declare function Rule_RemovePlayerEvent(rule: LuaFunction, player: PlayerID): any;
declare function Rule_RemoveSGroupEvent(rule: LuaFunction, sgroup: SGroupID): any;
declare function Rule_RemoveSquadEvent(rule: LuaFunction, squad: SquadID): any;
declare function Rule_RemoveWithID(id: Integer): any;
declare function Rule_Replace(oldf: LuaFunction, newf: LuaFunction): any;
declare function Rule_ReplaceWithID(id: Integer, newf: LuaFunction): any;
declare function Rule_Unpause(f: LuaFunction): any;
declare function Rule_UnpauseAll(): any;
declare function Rule_UnpauseWithID(id: Integer): any;
declare function Rule_WhileInProximity(f: Function, all: Boolean, who: EGroupID, where: Marker, OPT_range: Integer, OPT_interval: Real, OPT_recur: Boolean, OPT_data: Table): any;
declare function Cmd_StopSquadsExcept(sgroup1: SGroupID, OPT_stopCapture: Boolean, OPT_stopBuild: Boolean): any;
declare function EGroup_CompleteUpgrade(egroup: EGroupID, upgrade: Integer): any;
declare function EGroup_FilterCamouflaged(sgroup: EGroupID, filtertype: Integer, OPT_splitEGroup: EGroupID): any;
declare function EGroup_RestoreTargetingType(egroup: EGroupID): any;
declare function EGroup_SetBurnExtEnabled(egroup: EGroupID, enabled: Boolean): any;
declare function EGroup_SetTargetingType(egroup: EGroupID, targetingType: TargetingType): any;
declare function Misc_IsEGroupOnScreen(group: EGroupID, percent: Real, all: Boolean): any;
declare function Misc_IsSGroupOnScreen(group: SGroupID, percent: Real, all: Boolean): any;
declare function SGroup_Add(group: SGroupID, squadron: SquadID): any;
declare function SGroup_AddAbility(sgroup: SGroupID, ability: Integer): any;
declare function SGroup_AddGroup(group: SGroupID, grouptoadd: SGroupID): any;
declare function SGroup_AddGroups(sgroup: SGroupID, groupList: Table): any;
declare function SGroup_AddLeaders(sgroup: SGroupID): any;
declare function SGroup_AddResource(sgroup: SGroupID, resource: ResourceType, amount: Integer): any;
declare function SGroup_AddSlotItemToDropOnDeath(groupid: SGroupID, itemid: Integer, drop_chance: Real, exclusive: Boolean): any;
declare function SGroup_CanCastAbilityOnEntity(caster: SGroupID, ability: Integer, target_entity: EntityID, all: Boolean): any;
declare function SGroup_CanCastAbilityOnPosition(caster: SGroupID, ability: Integer, position: Position, all: Boolean): any;
declare function SGroup_CanCastAbilityOnSquad(caster: SGroupID, ability: Integer, target_squad: SquadID, all: Boolean): any;
declare function SGroup_CanInstantReinforceNow(group: SGroupID, all: Boolean): any;
declare function SGroup_CanSeeEGroup(sgroup: SGroupID, targetegroup: EGroupID, all: Boolean): any;
declare function SGroup_CanSeeSGroup(sgroup: SGroupID, targetsgroup: SGroupID, all: Boolean): any;
declare function SGroup_Clear(sgroup: SGroupID): any;
declare function SGroup_ClearPostureSuggestion(sgroup: SGroupID): any;
declare function SGroup_Compare(group1: SGroupID, group2: SGroupID): any;
declare function SGroup_CompleteEntityUpgrade(sgroup: SGroupID, upgrade: UpgradeID): any;
declare function SGroup_CompleteUpgrade(sgroup: SGroupID, upgrade: Integer): any;
declare function SGroup_ContainsBlueprints(sgroup: SGroupID, blueprints: BPTable, all: Boolean): any;
declare function SGroup_ContainsSGroup(group1: SGroupID, group2: SGroupID, all: Boolean): any;
declare function SGroup_ContainsSquad(group: SGroupID, SquadID: Integer, includeDespawned: Boolean): any;
declare function SGroup_Count(sgroup: SGroupID): any;
declare function SGroup_CountAlliedSquads(group: SGroupID, player: PlayerID): any;
declare function SGroup_CountBlueprints(sgroup: SGroupID, sbp: String): any;
declare function SGroup_CountDeSpawned(sgroup: SGroupID): any;
declare function SGroup_CountEnemySquads(group: SGroupID, player: PlayerID): any;
declare function SGroup_CountPopulation(sgroup: SGroupID): any;
declare function SGroup_CountSpawned(sgroup: SGroupID): any;
declare function SGroup_Create(name: String): any;
declare function SGroup_CreateIfNotFound(name: String): any;
declare function SGroup_CreateKickerMessage(group: SGroupID, player: PlayerID, textid: String): any;
declare function SGroup_CreateUnique(OPT_prefix: String): any;
declare function SGroup_CreateUniqueWithPrefix(prefix: String): any;
declare function SGroup_DeSpawn(groupid: SGroupID): any;
declare function SGroup_Destroy(sgroup: SGroupID): any;
declare function SGroup_DestroyAllInMarker(sgroup: SGroupID, marker: MarkerID): any;
declare function SGroup_DestroyAllSquads(sgroup: SGroupID): any;
declare function SGroup_DisableCombatPlans(groupID: SGroupID): any;
declare function SGroup_Duplicate(sgroup1: SGroupID, sgroup2: SGroupID): any;
declare function SGroup_EnableAttention(sgroup: SGroupID, attentive: Boolean): any;
declare function SGroup_EnableMinimapIndicator(group: SGroupID, enable: Boolean): any;
declare function SGroup_EnableSurprise(groupid: SGroupID, enable: Boolean): any;
declare function SGroup_EnableUIDecorator(group: SGroupID, enable: Boolean): any;
declare function SGroup_Exists(name: String): any;
declare function SGroup_FaceEachOther(sgroup1: SGroupID, sgroup2: SGroupID): any;
declare function SGroup_FaceMarker(sgroup: SGroupID, marker: MarkerID): any;
declare function SGroup_Filter(sgroup: SGroupID, blueprint: SBPSquadTypeTable, filtertype: Integer, OPT_splitSGroup: SGroupID): any;
declare function SGroup_FilterByProximity(sgroup: SGroupID, position: Pos, filtertype: Integer, OPT_OPT_range: Real, OPT_OPT_splitSGroup: SGroupID): any;
declare function SGroup_FilterCamouflaged(sgroup: SGroupID, filtertype: Integer, OPT_splitSGroup: SGroupID): any;
declare function SGroup_FilterCount(sgroup1: SGroupID, groupSize: Integer, OPT_splitSGroup: SGroupID): any;
declare function SGroup_FilterOnScreen(egroup: SGroupID, percent: Real, filtertype: Integer): any;
declare function SGroup_FilterSpawned(sgroup: SGroupID, filtertype: Integer, OPT_splitSGroup: SGroupID): any;
declare function SGroup_FilterThreat(sgroup: SGroupID, tableSBPs: LuaTable, OPT_bEmpty: Boolean): any;
declare function SGroup_ForEach(sgroup: SGroupID, f: StackVarFunction): any;
declare function SGroup_ForEachAllOrAny(sgroup: SGroupID, all: Boolean, f: StackVarFunction): any;
declare function SGroup_ForEachAllOrAnyEx(sgroup: SGroupID, all: Boolean, f: StackVarFunction, spawned: Boolean, despawned: Boolean): any;
declare function SGroup_ForEachEx(sgroup: SGroupID, f: StackVarFunction, spawned: Boolean, despawned: Boolean): any;
declare function SGroup_FromName(name: String): any;
declare function SGroup_GetAvgHealth(sgroup: SGroupID): any;
declare function SGroup_GetAvgHealthPercentageWithShields(sgroup: SGroupID, includeBonuses: Boolean): any;
declare function SGroup_GetAvgLoadout(sgroup: SGroupID): any;
declare function SGroup_GetAvgShieldPercentage(sgroup: SGroupID): any;
declare function SGroup_GetClosestSquad(sgroupid: SGroupID, position: MarkerPos): any;
declare function SGroup_GetDeSpawnedSquadAt(group: SGroupID, int: Integer): any;
declare function SGroup_GetGarrisonedBuildingEntity(groupid: SGroupID): any;
declare function SGroup_GetHoldEGroup(sgroup: SGroupID, EGroupHold: EGroupID): any;
declare function SGroup_GetHoldSGroup(sgroup: SGroupID, SGroupHold: SGroupID): any;
declare function SGroup_GetInvulnerable(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_GetLastAttacker(SGroupVictim: SGroupID, SGroupAttacker: SGroupID, OPT_seconds: Real): any;
declare function SGroup_GetLoadedVehicleSquad(groupid: SGroupID): any;
declare function SGroup_GetName(sgroup: SGroupID): any;
declare function SGroup_GetNumSlotItem(group: SGroupID, itemID: Integer): any;
declare function SGroup_GetOffsetPosition(sgroup: SGroupID, offset: Integer, value: Real): any;
declare function SGroup_GetPosition(group: SGroupID): any;
declare function SGroup_GetRandomSpawnedSquad(sgroupid: SGroupID): any;
declare function SGroup_GetResource(sgroup: SGroupID, resource: ResourceType): any;
declare function SGroup_GetSequence(name: String): any;
declare function SGroup_GetSpawnedSquadAt(group: SGroupID, int: Integer): any;
declare function SGroup_GetSpread(sgroup: SGroupID): any;
declare function SGroup_GetSquadAt(group: SGroupID, int: Integer): any;
declare function SGroup_GetSquadsHeld(sgroup: SGroupID, sgroupRecipient: SGroupID): any;
declare function SGroup_GetSuppression(groupid: SGroupID): any;
declare function SGroup_GetVeterancyExperience(groupid: SGroupID): any;
declare function SGroup_GetVeterancyRank(groupid: SGroupID): any;
declare function SGroup_HasAbility(sgroup: SGroupID, ability: Integer, all: Boolean): any;
declare function SGroup_HasLeader(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_HasSquadBlueprint(sgroup: SGroupID, blueprint: SBPSquadTypeTable, all: Boolean): any;
declare function SGroup_HasTeamWeapon(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_HasUpgrade(sgroup: SGroupID, upgrade: UpgradeID, all: Boolean): any;
declare function SGroup_Hide(sgroup: SGroupID, hide: Boolean): any;
declare function SGroup_IncreaseVeterancyExperience(groupid: SGroupID, experience: Real, OPT_silent: Boolean, OPT_applyModifiers: Boolean): any;
declare function SGroup_IncreaseVeterancyRank(groupid: SGroupID, OPT_numranks: Integer, OPT_silent: Boolean): any;
declare function SGroup_Intersection(group: SGroupID, grouptointersect: SGroupID): any;
declare function SGroup_IsAlive(sgroup: SGroupID): any;
declare function SGroup_IsAttackMoving(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsCamouflaged(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsCapturing(sgroup: SGroupID, ALL: Boolean): any;
declare function SGroup_IsConstructingBuilding(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsDoingAbility(sgroupid: SGroupID, ability: AbilityID, all: Boolean): any;
declare function SGroup_IsDoingAttack(sgroup: SGroupID, all: Boolean, time: Real): any;
declare function SGroup_IsDugIn(group: SGroupID, all: Boolean): any;
declare function SGroup_IsEmpty(sgroup: SGroupID): any;
declare function SGroup_IsFemale(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsHoldingAny(sgroup: SGroupID): any;
declare function SGroup_IsIdle(sgroup: SGroupID, ALL: Boolean): any;
declare function SGroup_IsInCover(sgroup: SGroupID, OPT_all: Boolean): any;
declare function SGroup_IsInfiltrated(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsInHoldEntity(sgroup: SGroupID, ALL: Boolean): any;
declare function SGroup_IsInHoldSquad(sgroup: SGroupID, ALL: Boolean): any;
declare function SGroup_IsMoving(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsOnScreen(player: PlayerID, group: SGroupID, all: Boolean, OPT_percent: Real): any;
declare function SGroup_IsPinned(group: SGroupID, all: Boolean): any;
declare function SGroup_IsReinforcing(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsRetreating(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsSettingDemolitions(sgroup: SGroupID, all: Boolean): any;
declare function SGroup_IsSuppressed(group: SGroupID, all: Boolean): any;
declare function SGroup_IsUnderAttack(sgroup: SGroupID, all: Boolean, time: Real): any;
declare function SGroup_IsUnderAttackByPlayer(group: SGroupID, attackerplayer: PlayerID, duration: Real): any;
declare function SGroup_IsUnderAttackFromDirection(sgroup: SGroupID, all: Boolean, offset: Integer, time: Real): any;
declare function SGroup_IsUpgrading(sgroup: SGroupID, blueprint: Integer, all: Boolean): any;
declare function SGroup_IsUsingAbility(sgroup: SGroupID, ALL: Boolean): any;
declare function SGroup_IsValid(sgroupID: Integer): any;
declare function SGroup_Kill(sgroup: SGroupID): any;
declare function SGroup_Remove(group: SGroupID, squadron: SquadID): any;
declare function SGroup_RemoveAbility(sgroup: SGroupID, ability: Integer): any;
declare function SGroup_RemoveGroup(group: SGroupID, grouptoremove: SGroupID): any;
declare function SGroup_RemoveUpgrade(sgroup: SGroupID, upgrade: Integer): any;
declare function SGroup_ReSpawn(groupid: SGroupID): any;
declare function SGroup_RestoreCombatPlans(sgroupID: SGroupID): any;
declare function SGroup_RewardActionPoints(sgroup: SGroupID, actionpoint: Real): any;
declare function SGroup_SetAnimatorAction(sgroupid: SGroupID, actionName: String): any;
declare function SGroup_SetAnimatorEvent(sgroupid: SGroupID, eventName: String): any;
declare function SGroup_SetAnimatorState(sgroupid: SGroupID, stateMachineName: String, stateName: String): any;
declare function SGroup_SetAutoTargetting(group: SGroupID, hardpoint: Integer, enable: Boolean): any;
declare function SGroup_SetAvgHealth(sgroup: SGroupID, healthpercent: Real): any;
declare function SGroup_SetAvgMorale(sgroup: SGroupID, moralepercent: Real): any;
declare function SGroup_SetCrushable(sgroup: SGroupID, crushable: Boolean): any;
declare function SGroup_SetInvulnerable(sgroup: SGroupID, enabled: Boolean, OPT_reset_time: Real): any;
declare function SGroup_SetMoodMode(group: SGroupID, mode: Integer): any;
declare function SGroup_SetPlayerOwner(sgroup: SGroupID, owner: PlayerID): any;
declare function SGroup_SetRecrewable(sgroup: SGroupID, recrewable: Boolean): any;
declare function SGroup_SetResource(sgroup: SGroupID, resource: ResourceType, amount: Integer): any;
declare function SGroup_SetSelectable(sgroupid: SGroupID, selectable: Boolean): any;
declare function SGroup_SetSharedProductionQueue(egroup: SGroupID, enable: Boolean): any;
declare function SGroup_SetSuppression(groupid: SGroupID, suppression: Real): any;
declare function SGroup_SetTeamWeaponCapturable(group: SGroupID, enable: Boolean): any;
declare function SGroup_SetVeterancyDisplayVisibility(groupid: SGroupID, visible: Boolean): any;
declare function SGroup_SetWorldOwned(sgroup: SGroupID): any;
declare function SGroup_Single(groupID: SGroupID, squad: squadID): any;
declare function SGroup_SnapFaceEachOther(sgroup1: SGroupID, sgroup2: SGroupID): any;
declare function SGroup_SuggestPosture(sgroup: SGroupID, posture: Integer, duration: Real): any;
declare function SGroup_TotalMembersCount(sgroup: SGroupID, dontCountTeamWeapons: Boolean): any;
declare function SGroup_WarpToMarker(sgroup: SGroupID, marker: MarkerID): any;
declare function SGroup_WarpToPos(sgroup: SGroupID, pos: Position): any;
declare function Util_Grab(subselect: Boolean): any;
declare function Sound_ForceMusicEnabled(): any;
declare function Sound_ForceSetMinimumMusicCombatIntensity(combatIntensity: Real, durationSeconds: Real): any;
declare function Sound_ForceSilenceEnabled(): any;
declare function Sound_MusicStop(): any;
declare function Sound_PlaySpeech(eventName: String, eventArgs: Integer): any;
declare function Sound_PlaySpeechForPlayer(player: PlayerID, eventName: String, eventArgs: Integer): any;
declare function Sound_SetForceMusic(value: Boolean): any;
declare function Sound_SetForceSilence(value: Boolean): any;
declare function Sound_SetManualMusicSelectDuration(durationSecs: Real): any;
declare function Sound_SetMinimumMusicCombatIntensity(combatIntensity: Real, durationSeconds: Real): any;
declare function Sound_SetMusicIntensityScaling(scale: Real): any;
declare function Sound_SetMusicRaceCode(raceCode: String): any;
declare function Sound_StartMusicOutro(outroEvent: String): any;
declare function separated(not: or, smallvectorSGroup: SGroupID, sgroup: SGroupID, spawnedOnly: Boolean, idealSquadRadius: Real): any;
declare function SGroup_CalculateClusterSeparation(sgroup: SGroupID, spawnedOnly: Boolean, numClusters: Integer): any;
declare function SGroup_FacePosition(sgroup: SGroupID, pos: Position): any;
declare function SGroup_SnapFacePosition(sgroup: SGroupID, pos: Position): any;
declare function Squad_AddAbility(squad: SquadID, ability: ScarAbilityPBG): any;
declare function Squad_AddAllResources(squad: SquadID, amount: Real): any;
declare function Squad_AddSlotItemToDropOnDeath(squad: SquadID, pbg: ScarSlotItemPBG, dropChance: Real, exclusive: Boolean): any;
declare function Squad_AdjustAbilityCooldown(squad: SquadID, tickAmount: Integer): any;
declare function Squad_CanAttackEntity(attacker: SquadID, target: EntityID, checkFOW: Boolean, checkVis: Boolean): any;
declare function Squad_CanCaptureStrategicPoint(squad: SquadID, entity: EntityID): any;
declare function Squad_CanCaptureTeamWeapon(pSquad: SquadID, pEntity: EntityID): any;
declare function Squad_CanCastAbilityOnEGroup(caster: SquadID, ability: Integer, target_egroup: EGroupID): any;
declare function Squad_CanCastAbilityOnEntity(castingSquad: SquadID, abilityPBG: ScarAbilityPBG, targetEntity: EntityID): any;
declare function Squad_CanCastAbilityOnPosition(castingSquad: SquadID, abilityPBG: ScarAbilityPBG, targetPos: Position): any;
declare function Squad_CanCastAbilityOnSGroup(caster: SquadID, ability: Integer, target_sgroup: SGroupID): any;
declare function Squad_CanCastAbilityOnSquad(castingSquad: SquadID, abilityPBG: ScarAbilityPBG, targetSquad: SquadID): any;
declare function Squad_CancelProductionQueueItem(squad: SquadID, index: Integer): any;
declare function Squad_CanHold(squad: SquadID): any;
declare function Squad_CanInstantReinforceNow(squad: SquadID): any;
declare function Squad_CanLoadSquad(squad: SquadID, loadthis: SquadID, assumeEmpty: Boolean, assumeVisible: Boolean): any;
declare function Squad_CanPickupSlotItem(pSquad: SquadID, pEntity: EntityID): any;
declare function Squad_CanRecrew(pSquad: SquadID, pEntity: EntityID): any;
declare function Squad_CanSeeEntity(squad: SquadID, entity: EntityID): any;
declare function Squad_CanSeeSquad(squad: SquadID, target: SquadID): any;
declare function Squad_CanTargetEntity(squad: Squad, target: Entity, checkFOW: Boolean): any;
declare function Squad_CanTargetSquad(squad: Squad, target: Squad, checkFOW: Boolean): any;
declare function Squad_ClearPostureSuggestion(squad: SquadID): any;
declare function Squad_ClearStateModelEnumTableTarget(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_ClearStateModelTarget(squad: SquadID, key: String): any;
declare function Squad_CompleteUpgrade(pSquad: SquadID, upgradePBG: ScarUpgradePBG): any;
declare function Squad_Count(squad: SquadID): any;
declare function Squad_CreateAndSpawnToward(sbp: ScarSquadPBG, player: PlayerID, loadoutCount: Integer, pos: Position, toward: Position): any;
declare function Squad_DeSpawn(squad: SquadID): any;
declare function Squad_Destroy(squad: SquadID): any;
declare function Squad_EnableProductionQueue(squad: SquadID, enable: Boolean): any;
declare function Squad_EnableSurprise(squad: SquadID, enable: Boolean): any;
declare function Squad_EntityAt(squad: SquadID, index: Integer): any;
declare function Squad_ExtensionCount(): any;
declare function Squad_ExtensionEnabled(pSquad: SquadID, extID: ComponentDependencyIndex): any;
declare function Squad_ExtensionName(pSquad: SquadID, extID: ComponentDependencyIndex): any;
declare function Squad_FacePosition(squad: SquadID, pos: Position): any;
declare function Squad_FaceSquad(squad1: SquadID, squad2: SquadID): any;
declare function Squad_FindCover(squad: SquadID, pos: Position, coverSearchRadius: Real): any;
declare function Squad_FindCoverCompareCurrent(squad: SquadID, pos: Position, coverSearchRadius: Real, maxPathDistanceFromGoal: Real, compareToCurrentCover: Boolean): any;
declare function Squad_FromID(id: Integer): any;
declare function Squad_GetActiveUpgrades(squad: Squad): any;
declare function Squad_GetAttackTargets(squad: SquadID, sgroup: SGroupID): any;
declare function Squad_GetBlueprint(squad: SquadID): any;
declare function Squad_GetCoverLevel(squad: SquadID): any;
declare function Squad_GetDestination(squad: SquadID): any;
declare function Squad_GetHeading(squad: SquadID): any;
declare function Squad_GetHealth(squad: SquadID): any;
declare function Squad_GetHealthMax(squad: SquadID): any;
declare function Squad_GetHealthPercentage(squad: SquadID, bIncludeBonuses: Boolean): any;
declare function Squad_GetHealthPercentageWithShields(squad: SquadID, includeBonuses: Boolean): any;
declare function Squad_GetHoldEntity(squad: SquadID): any;
declare function Squad_GetHoldSquad(squad: SquadID): any;
declare function Squad_GetID(squad: SquadID): any;
declare function Squad_GetInvulnerable(squad: SquadID): any;
declare function Squad_GetInvulnerableEntityCount(squad: SquadID): any;
declare function Squad_GetInvulnerableMinCap(squad: SquadID): any;
declare function Squad_GetLastAttacker(squad: SquadID, sgroup: SGroupID): any;
declare function Squad_GetLastAttackers(squad: SquadID, group: SGroupID, timeSeconds: Real): any;
declare function Squad_GetLastEntityAttacker(squad: SquadID, egroup: EGroupID): any;
declare function Squad_GetMax(squad: SquadID): any;
declare function Squad_GetMaxEntityDropOffDistance(targetSquad: SquadID): any;
declare function Squad_GetMinArmor(squad: SquadID): any;
declare function Squad_GetMostRecentQueuedCommandID(squad: SquadID): any;
declare function Squad_GetNumSlotItem(squad: SquadID, pbg: ScarSlotItemPBG): any;
declare function Squad_GetOffsetPosition(squad: SquadID, offset: Integer, distance: Real): any;
declare function Squad_GetPlayerOwner(squad: SquadID): any;
declare function Squad_GetPosition(squad: SquadID): any;
declare function Squad_GetPositionDeSpawned(squad: SquadID): any;
declare function Squad_GetProductionQueueItem(squad: SquadID, index: Integer): any;
declare function Squad_GetProductionQueueItemType(squad: SquadID, index: Integer): any;
declare function Squad_GetProductionQueueSize(squad: SquadID): any;
declare function Squad_GetRace(squad: SquadID): any;
declare function Squad_GetShieldPercentage(squad: SquadID): any;
declare function Squad_GetSlotItemAt(squad: SquadID, index: Integer): any;
declare function Squad_GetSlotItemCount(squad: SquadID): any;
declare function Squad_GetSlotItemsTable(squadid: SquadID): any;
declare function Squad_GetSquadDoingDisableOnSquad(pSquad: SquadID): any;
declare function Squad_GetSquadsHeld(squad: SquadID, sgroup: SGroupID): any;
declare function Squad_GetStateModelBool(squad: SquadID, key: String): any;
declare function Squad_GetStateModelEntityTarget(squad: SquadID, key: String): any;
declare function Squad_GetStateModelEnumTableBool(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTableEntityTarget(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTableFloat(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTableInt(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTablePlayerTarget(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTableSquadTarget(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelEnumTableVector3f(squad: SquadID, key: String, tableRowIndex: Integer): any;
declare function Squad_GetStateModelFloat(squad: SquadID, key: String): any;
declare function Squad_GetStateModelInt(squad: SquadID, key: String): any;
declare function Squad_GetStateModelPlayerTarget(squad: SquadID, key: String): any;
declare function Squad_GetStateModelSquadTarget(squad: SquadID, key: String): any;
declare function Squad_GetStateModelVector3f(squad: SquadID, key: String): any;
declare function Squad_GetSuppression(squad: SquadID): any;
declare function Squad_GetVehicleMobileDriverSquad(pSquad: SquadID): any;
declare function Squad_GetVeterancy(squad: SquadID): any;
declare function Squad_GetVeterancyRank(squad: SquadID): any;
declare function Squad_GiveSlotItem(squad: SquadID, pbg: ScarSlotItemPBG): any;
declare function Squad_GiveSlotItemsFromTable(squadid: SquadID, itemTable: LuaTable): any;
declare function Squad_HasAbility(squad: SquadID, ability: ScarAbilityPBG): any;
declare function Squad_HasActiveCommand(squad: SquadID): any;
declare function Squad_HasBlueprint(squad: SquadID, blueprints: SBPSquadTypeTable): any;
declare function Squad_HasBuilding(pSquad: SquadID): any;
declare function Squad_HasDestination(squad: SquadID): any;
declare function Squad_HasEntityWithNInteractors(targetSquad: SquadID, interactionTypeName: String, minAttachedCount: Integer): any;
declare function Squad_HasHeavyWeapon(pSquad: SquadID): any;
declare function Squad_HasInfantry(pSquad: SquadID): any;
declare function Squad_HasProductionQueue(squad: SquadID): any;
declare function Squad_HasSetupTeamWeapon(pSquad: SquadID): any;
declare function Squad_HasSlotItem(squad: SquadID, slotItem: SlotItemID): any;
declare function Squad_HasTeamWeapon(pSquad: SquadID): any;
declare function Squad_HasUpgrade(squad: SquadID, pbg: ScarUpgradePBG): any;
declare function Squad_HasVehicle(pSquad: SquadID): any;
declare function Squad_HasWeaponHardpoint(pSquad: SquadID, hardPointName: String): any;
declare function Squad_IncreaseVeterancy(squad: SquadID, veterancy: Real, silent: Boolean, applyModifiers: Boolean): any;
declare function Squad_IncreaseVeterancyRank(squad: SquadID, numranks: Integer, silent: Boolean): any;
declare function Squad_InstantSetupTeamWeapon(squad: SquadID): any;
declare function Squad_IsAbilityActive_CS(squad: SquadID, pbg: ScarAbilityPBG): any;
declare function Squad_IsAlive(squad: SquadID): any;
declare function Squad_IsAttacking(squad: SquadID, time: Real): any;
declare function Squad_IsAttackMoving(squad: SquadID): any;
declare function Squad_IsCamouflaged(squad: SquadID): any;
declare function Squad_IsCapturing(squad: SquadID): any;
declare function Squad_IsCasualty(squad: SquadID): any;
declare function Squad_IsConstructing(squad: SquadID): any;
declare function Squad_IsDoingAbility(squad: SquadID, pbg: ScarAbilityPBG): any;
declare function Squad_IsFemale(squad: SquadID): any;
declare function Squad_IsGatheringResourceType(targetSquad: SquadID, type: Integer): any;
declare function Squad_IsHoldingAny(squad: SquadID): any;
declare function Squad_IsHoldingPosition(squad: SquadID): any;
declare function Squad_IsIdle(squad: SquadID): any;
declare function Squad_IsInBackground(pSquad: SquadID): any;
declare function Squad_IsInCover(squadId: SquadID, all: Boolean): any;
declare function Squad_IsInHoldEntity(squad: SquadID): any;
declare function Squad_IsInHoldSquad(squad: SquadID): any;
declare function Squad_IsInMeleeCombat(pSquad: SquadID): any;
declare function Squad_IsKnockedBack(squad: SquadID): any;
declare function Squad_IsMoving(squad: SquadID): any;
declare function Squad_IsOfType(squad: SquadID, type: String): any;
declare function Squad_IsOnWalkableWall(squad: SquadID, all: Boolean): any;
declare function Squad_IsPinned(squad: SquadID): any;
declare function Squad_IsPinnedOrSuppressed(squad: SquadID): any;
declare function Squad_IsReinforcing(squad: SquadID): any;
declare function Squad_IsRetreating(squad: SquadID): any;
declare function Squad_IsSBPOfType(sbp: ScarSquadPBG, type: String): any;
declare function Squad_IsSettingDemolitions(squad: SquadID): any;
declare function Squad_IsSiege(pbg: ScarSquadPBG): any;
declare function Squad_IsStunned(squad: SquadID): any;
declare function Squad_IsSuppressed(squad: SquadID): any;
declare function Squad_IsUnderAttack(squad: SquadID, time: Real): any;
declare function Squad_IsUnderAttackByPlayer(squad: SquadID, pAttackerOwner: PlayerID, time: Real): any;
declare function Squad_IsUnderAttackFromDirection(squad: SquadID, offset: Integer, timeSeconds: Real): any;
declare function Squad_IsUpgrading(squad: SquadID, upgrade: ScarUpgradePBG): any;
declare function Squad_IsUpgradingAny(squad: SquadID): any;
declare function Squad_IsValid(id: Integer): any;
declare function Squad_Kill(squad: SquadID): any;
declare function Squad_NumUpgradeComplete(squad: SquadID, upgradePBG: ScarUpgradePBG): any;
declare function Squad_Population(squad: SquadID, type: CapType): any;
declare function Squad_RemoveAbility(squad: SquadID, ability: ScarAbilityPBG): any;
declare function Squad_RemoveSlotItemAt(squad: SquadID, index: Integer, bInstantWeaponChange: Boolean): any;
declare function Squad_RemoveStateModelListBool(squad: SquadID, key: String, value: Boolean): any;
declare function Squad_RemoveStateModelListEntityTarget(squad: SquadID, key: String, value: EntityID): any;
declare function Squad_RemoveStateModelListFloat(squad: SquadID, key: String, value: Real): any;
declare function Squad_RemoveStateModelListInt(squad: SquadID, key: String, value: Integer): any;
declare function Squad_RemoveStateModelListPlayerTarget(squad: SquadID, key: String, value: PlayerID): any;
declare function Squad_RemoveStateModelListSquadTarget(squad: SquadID, key: String, value: SquadID): any;
declare function Squad_RemoveStateModelListVector3f(squad: SquadID, key: String, value: Position): any;
declare function Squad_RemoveUpgrade(squad: SquadID, upgrade: ScarUpgradePBG): any;
declare function Squad_RewardActionPoints(squad: SquadID, actionPoint: Real): any;
declare function Squad_SBPEntityAt(sbp: ScarSquadPBG, index: Integer): any;
declare function Squad_SBPGetMax(sbp: ScarSquadPBG): any;
declare function Squad_SetAnimatorAction(squadid: SquadID, actionName: String): any;
declare function Squad_SetAnimatorEvent(squadid: SquadID, actionName: String): any;
declare function Squad_SetAnimatorState(squadid: SquadID, stateMachineName: String, stateName: String): any;
declare function Squad_SetBackground(pSquad: SquadID, isInBackground: Boolean): any;
declare function Squad_SetExtEnabled(pSquad: SquadID, extID: String, enabled: Boolean): any;
declare function Squad_SetHealth(squad: SquadID, healthPercent: Real): any;
declare function Squad_SetInvulnerable(squad: SquadID, enable: Boolean, reset_time: Real): any;
declare function Squad_SetInvulnerableEntityCount(squad: SquadID, invEntityCount: Integer, resetTime: Real): any;
declare function Squad_SetInvulnerableMinCap(squad: SquadID, minHealthPercentage: Real, resetTime: Real): any;
declare function Squad_SetMoodMode(squad: SquadID, mood: SquadCombatBehaviourMoodMode): any;
declare function Squad_SetMoveType(squad: SquadID, movetypePBG: ScarMoveTypePBG): any;
declare function Squad_SetPlayerOwner(squad: SquadID, owner: PlayerID): any;
declare function Squad_SetPosition(squad: SquadID, pos: Position, positionFacingToward: Position): any;
declare function Squad_SetPosition3D(squad: SquadID, pos: Position, toward: Position): any;
declare function Squad_SetRecrewable(squad: SquadID, capturable: Boolean): any;
declare function Squad_SetSharedProductionQueue(squad: SquadID, shared: Boolean): any;
declare function Squad_SetStateModelBool(squad: SquadID, key: String, value: Boolean): any;
declare function Squad_SetStateModelEntityTarget(squad: SquadID, key: String, value: EntityID): any;
declare function Squad_SetStateModelEnumTableBool(squad: SquadID, key: String, tableRowIndex: Integer, value: Boolean): any;
declare function Squad_SetStateModelEnumTableEntityTarget(squad: SquadID, key: String, tableRowIndex: Integer, value: EntityID): any;
declare function Squad_SetStateModelEnumTableFloat(squad: SquadID, key: String, tableRowIndex: Integer, value: Real): any;
declare function Squad_SetStateModelEnumTableInt(squad: SquadID, key: String, tableRowIndex: Integer, value: Integer): any;
declare function Squad_SetStateModelEnumTablePlayerTarget(squad: SquadID, key: String, tableRowIndex: Integer, value: PlayerID): any;
declare function Squad_SetStateModelEnumTableSquadTarget(squad: SquadID, key: String, tableRowIndex: Integer, value: SquadID): any;
declare function Squad_SetStateModelEnumTableVector3f(squad: SquadID, key: String, tableRowIndex: Integer, value: Position): any;
declare function Squad_SetStateModelFloat(squad: SquadID, key: String, value: Real): any;
declare function Squad_SetStateModelInt(squad: SquadID, key: String, value: Integer): any;
declare function Squad_SetStateModelListBool(squad: SquadID, key: String, value: Boolean, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListEntityTarget(squad: SquadID, key: String, value: EntityID, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListFloat(squad: SquadID, key: String, value: Real, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListInt(squad: SquadID, key: String, value: Integer, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListPlayerTarget(squad: SquadID, key: String, value: PlayerID, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListSquadTarget(squad: SquadID, key: String, value: SquadID, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelListVector3f(squad: SquadID, key: String, value: Position, allowDuplicates: Boolean): any;
declare function Squad_SetStateModelPlayerTarget(squad: SquadID, key: String, value: PlayerID): any;
declare function Squad_SetStateModelSquadTarget(squad: SquadID, key: String, value: SquadID): any;
declare function Squad_SetStateModelVector3f(squad: SquadID, key: String, value: Position): any;
declare function Squad_SetSuppression(squad: SquadID, percentage: Real): any;
declare function Squad_SetVeterancyDisplayVisibility(squad: SquadID, visible: Boolean): any;
declare function Squad_SetWorldOwned(squad: SquadID): any;
declare function Squad_Spawn(squad: SquadID, pos: Position, spawnType: String): any;
declare function Squad_SpawnToward(squad: SquadID, pos: Position, toward: Position, spawnType: String): any;
declare function Squad_Split(squad: SquadID, int: Integer): any;
declare function Squad_StopAbility(squad: SquadID, ability: ScarAbilityPBG, bIsEarlyExit: Boolean): any;
declare function Squad_SuggestPosture(squad: SquadID, posture: Integer, duration: Real): any;
declare function Squad_TryFindClosestFreePosition(squad: SquadID, targetPosition: Position): any;
declare function Squad_WarpToPos(squad: SquadID, pos: Position): any;
declare function Team_AddResource(team: TeamID, resourceType: Integer, value: Real): any;
declare function Team_AddSquadsToSGroup(team: TeamID, squadgroupName: String): any;
declare function Team_AreSquadsNearMarker(team: TeamID, marker: MarkerID): any;
declare function Team_CanSee(teamid: TeamID, item: EGroupID, all: Boolean): any;
declare function Team_ClearArea(team: TeamID, marker: MarkerID, invulnerable: Boolean): any;
declare function Team_CountPlayers(): any;
declare function Team_DefineAllies(): any;
declare function Team_DefineEnemies(): any;
declare function Team_FindByRace(race: String, OPT_race2: String): any;
declare function Team_ForEachAllOrAny(team: TeamID, all: Boolean, function1: LuaFunction): any;
declare function Team_GetAll(team: TeamID, OPT_sgroup: SGroupID, OPT_egroup: EGroupID): any;
declare function Team_GetAllEntitiesNearMarker(team: TeamID, egroup: EGroupID, position: MarkerIDPosSectorID, OPT_range: Real): any;
declare function Team_GetAllSquadsNearMarker(team: TeamID, sgroup: SGroupID, position: MarkerIDPosSectorID, OPT_range: Real): any;
declare function Team_GetBuildingID(player: PlayerID, entitytypes: Integer, OPT_bool: ANY): any;
declare function Team_GetBuildingsCount(team: TeamID): any;
declare function Team_GetBuildingsCountExcept(team: TeamID, exceptions: Integer): any;
declare function Team_GetBuildingsCountOnly(team: TeamID, ebplist: Integer): any;
declare function Team_GetEnemyTeam(team: TeamID): any;
declare function Team_GetEntitiesFromType(team: TeamID, unitType: String): any;
declare function Team_HasBuilding(team: TeamID, entitytypes: Integer, OPT_bool: ANY): any;
declare function Team_HasBuildingsExcept(team: TeamID, exceptions: Integer, OPT_bool: ANY): any;
declare function Team_HasBuildingUnderConstruction(team: TeamID, entitytypes: Integer, OPT_bool: ANY): any;
declare function Team_HasHuman(team: TeamID, OPT_bool: ANY): any;
declare function Team_IsAlive(): any;
declare function Team_IsSurrendered(): any;
declare function Team_OwnsEGroup(team: TeamID, egroup: EGroupID, OPT_any: Boolean): any;
declare function Team_OwnsEntity(team: TeamID, entity: EntityID): any;
declare function Team_OwnsSGroup(team: TeamID, sgroup: SGroupID, OPT_all: Boolean): any;
declare function Team_OwnsSquad(team: TeamID, squad: SquadID): any;
declare function Team_RestrictAddOnList(team: TeamID, addonlist: Table): any;
declare function Team_RestrictBuildingList(team: TeamID, blueprintlist: Table): any;
declare function Team_RestrictResearchList(team: TeamID, list: String): any;
declare function Team_SetAbilityAvailability(team: TeamID, bp: Integer, availability: Integer): any;
declare function Team_SetCommandAvailability(team: TeamID, command: Integer, availability: Integer): any;
declare function Team_SetConstructionMenuAvailability(team: TeamID, menuname: String, availability: Integer): any;
declare function Team_SetEntityProductionAvailability(team: TeamID, bp: Integer, availability: Integer): any;
declare function Team_SetMaxCapPopulation(team: TeamID, captype: Integer, newcap: Integer): any;
declare function Team_SetMaxPopulation(team: TeamID, captype: Integer, newcap: Integer): any;
declare function Team_SetSquadProductionAvailability(team: TeamID, bp: Integer, availability: Integer): any;
declare function Team_SetTechTreeByYear(team: TeamID, year: Integer): any;
declare function Team_SetUpgradeAvailability(team: TeamID, bp: Integer, availability: Integer): any;
declare function Team_SetUpgradeCost(team: TeamID, upgrade: UpgradeID, food: Real, wood: Real, stone: Real, gold: Real): any;
declare function Territory_ContainsSectorID(sectorID: SectorID): any;
declare function Territory_FindClosestSectorToPoint(pos3D: Position): any;
declare function Territory_GetAdjacentSectors(sectorID: SectorID): any;
declare function Territory_GetPrimaryEntityInSector(sectorID: SectorID): any;
declare function Territory_GetSectorContainingPoint(pos3D: Position): any;
declare function Territory_GetSectorCreatorEntity(sectorID: SectorID): any;
declare function Territory_GetSectorGeneratorPointOnTerrain(sectorID: SectorID): any;
declare function Territory_GetSectorOwnerID(sectorID: SectorID): any;
declare function Territory_IsHexagonTerritory(): any;
declare function Timer_Add(timerID: Integer, period: Real): any;
declare function Timer_Advance(timerID: Integer, period: Real): any;
declare function Timer_Display(timerID: Integer): any;
declare function Timer_DisplayOnScreen(timerID: Integer): any;
declare function Timer_End(timerID: Integer): any;
declare function Timer_Exists(timerID: Integer): any;
declare function Timer_GetElapsed(timerID: Integer): any;
declare function Timer_GetMinutesAndSeconds(getTimeFunction: Luafunction, TimerID: Integer): any;
declare function Timer_GetRemaining(timerID: Integer): any;
declare function Timer_IsPaused(timerID: Integer): any;
declare function Timer_Pause(timerID: Integer): any;
declare function Timer_Resume(timerID: Integer, OPT_force: Boolean): any;
declare function Timer_Start(timerID: Integer, period: Real): any;
declare function Training_AddCallbacksToGoal(targetgoalonStartafunctionwithGoalStartReasonasargumentEGfunctionOnGoalStart: the): any;
declare function Training_AddExTagToGoal(): any;
declare function Training_AddGoalSequence(): any;
declare function Training_EnableGoalSequence(goalSequence: GoalSequence, enabled: Boolean): any;
declare function Training_EnableGoalSequenceByID(id: String, enabled: Boolean): any;
declare function Training_EndGoalSequence(): any;
declare function Training_Goal(key: String, data: Table): any;
declare function Training_GoalSequence(id: String, repeatMax: Integer, remindMax: Integer, goalTriggeredAudioEvent: String, completeAudioEvent: String): any;
declare function Command_PlayerBroadcastMessage(player: PlayerID, dest: PlayerID, messageType: Integer, message: String): any;
declare function FOW_Enable(enable: Boolean): any;
declare function Game_ConvertInputEnabledFlagEnumToInt(flag: InputEnabledFlag): any;
declare function Game_ConvertVisibilityFlagEnumToInt(flag: VisibilityFlag): any;
declare function Game_EndSubTextFade(): any;
declare function Game_EndTextTitleFade(): any;
declare function Game_GetInputEnabledFlag(): any;
declare function Game_GetLocalPlayer(): any;
declare function Game_GetLocalPlayerID(): any;
declare function Game_GetVisibilityFlag(): any;
declare function Game_HasLocalPlayer(): any;
declare function Game_IsPaused(): any;
declare function Game_IsPerformanceTest(): any;
declare function Game_RequestSetLocalPlayer(player: PlayerID): any;
declare function Game_SetInputEnabledFlag(flag: Integer): any;
declare function Game_SetPlayerColour(player: target, Colour_Neutral: or): any;
declare function Game_SetPlayerSlotColour(player: target, basedplayerslotindex: 1): any;
declare function Game_SetPlayerUIColour(player: target, Colour_Neutral: or): any;
declare function Game_SetPlayerUISlotColour(player: target, basedplayerslotindex: 1): any;
declare function Game_SetVisibility(flag: VisibilityFlag, visible: Boolean): any;
declare function Game_SetVisibilityFlag(flag: Integer): any;
declare function Game_SkipAllEvents(deleteQueued: Boolean): any;
declare function Game_SkipEvent(): any;
declare function Game_SubTextFade(location: String, time: String, detail: String, in1: Real, lifetime: Real, out: Real): any;
declare function Game_SubTextFadeWithIcon(line1: String, line2: String, line3: String, detail: String, in1: Real, lifetime: Real, out: Real, icon: String): any;
declare function Game_TextTitleFade(text: String, fadeIn: Real, duration: Real, fadeOut: Real): any;
declare function Ghost_DisableSpotting(): any;
declare function Ghost_EnableSpotting(): any;
declare function HintMouseover_Add(hintText: String, hintTarget: EGroupID, targetRadius: Real, looping: Boolean): any;
declare function HintMouseover_Remove(hintText: String, hintTarget: EGroupID): any;
declare function HintPoint_Add(where: StackVar, bVisible: Boolean, hintText: String, OPT_height: number, OPT_actionType: Integer, OPT_iconName: String, OPT_priority: number, OPT_visibleInFOW: Boolean, OPT_dataTemplate: String): any;
declare function HintPoint_AddToEGroup(egroup: EGroupID, priority: Integer, visible: Boolean, function1: LuaFunction, dataTemplate: String, hint: String, arrow: Boolean, arrowOffset: Position, actionType: Integer, iconName: String, visibleInFOW: Boolean): any;
declare function HintPoint_AddToEntity(entity: EntityID, priority: Integer, visible: Boolean, function1: LuaFunction, dataTemplate: String, hint: String, arrow: Boolean, arrowOffset: Position, objectiveID: Integer, actionType: Integer, iconName: String, visibleInFOW: Boolean): any;
declare function HintPoint_AddToPosition(position: Position, priority: Integer, visible: Boolean, function1: LuaFunction, dataTemplate: String, hint: String, arrow: Boolean, arrowOffset: Position, objectiveID: Integer, actionType: Integer, iconName: String, visibleInFOW: Boolean): any;
declare function HintPoint_AddToSGroup(sgroup: SGroupID, priority: Integer, visible: Boolean, function1: LuaFunction, dataTemplate: String, hint: String, arrow: Boolean, arrowOffset: Position, actionType: Integer, iconName: String, visibleInFOW: Boolean): any;
declare function HintPoint_AddToSquad(squad: SquadID, priority: Integer, visible: Boolean, function1: LuaFunction, dataTemplate: String, hint: String, arrow: Boolean, arrowOffset: Position, objectiveID: Integer, actionType: Integer, iconName: String, visibleInFOW: Boolean): any;
declare function HintPoint_ClearFacing(id: Integer): any;
declare function HintPoint_Remove(HintPointID: Integer): any;
declare function HintPoint_RemoveAll(): any;
declare function HintPoint_SetDisplayOffset(hintpointID: Integer, x: Real, y: Real, OPT_z: Real): any;
declare function HintPoint_SetDisplayOffsetInternal(id: Integer, offset: Position): any;
declare function HintPoint_SetFacingEntity(id: Integer, entity: EntityID): any;
declare function HintPoint_SetFacingPosition(id: Integer, position: Position): any;
declare function HintPoint_SetFacingSquad(id: Integer, squad: SquadID): any;
declare function HintPoint_SetVisible(HintPointID: Integer, bVisible: Boolean): any;
declare function HintPoint_SetVisibleInternal(id: Integer, visible: Boolean): any;
declare function MapIcon_ClearFacing(id: Integer): any;
declare function MapIcon_CreateArrow(position_from: MarkerPos, position_to: MarkerPos, red: Integer, green: Integer, blue: Integer, alpha: Integer): any;
declare function MapIcon_CreateEntity(entity: EntityID, icon: String, scale: Real, red: Integer, green: Integer, blue: Integer, alpha: Integer): any;
declare function MapIcon_CreatePosition(position: Position, icon: String, scale: Real, red: Integer, green: Integer, blue: Integer, alpha: Integer): any;
declare function MapIcon_CreateSquad(squad: SquadID, icon: String, scale: Real, red: Integer, green: Integer, blue: Integer, alpha: Integer): any;
declare function MapIcon_Destroy(id: Integer): any;
declare function MapIcon_DestroyAll(): any;
declare function MapIcon_SetFacingEntity(id: Integer, entity: EntityID): any;
declare function MapIcon_SetFacingPosition(id: Integer, position: Position): any;
declare function MapIcon_SetFacingSquad(id: Integer, squad: SquadID): any;
declare function Misc_AddRestrictCommandsCircle(position: Position, radius: Real): any;
declare function Misc_AddRestrictCommandsMarker(marker: MarkerID): any;
declare function Misc_AddRestrictCommandsOBB(minPosition: Position, maxPosition: Position): any;
declare function Misc_AreDefaultCommandsEnabled(): any;
declare function Misc_ClearControlGroup(groupIndex: Integer): any;
declare function Misc_ClearSelection(): any;
declare function Misc_ClearSubselection(): any;
declare function Misc_DoWeaponHitEffectOnEntity(entity: EntityID, pos: Position, weaponPBG: ScarWeaponPBG, penetrated: Boolean): any;
declare function Misc_GetControlGroupContents(groupIndex: Integer, squads: SGroupID, nonSquadEntities: EGroupID): any;
declare function Misc_GetEntityControlGroup(entity: EntityID): any;
declare function Misc_GetHiddenPositionOnPath(checkType: Integer, origin: Position, destination: Position, ebpID: Integer, stepDistance: Real, cameraPadding: Real, FOWPlayer: PlayerID, debugDisplay: Boolean): any;
declare function Misc_GetMouseOnTerrain(): any;
declare function Misc_GetMouseOverEntity(): any;
declare function Misc_GetMouseOverSquad(): any;
declare function Misc_GetSelectedEntities(group: EGroupID, subselection: Boolean): any;
declare function Misc_GetSelectedSquads(group: SGroupID, subselection: Boolean): any;
declare function Misc_GetSquadControlGroup(squad: SquadID): any;
declare function Misc_IsEGroupSelected(egroup: EGroupID, all: Boolean): any;
declare function Misc_IsEntityOnScreen(entity: EntityID, percent: Real): any;
declare function Misc_IsEntitySelected(entity: EntityID): any;
declare function Misc_IsMouseOverEntity(): any;
declare function Misc_IsMouseOverSquad(): any;
declare function Misc_IsSelectionInputEnabled(): any;
declare function Misc_IsSGroupSelected(sgroup: SGroupID, all: Boolean): any;
declare function Misc_IsSquadOnScreen(squad: SquadID, percent: Real): any;
declare function Misc_IsSquadSelected(squad: SquadID): any;
declare function Misc_RemoveCommandRestriction(): any;
declare function Misc_RestrictCommandsToMarker(marker: MarkerID): any;
declare function Misc_SelectEGroup(egroup: EGroupID): any;
declare function Misc_SelectEntity(entity: EntityID): any;
declare function Misc_SelectSGroup(sgroup: SGroupID, selected: Boolean): any;
declare function Misc_SelectSquad(squad: SquadID, selected: Boolean): any;
declare function Misc_SetDefaultCommandsEnabled(enabled: Boolean): any;
declare function Misc_SetEGroupSelectable(egroup: EGroupID, selectable: Boolean): any;
declare function Misc_SetEntityControlGroup(entity: EntityID, groupIndex: Integer): any;
declare function Misc_SetEntitySelectable(entity: EntityID, selectable: Boolean): any;
declare function Misc_SetSelectionInputEnabled(enabled: Boolean): any;
declare function Misc_SetSGroupSelectable(sgroup: SGroupID, selectable: Boolean): any;
declare function Misc_SetSquadControlGroup(squad: SquadID, groupIndex: Integer): any;
declare function Misc_SetSquadSelectable(squad: SquadID, selectable: Boolean): any;
declare function Obj_HideProgress(): any;
declare function Obj_HideProgressEx(progressBarIndex: Integer): any;
declare function Obj_SetProgressBlinking(blinking: Boolean): any;
declare function Obj_ShowProgress(title: String, progress: Real): any;
declare function Obj_ShowProgress2(title: String, progress: Real): any;
declare function Obj_ShowProgressEx(progressBarIndex: Integer, title: String, progress: Real, critical: Boolean): any;
declare function Obj_ShowProgressTimer(progress: Real): any;
declare function PlayerColour_ClearConfigChangedCallback(): any;
declare function PlayerColour_Disable(): any;
declare function PlayerColour_Enable(): any;
declare function PlayerColour_SetConfigChangedCallback(function1: LuaFunction): any;
declare function Subtitle_EndAllSpeech(): any;
declare function Subtitle_EndCurrentSpeech(): any;
declare function Subtitle_PlayNarrativeEvent(str: String): any;
declare function Subtitle_PlayNarrativeLine(str: String): any;
declare function Subtitle_PlaySpeechForSquadFromLocString(briefingActorPBG: ScarBriefingActorPBG, loc: String, disableIconSubtitle: Boolean, audioCtrlEvent: String, squad: SquadID, is3D: Boolean): any;
declare function Subtitle_PlaySpeechInternal(briefingActorPBG: ScarBriefingActorPBG, loc: String, disableIconSubtitle: Boolean, audioCtrlEvent: String, squad: SquadID, is3D: Boolean): any;
declare function Subtitle_UnstickCurrentSpeech(): any;
declare function SynchronizedCommand_PlayerAbility(player: PlayerID, dest: PlayerID, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function SynchronizedCommand_PlayerPosAbility(player: PlayerID, dest: PlayerID, pos: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function SynchronizedCommand_PlayerPosDirAbility(player: PlayerID, dest: PlayerID, pos: Position, dir: Position, abilityPBG: ScarAbilityPBG, skipCostAndPrereq: Boolean): any;
declare function Taskbar_IsVisible(): any;
declare function Taskbar_SetVisibility(visible: Boolean): any;
declare function ThreatArrow_Add(GroupID: Integer, Threat: EGroupID, OPT_icon: String): any;
declare function ThreatArrow_CreateGroup(dataTemplate: String, target1: MarkerPosEntitySquadGroup, OPT_target2: MarkerPosEntitySquadGroup): any;
declare function ThreatArrow_DestroyAllGroups(): any;
declare function ThreatArrow_DestroyGroup(GroupID: Integer): any;
declare function ThreatArrow_Remove(GroupID: Integer, Threat: EGroupID): any;
declare function UI_AddHintAndFlashAbility(playerid: PlayerID, abilityID: AbilityID, text: String, length: Integer, OPT_blueprint_filter: Integer): any;
declare function UI_AllTerritoryHide(): any;
declare function UI_AllTerritoryShow(): any;
declare function UI_AutosaveMessageHide(): any;
declare function UI_AutosaveMessageShow(): any;
declare function UI_CapturePointLinesHide(): any;
declare function UI_CapturePointLinesShow(): any;
declare function UI_ClearEventCueFromID(id: Integer): any;
declare function UI_ClearEventCues(): any;
declare function UI_ClearModalAbilityPhaseCallback(): any;
declare function UI_ClearModalConstructionPhaseCallback(): any;
declare function UI_ClearModalHoverCallback(): any;
declare function UI_ClearSkipNISCallback(): any;
declare function UI_CommandCardSetColumns(columns: Integer): any;
declare function UI_CommandCardSetRows(rows: Integer): any;
declare function UI_CoverPreviewHide(): any;
declare function UI_CoverPreviewShow(): any;
declare function UI_CreateCommand(): any;
declare function UI_CreateCustomEventCueFrom(playerCanbenullUsedforretrievingplayerinformationEgteamcolor: sender, typeid: event, durationoftheeventcue: visible, repeatfilteringif0Maketheeventcuealivebutnotvisiblebeyonditslifetime: enable, repeatTime0howmanytimesaeventcuewiththesamecustomEventTypecanberepeatedduringrepeatTime: when, repeatTime0filteroutaeventcueifitswithintherangeofaexistingonewiththesamecustomEventType: when, datatemplateoftheeventcue: ui, cuevisibilityflagsECV_NonenotvisibleECV_QueuevisibleinthequeueECV_TitlevisibleastitleECV_QueueECV_Titleboth: event, cuevisibilityflags: event, eventcuevisibilityinactionECAV_GlobalECAV_ExecuterIsOwnOrAllyECAV_ExecuterIsEnemyECAV_CanSeeExecutorECAV_CanSeeTargetECAV_CanEnemySeeExecutorECAV_TargetIsOwnECAV_TargetIsAllyECAV_OwnsTargetAndExecuterIsEnemyECAV_AlliedToTargetAndExecuterIsEnemyECAV_ExecuterIsOwnECAV_ExecuterIsAllyECAV_CanSeeTargetAndExecutorIsOwnOrAllyECAV_CanSeeTargetAndExecutorIsOwn: Control): any;
declare function UI_CreateDataContext(): any;
declare function UI_CreateEntityKickerMessage(player: PlayerID, entity: EntityID, message: String): any;
declare function UI_CreateEventCue(title: String, description: String, data_template: String, icon_path: String, sound_path: String, OPT_visibility: EventCueVisibility, OPT_lifetime: Real): any;
declare function UI_CreateEventCueClickable(customEventType: Integer, lifetime: Real, repeatCount: Integer, repeatTime: Real, title: String, description: String, dataTemplate: String, iconPath: String, soundPath: String, red: Integer, green: Integer, blue: Integer, alpha: Integer, visibility: EventCueVisibility, function1: LuaFunction): any;
declare function UI_CreateEventCueClickableByType(eventType: UIEventType, lifetime: Real, title: String, description: String, dataTemplate: String, iconPath: String, soundPath: String, red: Integer, green: Integer, blue: Integer, alpha: Integer, visibility: EventCueVisibility, function1: LuaFunction): any;
declare function UI_CreateMinimapBlip(where: StackVar, lifetime: Real, blipDataTemplate: String): any;
declare function UI_CreateMinimapBlipOnMarkerFrom(sender: PlayerID, marker: MarkerID, lifeTime: Real, dataTemplate: String): any;
declare function UI_CreateMinimapBlipOnPosFrom(sender: PlayerID, position: Position, lifeTime: Real, dataTemplate: String): any;
declare function UI_CreatePositionKickerMessage(player: PlayerID, position: Position, message: String): any;
declare function UI_CreateSGroupKickerMessage(player: PlayerID, sgroup: SGroupID, message: String): any;
declare function UI_CreateSquadKickerMessage(player: PlayerID, squad: SquadID, message: String): any;
declare function UI_CreateTagForPosition(scarpositionWontacceptapositionextremelyclose: a): any;
declare function UI_CursorHide(): any;
declare function UI_CursorShow(): any;
declare function UI_DeleteMinimapBlip(blipID: Integer): any;
declare function UI_DestroyTagForPosition(oforextremelyclose: same): any;
declare function UI_EnableEntityDecorator(entity: EntityID, enabled: Boolean): any;
declare function UI_EnableEntityMinimapIndicator(entity: EntityID, enabled: Boolean): any;
declare function UI_EnableEntitySelectionVisuals(entity: EntityID, enabled: Boolean): any;
declare function UI_EnableGameEventCueType(gameEventType: GameEventID, enable: Boolean): any;
declare function UI_EnableResourceTypeKicker(resourceType: ResourceType, enable: Boolean): any;
declare function UI_EnableSquadDecorator(squad: SquadID, enabled: Boolean): any;
declare function UI_EnableSquadMinimapIndicator(squad: SquadID, enabled: Boolean): any;
declare function UI_EnableUIEventCueType(uiEventType: UIEventType, enable: Boolean): any;
declare function UI_FadeOutEventCueFromID(id: Integer): any;
declare function UI_FlashAbilityButton(ability: ScarAbilityPBG, stopOnClick: Boolean): any;
declare function UI_FlashConstructionButton(ebp: ScarEntityPBG, stopOnClick: Boolean): any;
declare function UI_FlashEntity(entity: EntityID, actionOnName: String): any;
declare function UI_FlashEntityCommandButton(command: EntityCommandType, stopOnClick: Boolean): any;
declare function UI_FlashEventCue(eventCueID: Integer, stopOnClick: Boolean): any;
declare function UI_FlashMenu(menuName: String, stopOnClick: Boolean): any;
declare function UI_FlashObjectiveCounter(objectiveID: Integer): any;
declare function UI_FlashObjectiveIcon(objectiveID: Integer, stopOnClick: Boolean): any;
declare function UI_FlashProductionBuildingButton(type: String, stopOnClick: Boolean): any;
declare function UI_FlashProductionButton(type: ProductionItemType, pbg: PropertyBagGroup, stopOnClick: Boolean): any;
declare function UI_FlashSquadCommandButton(command: SquadCommandType, stopOnClick: Boolean): any;
declare function UI_FlashUSSEntityButton(entity: EntityID, stopOnClick: Boolean): any;
declare function UI_FlashUSSSquadButton(squad: SquadID, stopOnClick: Boolean): any;
declare function UI_GetAbilityIconName(abilityBag: ScarAbilityPBG): any;
declare function UI_GetColourAsString(): any;
declare function UI_GetDecoratorsEnabled(): any;
declare function UI_GetDecoratorVisibilityEntity(entity: Entity): any;
declare function UI_GetDecoratorVisibilitySquad(squad: Squad): any;
declare function UI_HighlightSGroup(sgroup: SGroupID, duration: Real): any;
declare function UI_HighlightSquad(squad: SquadID, duration: Real): any;
declare function UI_IsReplay(): any;
declare function UI_LetterboxFade(r: Real, g: Real, b: Real, a: Real, duration: Real, aspectRatio: Real, persistent: Boolean): any;
declare function UI_ModalVisual_CreateReticule(reticulePbg: ScarReticulePBG, radius: Real): any;
declare function UI_ModalVisual_Destroy(id: Integer): any;
declare function UI_NewHUDFeature(newHUDFeature: HUDFeatureType, featureText: String, featureIcon: String, duration: Real): any;
declare function UI_OutOfBoundsLinesHide(): any;
declare function UI_OutOfBoundsLinesShow(): any;
declare function UI_RestrictBuildingPlacement(marker: MarkerID): any;
declare function UI_ScreenFade(r: Real, g: Real, b: Real, a: Real, duration: Real, persistent: Boolean): any;
declare function UI_SectorsHide(): any;
declare function UI_SectorsShow(): any;
declare function UI_SetAlliedBandBoxSelection(allow: Boolean): any;
declare function UI_SetAllowLoadAndSave(allowLoadAndSave: Boolean): any;
declare function UI_SetControlGroupSelectedCallback(theformatoffunction: In): any;
declare function UI_SetCPMeterVisibility(visible: Boolean): any;
declare function UI_SetDecoratorsEnabled(enabled: Boolean): any;
declare function UI_SetEnablePauseMenu(isEnable: Boolean): any;
declare function UI_SetEntityDecorator(entity: EntityID, decorator: String): any;
declare function UI_SetForceShowSubtitles(forceShowSubtitles: Boolean): any;
declare function UI_SetMinimapTrueNorth(trueNorthAngleDeg: Real): any;
declare function UI_SetModalAbilityPhaseCallback(function1: LuaFunction): any;
declare function UI_SetModalConstructionPhaseCallback(function1: LuaFunction): any;
declare function UI_SetModalHoverCallback(function1: LuaFunction): any;
declare function UI_SetSGroupSpecialLevel(sgroup: SGroupID, level: Integer): any;
declare function UI_SetSilhouetteEnabled(unit: EGroupID, enabled: Boolean): any;
declare function UI_SetSkipNISCallback(function1: LuaFunction): any;
declare function UI_SetSquadDecorator(squad: SquadID, decorator: String): any;
declare function UI_SetSquadDecoratorAlwaysVisible(squad: SquadID, alwaysVisible: Boolean): any;
declare function UI_SetUIExtEnabled(unit: EGroupID, enabled: Boolean): any;
declare function UI_StopFlashing(): any;
declare function UI_SystemMessageHide(message: String): any;
declare function UI_SystemMessageShow(message: String): any;
declare function UI_TitleDestroy(): any;
declare function UI_ToggleDecorators(): any;
declare function UI_UnrestrictBuildingPlacement(): any;
declare function UIWarning_Show(text: String): any;
declare function WinWarning_PublishLoseReminder(player: PlayerID, warningLevel: Integer): any;
declare function WinWarning_ShowLoseWarning(text: String, fadeIn: Real, duration: Real, fadeOut: Real): any;
declare function bug(errormessage: ErrorMessage): any;
declare function Clone(data: Table, OPT_recursive: Boolean): any;
declare function Enum_ToNumber(var1: StackVar): any;
declare function Enum_ToString(var1: StackVar): any;
declare function Event_IsAnyRunning(): any;
declare function Game_EndSP(win: Boolean, OPT_winReason: WinReason, OPT_nis: Boolean, OPT_sandmap: Boolean): any;
declare function Game_FadeToBlack(direction: Boolean, length: Real): any;
declare function Import_Once(Path: String): any;
declare function Loc_FormatText(FormatID: Integer | string, OPT_parameters: argc): any;
declare function Modify_EnableIsVisibleInFOW(group: EGroupID, enable: Boolean, durationSeconds: Real): any;
declare function Modify_OnFireDamagePerTick(egroup: EGroupID, mathtype: ModifierUsageType, value: Real): any;
declare function Modify_OnFireDecayAmountPerTick(egroup: EGroupID, mathtype: ModifierUsageType, value: Real): any;
declare function Modify_OnFireHealthPercentage(egroup: EGroupID, mathtype: ModifierUsageType, value: Real): any;
declare function Modify_OnFireThreshold(egroup: EGroupID, mathtype: ModifierUsageType, value: Real): any;
declare function Modify_PlayerSquadLoadoutMax(player: Player, mathtype: ModifierUsageType, value: Real): any;
declare function Modify_SquadShieldRegen(group: SGroupID, Factor: Integer, Usage: MUT): any;
declare function Position_IsValid(pos: Position): any;
declare function Sound_PlayOnSquad(soundpathname: String, sgroupid: SGroupID): any;
declare function Team_GetEntityConcentration(team: TeamID, OPT_popcapOnly: Boolean, OPT_includeBlueprints: Table, OPT_excludeBlueprints: Table, OPT_bLeastConcentrated: Boolean, OPT_onlyInThisMarker: MarkerIDTable): any;
declare function Team_GetSquadConcentration(team: TeamID, OPT_popcapOnly: Boolean, OPT_includeBlueprints: Table, OPT_excludeBlueprints: Table, OPT_bLeastConcentrated: Boolean, OPT_onlyInThisMarker: MarkerIDTable): any;
declare function UnitEntry_CompleteAllImmediately(): any;
declare function UnitEntry_CompleteImmediately(): any;
declare function UnitExit_CompleteAllImmediately(): any;
declare function Util_AddMouseoverSquadToSGroup(OPT_clearGroup: Boolean): any;
declare function Util_ApplyModifier(groupid: EGroupID, modifier: String, scalefactor: Real, mathtype: Real, OPT_applytype: Real, OPT_exclusive: Boolean, OPT_targetname: String): any;
declare function Util_AutoAmbient(intelEventTable: Table): any;
declare function Util_AutoIntel(intelEventTable: Table): any;
declare function Util_AutoNISlet(nisletType: Integer, intelEventTable: Table, OPT_bFOWvisible: Boolean): any;
declare function Util_AutoSave(OPT_waitUntilOutOfCombat: Boolean, OPT_onlyCareAboutCombatOnScreen: Boolean, OPT_maxWaitTime: Real): any;
declare function Util_ClearWrecksFromMarker(position: MarkerIDPosSectorID, OPT_range: Real, OPT_wrecksList: Table): any;
declare function Util_Comparison(value1: Real, comparison: Comparison, value2: Real): any;
declare function Util_CreateEntities(player: PlayerID, egroup: EGroupID, blueprintID: Integer, location: MarkerIDPos, numentities: Integer, OPT_toward: MarkerIDPos, OPT_snapToGround: Boolean, OPT_skipForceConstruct: Boolean, OPT_useMarkerTransform: Boolean): any;
declare function Util_CreateSquads(player: PlayerID, sgroup: SGroupID, sbp: Integer, spawn_point: EGroupID, OPT_destination: Position, OPT_numsquads: Integer, OPT_loadout: Integer, OPT_attackmove: Boolean, OPT_dest_facing: Position, OPT_upgrades: Integer, OPT_spawn_facing: Position, OPT_spawntype: String): any;
declare function Util_DeploySquads(spawntype: Spawntype, player: PlayerID, sgroup: SGroupID, location: Position, squadlist: Table, stagger: Number, callback: Func, ignorepathfindinggroupMoredetailsinUnitEntryscar: EGroupID): any;
declare function Util_DifVar(difficultyVariables: Table, OPT_difficulty: Integer): any;
declare function Util_DotProductRadians(vectorA: Vector, vectorB: Vector): any;
declare function Util_ElementCanSee(playerIDteamID: PlayerIDTeamID, element: EGroupID): any;
declare function Util_EntityLimit(OPT_entityLimit: Integer): any;
declare function Util_ExitSquads(squads: SGroupID, exitType: ExitType, data: Table, staggered: Boolean): any;
declare function Util_FallBackToGarrisonBuilding(sgroupid: SGroupID, radius: Integer): any;
declare function Util_FindHiddenItem(items: EGroupID): any;
declare function Util_FindHiddenSpawn(origin: Position, destination: Position, furthest: Boolean): any;
declare function Util_FindVisibleSpawn(origin: Position, destination: Position, furthest: Boolean): any;
declare function Util_ForceRetreatAll(sgroup: SGroupID, marker: Marker, aiEncounterDisable: Boolean): any;
declare function Util_GarrisonNearbyBuilding(sgroup: SGroupID, pos: Position, radius: Real, OPT_occupied: Boolean, OPT_filter: SGroupID): any;
declare function Util_GarrisonNearbyVehicle(sgroup: SGroupID, pos: Position, radius: Real, OPT_occupied: Boolean, OPT_filter: SGroupID): any;
declare function Util_GetAngleDifference(item1: EGroupID, item2: EGroupID): any;
declare function Util_GetClosestMarker(var1: Variable, markers: Table): any;
declare function Util_GetDirection(item: EGroupID): any;
declare function Util_GetDirectionFromAtoB(a: EGroupID, b: EGroupID): any;
declare function Util_GetDistance(Object1: EGroupID, Object2: EGroupID): any;
declare function Util_GetDistanceSquared(Object1: EGroupID, Object2: EGroupID): any;
declare function Util_GetEntitiesByBP(sourcegroup: EGroupID, destgroup: EGroupID, ebp: Integer): any;
declare function Util_GetFacingFromDirection(pos: Position, direction: Position): any;
declare function Util_GetHealth(var1: EGroupID): any;
declare function Util_GetMouseoverSGroup(): any;
declare function Util_GetOffsetPosition(pos: EGroupID, offset: Integer, distance: Real): any;
declare function Util_GetPlayerOwner(Object: EGroupID): any;
declare function Util_GetPosition(var1: Variable): any;
declare function Util_GetPositionAwayFromPlayer(pos: EGroupID, player: PlayerID, OPT_searchRadius: Integer, OPT_distance: Integer): any;
declare function Util_GetPositionFromAtoB(a: MarkerIDPos, b: MarkerIDPos, distance: Real): any;
declare function Util_GetRandomHiddenPosition(items: EGroupID): any;
declare function Util_GetRandomPosition(OPT_range: Real, OPT_hidden: Boolean): any;
declare function Util_GetRelationship(Object_1: EGroupID, Object_2: EGroupID): any;
declare function Util_GetRelativeOffset(element: EGroupID, pos: EGroupID): any;
declare function Util_GetSquadsByBP(sourcegroup: SGroupID, destgroup: SGroupID, sbp: Integer): any;
declare function Util_GetTrailingNumber(val: String): any;
declare function Util_HasPosition(var1: Variable): any;
declare function Util_HidePlayerForNIS(player: PlayerID, hide: Boolean): any;
declare function Util_IsSequenceSkipped(): any;
declare function Util_Kill(var1: EGroupID): any;
declare function Util_LogSyncWpn(syncweapon: SGroupID, OPT_kill: Boolean): any;
declare function Util_MarkerFX(markername: String, eventfile: String): any;
declare function Util_MissionTitle(title: String, OPT_time_fade_in: Integer, OPT_lifetime: Integer, OPT_time_fade_out: Integer): any;
declare function Util_NewHUDFeatureEvent(newHUDFeature: HUDFeatureType, featureText: String, featureIcon: String, duration: Real): any;
declare function Util_PlayMovie(name: String, OPT_fadeOut: Integer, OPT_fadeIn: Integer, OPT_onComplete: LuaFunction, OPT_delay: Integer, OPT_onCompleteAfterMovie: Boolean): any;
declare function Util_PlayMusic(name: String): any;
declare function Util_PrintIf(): any;
declare function Util_PrintObject(obj: Object, OPT_max_depth: Integer, OPT_data_type: String, OPT_print_func: Function): any;
declare function Util_PrintTable(): any;
declare function Util_PrintUnitTable(): any;
declare function Util_ReloadScript(): any;
declare function Util_RestoreMusic(): any;
declare function Util_ScarPos(xpos: Real, zpos: Real, ypos: Real): any;
declare function Util_SetPlayerCanSkipSequence(event: LuaFunction, skippedCallback: LuaFunction, noFadeIn: Boolean, OPT_fadeInTime: Integer): any;
declare function Util_SetPlayerOwner(Object: EGroupID, owner: PlayerID, OPT_bApplyToSquadsHeldtrue: Boolean): any;
declare function Util_SetPlayerUnableToSkipSequence(event: LuaFunction, skippedCallback: LuaFunction, noFadeIn: Boolean): any;
declare function Util_SortPositionsByClosest(origin: EGroupID, positions: Table): any;
declare function Util_StartAmbient(func: LuaFunction): any;
declare function Util_StartIntel(func: LuaFunction): any;
declare function Util_StartNIS(NIS: LuaFunction): any;
declare function Util_StartQuickIntel(actor: String, speech: String): any;
declare function Util_StringSplit(): any;
declare function Util_TableContains(targetTable: Table, obj: Object): any;
declare function Util_ToggleAllowIntelEvents(): any;
declare function Util_TriggerEvent(playerid: PlayerID, position: EGroupID, range: Integer, func: LuaFunction, non_combat: Boolean, onscreen_only: Boolean, onscreen_duration: Integer): any;
declare function Util_UnitCounts(worldORplayerIDplayer: Boolean): any;
declare function World_KillAllNeutralEntitesNearMarker(marker: MarkerID): any;
declare function Marker_CleanUpTheDead(player: PlayerID, marker: MarkerID): any;
declare function Vector_Length(pos: Position): any;
declare function Vector_Lerp(factor: Real, pos1: Position, pos2: Position): any;
declare function Vector_Normalize(pos: Position): any;
declare function World_CalculateEntitiesAveragePositionInArea(player: PlayerID, pos: Position, radius: Real, ownerType: OwnerType, onlyEntitiesInSquads: Boolean): any;
declare function World_ChangeZoneInteractivity(targetInteractivity: Integer, adjustedInteractivity: Integer): any;
declare function World_CleanUpTheDead(player: PlayerID): any;
declare function World_DestroyWallsNearMarker(marker: MarkerID): any;
declare function World_DistanceEGroupToPoint(egroup: EGroupID, p1: Position, closest: Boolean): any;
declare function World_DistancePointToPoint(p1: Position, p2: Position): any;
declare function World_DistanceSGroupToPoint(sgroup: SGroupID, p1: Position, closest: Boolean): any;
declare function World_DistanceSquaredPointToPoint(p1: Position, p2: Position): any;
declare function World_EnableReplacementObjectForEmptyPlayers(enable: Boolean): any;
declare function World_EnableSharedLineOfSight(p0: PlayerID, p1: PlayerID, enableSharedVision: Boolean): any;
declare function World_GetAllNeutralEntities(egroup: EGroupID): any;
declare function World_GetBlueprintEntities(pbg: ScarEntityPBG, outEntities: EGroupID): any;
declare function World_GetClosest(var1: Variable, items: EGroupID): any;
declare function World_GetCoverPoints(group: EGroupID): any;
declare function World_GetEntitiesNearMarker(player: PlayerID, egroup: EGroupID, marker: MarkerID, ownerType: OwnerType): any;
declare function World_GetEntitiesNearPoint(player: PlayerID, egroup: EGroupID, pos: Position, radius: Real, ownerType: OwnerType): any;
declare function World_GetEntitiesWithinTerritorySector(player: PlayerID, egroup: EGroupID, inSectorID: Integer, ownerType: OwnerType): any;
declare function World_GetFurthest(var1: Variable, items: LuaTable): any;
declare function World_GetGameTicks(): any;
declare function World_GetGameTime(): any;
declare function World_GetHeightAt(x: Real, y: Real): any;
declare function World_GetInteractionStageAtPoint(position: Position): any;
declare function World_GetLength(): any;
declare function World_GetMetadataBiomePBGName(layerName: String, x: Real, y: Real): any;
declare function World_GetMetadataLayerBoolean(layerName: String, x: Real, y: Real): any;
declare function World_GetMetadataLayerInteger(layerName: String, x: Real, y: Real): any;
declare function World_GetMetadataLayerNumber(layerName: String, x: Real, y: Real): any;
declare function World_GetMetadataLayerPBG(layerName: String, x: Real, y: Real): any;
declare function World_GetMetadataLayerString(layerName: String, x: Real, y: Real): any;
declare function World_GetNearestInteractablePoint(position: Position): any;
declare function World_GetNeutralEntitiesNearMarker(egroup: EGroupID, marker: MarkerID): any;
declare function World_GetNeutralEntitiesNearPoint(egroup: EGroupID, pos: Position, radius: Real): any;
declare function World_GetNeutralEntitiesWithinTerritorySector(egroup: EGroupID, sectorID: Integer): any;
declare function World_GetNumEntitiesNearPoint(ebp: ScarEntityPBG, pos: Position, radius: Real): any;
declare function World_GetNumStrategicPoints(): any;
declare function World_GetOffsetPosition(position: Position, heading: Position, offset: Integer, distance: Real): any;
declare function World_GetOffsetPositionRelativeToFacingTarget(position: Position, facingTarget: Position, offset: Real): any;
declare function World_GetOffsetVectorPosition(position: Position, heading: Position, offset: Position): any;
declare function World_GetPlayerAt(index: Integer): any;
declare function World_GetPlayerCount(): any;
declare function World_GetPlayerIndex(player: PlayerID): any;
declare function World_GetPossibleSquadsBlueprint(racePBG: ScarRacePBG, index: Integer): any;
declare function World_GetPossibleSquadsCount(racePBG: ScarRacePBG): any;
declare function World_GetRaceBlueprint(racename: String): any;
declare function World_GetRand(min: Integer, max: Integer): any;
declare function World_GetScenarioMaxPlayers(): any;
declare function World_GetSpawnablePosition(around: Position, entity: EntityID): any;
declare function World_GetSquadsNearMarker(player: PlayerID, sgroup: SGroupID, marker: MarkerID, ownerType: OwnerType): any;
declare function World_GetSquadsNearPoint(player: PlayerID, sgroup: SGroupID, pos: Position, radius: Real, ownerType: OwnerType): any;
declare function World_GetSquadsWithinTerritorySector(player: PlayerID, sgroup: SGroupID, inSectorID: Integer, ownerType: OwnerType): any;
declare function World_GetStrategyPoints(group: EGroupID, bIncludeVP: Boolean): any;
declare function World_GetTeamTerritoryGaps(sectorID1: Integer, sectorID2: Integer, results: StackVarTable): any;
declare function World_GetTerrainCellType(x: Real, y: Real): any;
declare function World_GetTerritorySectorID(pos: Position): any;
declare function World_GetTerritorySectorPosition(inSectorID: Integer): any;
declare function World_GetWidth(): any;
declare function World_IsCurrentInteractionStageActive(stage: Integer): any;
declare function World_IsInSupply(player: PlayerID, pos: Position): any;
declare function World_IsMultiplayerGame(): any;
declare function World_IsPointInPlayerTerritory(player: PlayerID, position: Position): any;
declare function World_IsPosOnWalkableWall(p: Position): any;
declare function World_IsReplay(): any;
declare function World_IsTerritorySectorOwnedByPlayer(player: PlayerID, inSectorID: Integer): any;
declare function World_OwnsEGroup(egroup: EGroupID, all: Boolean): any;
declare function World_OwnsEntity(entity: EntityID): any;
declare function World_OwnsSGroup(sgroup: SGroupID, all: Boolean): any;
declare function World_OwnsSquad(squad: SquadID): any;
declare function World_PointPointProx(p1: Position, p2: Position, prox: Real): any;
declare function World_Pos(x: Real, y: Real, z: Real): any;
declare function World_PosInBounds(pos: Position): any;
declare function World_Reset(): any;
declare function World_SetAllInteractiveStagesVisibility(visibilityStatus: Boolean): any;
declare function World_SetDesignerSupply(point: Position, bSupply: Boolean): any;
declare function World_SetInteractionStage(stage: Integer): any;
declare function World_SetSharedLineOfSightEnabledAndMergeExploredMaps(p0: PlayerID, p1: PlayerID, enableSharedVision: Boolean): any;
declare function World_SpawnDemolitionCharge(player: PlayerID, pos: Position): any;
declare function World_TeamTerritoryPointsConnected(team_index: Integer, p1: Position, p2: Position): any;
declare function SGroup_EnableCheering(sgroup: SGroupID, enable: Boolean, OPT_duration: REAL, OPT_walla: String, OPT_audioDelay: REAL): any;
declare function SGroup_EnableLeaderCrown(sgroup: SGroupID, enable: Boolean): any;
declare function SGroup_PlaySpeech(sgroup: SGroupID, filepath: String): any;
declare function Util_ClearSquadsForCine(): any;
declare function Util_CorpseField(units_table: TABLESBP, spawnlocation: POSMARKER, OPT_cleanlocation: OPT_MARKER): any;
declare function Util_PlayCameras(cameraData: TABLE): any;
declare function ShieldWall_Create(posA: MarkerPos, posB: MarkerPos, units: SGroupID, specialUnitsPerRow: Table, OPT_immediate: Boolean, OPT_name: String): any;
declare function ShieldWall_Release(wall: ShieldWallID): any;
declare function Util_EnableCardinalCinematicMode(enable: Boolean, camera_type: Boolean, OPT_Keep_gampelayunits_forOutro: Boolean, OPT_fowUnRevealDelay: Real): any;
declare function Util_UnitParade(marker_table: TABLE, unit_table: TABLE, OPT_parade_sgroup: SGroupID, OPT_delay: OPT_REAL, OPT_player: OPT_PLAYER): any;
